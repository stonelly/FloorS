<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEALCoAAAAAGAAgFwAAFgAAACgAAAAsAAAAVAAAAAEAGAAAAAAAUAEAAMMOAADDDgAAAAAAAAAA
        AAC5tbG4sKn/////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////
        //////////////////+9uLW4sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4
        sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4sKm4
        sKm4sKm4sKm4sKm4sKm4sKm4sKm0rqm4sKnAu7i9ubXKysrKysrKysrKysrKysrKysrKysrKysrKysrK
        ysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrK
        ysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysqmpqbKysrDv7vBvLjLy8vLy8vLy8vLy8vLy8vL
        y8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL
        y8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8umpqbLy8vGwr7FwLzMzMzM
        zMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzM
        zMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMympqbM
        zMzIw8DHw7/Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3N
        zc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3N
        zc3Nzc3Nzc2mpqbNzc3LxsLKxcHPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/P
        z8/Pz8/NxsHFrJe/k3C8iGG/wLGBqHSJq3qbtJC1wa/Ozs3Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/P
        z8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8+mpqbPz8/Mx8PLx8PQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ
        0NDQ0NDQ0NDQ0NDKvrW/kWy0bjW+bSzKdC7Gbi24sJdDiy1RmjFRmzFNky9clEOPr4HDycDQ0NDQ0NDQ
        0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NCmpqbQ0NDOycXOycXQ0NDQ0NDQ0NDQ0NDQ0NDQ
        0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDBnX+0ai/DcC3AbiyybTW6h17CnoLKxL22xLOtvqaZs411oWNNjDFT
        njJRkDaVsYnQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NCmpqbQ0NDQy8fQy8fR0dHR
        0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHPzMq7h13Abyy/ayy+dUnFo4rOx8HR0dHR0dHR0dHR0dHR
        0dHR0dHR0dHFy8ORsIRQkDRSnTJ1oWHKzcnR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dGmpqbR
        0dHQy8fQy8fT09PT09PT09PT09PT09PT09PT09PT09PT09PT0tK5hFnDcC22ZSq6kWikw4zT09PT09PT
        09PT09PT09PT09PT09PT09PT09PT09PT09PAyb1tnlhTnzJpm1PEy8HT09PT09PT09PT09PT09PT09PT
        09PT09PT09OmpqbT09PRzMjRzMjU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU09K+km7Bbyy2ZSq8oH5r
        u0xNvBSJvGzU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTS0tJ5pGdTnjKiuZjU1NTU1NTU
        1NTU1NTU1NTU1NTU1NTU1NTU1NSmpqbU1NTSzcnSzcnV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXU1NO1
        eEbIcy7KoIzF2MVKrhRLrRNMrhWKvG7V1dXV1dWQv3V9u1rO08zV1dXV1dXV1dXV1dXV1dXV1dXQ0s+m
        vJ2Us4adtpPV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dWmpqbV1dXSzcnSzcnW1tbW1tbW1tbW1tbW1tbW
        1tbW1tbW1tbIsJ3JsZ7HpYzS1tJttkdMrhRJqBNMrhRMrxTD0LzO08tOqhpVxBaVwHy+z7W4za3W1tbW
        1tbW1tbW1tbW1tbR09BJiy1OjjPL0MnW1tbW1tbW1tbW1tbW1tbW1tbW1tampqbW1tbSzcnSzcnX19fX
        19fX19fX19fX19fX19fX19fV0MyxZyuycTzX19eaxoZRuhVJqBNKqhNNsBRWtCGwyqGuyp9OtBRLrhRc
        sC2SwHeTwHnX19fX19fX19fX19fX19fX19ePr4FTnzKUsofX19fX19fX19fX19fX19fX19fX19empqbX
        19fSzcnSzcnX19fX19fX19fX19fX19fX19fX19fIrZfIdC7BmHnX19enx5VQuBVPthRMsBSLv23M08jX
        19eqyJhNsRRKqRNOsxS0zKjS1dHX19fX19fX19fX19fX19fX19fIz8RNjzFelEbW1tXX19fX19fX19fX
        19fX19fX19empqbX19fSzcnSzcnY2NjY2NjY2NjY2NjY2NjY2NjY2Ni6hVrGcS3PwLSvzaKfxIp7uVd2
        ulCyy6PY2NjY2NjY2Nh2t1BOsxRLqRZMrBWOv3LY2NjY2NjY2NjY2NjY2NjY2Ni1zaioypR3oGVMkS7A
        y7zY2NjY2NjY2NjY2NjY2NjY2NimpqbY2NjSzcnSzcna2tra2tra2tra2tra2tra2tra2trCm3zAimW+
        zK56u1nV2NPa2tra2tra2tqVwntruT93uFJPqxtKqhNJqBNKqxNNshSqyJja2tra2trO1snA0bfa2tqh
        xoyxz5+dt5JRmzGnvp7a2tra2tra2tra2tra2tra2tqmpqba2trSzcnSzcnb29vb29vb29vb29vb29vb
        29vZ1tTJrJTRvK3O2Mq/0rW4zqvb29vb29vF1L1LrRRPtBROsxRKqhNJpxNJqRNOqxlfsDF+vlrO1snb
        29uIvmqKv23b29uPwHNrtkCkvphPlzGWtYnb29vb29vb29vb29vb29vb29umpqbb29vSzcnSzcnc3Nzc
        3Nzc3Nzc3Nzc3Nzc3NzY0862aCrAelKTxXtQtxdZryfS2M7c3NzS2M9TrCFMrxNJpxNLrRROsxRPtRRa
        rSpWrCVVtR2CvGG0zqVUrSFLqRZ8ullLrRRgszGvxKZOkzCSs4Pc3Nzc3Nzc3Nzc3Nzc3Nzc3Nympqbc
        3NzSzcnSzcnd3d3d3d3d3d3d3d3d3d3d3d3b2NaxbDTBelOYxoFMrxZNrhZ3ulG80bDa3Nmwzp9TsB5N
        shRcry2BvGB5uVVlsjlMsBRYrSdOqhlMrhRKqxNKqhNOsxRMrxRbryvJ08SwxKjEz8Dd3d3d3d3d3d3d
        3d3d3d3d3d2mpqbd3d3SzcnSzcnd3d3d3d3d3d3d3d3d3d3d3d3d3d22eUi3aTmtxZRIqhZTqiFOsxRQ
        rxqNwHDI1cBdsi2HwWehx4qcxoONwG92uU9Trx5wtkhNqhhKqhNJqBNJqBNJqBNNshR3ulCduJJioke4
        yLLd3d3d3d3d3d3d3d3d3d3d3d2mpqbd3d3SzcnSzcne3t7e3t7e3t7e3t7e3t7e3t7e3t7Akm3AbCzI
        vaWly5OlyZFRrB1ouDy80q/V29KQxHJUryBYridQuBVQqhx0t01YrihvtkdMqhZJqBNJqBNJqBNJqBNP
        thSdyIR4oWdNlC7F0MHe3t7e3t7e3t7e3t7e3t7e3t6mpqbe3t7SzcnSzcnf39/f39/f39/f39/f39/f
        39/f39/PtqLIcy7NnYa11q2EvmNSrB+Ivmrf39/T2s96uleXxXxZsChrtUFNqxhNsRRLrBNLqxNJqBNJ
        qBNJqBNJqBNLrBNTrh+1y6pPjjRglkne397f39/f39/f39/f39/f39/f39+mpqbf39/SzcnSzcng4ODg
        4ODg4ODg4ODg4ODg4ODg4ODd2dazbja6cDvEzbGLw22kyY/S28240aqeyIba3djC1bdRsBtptD5QqxxM
        sBRLrRRMrxRMrxRNsBRLrBNLrBNQuRWdyYO4xLVSnTKat47g4ODg4ODg4ODg4ODg4ODg4ODg4OCmpqbg
        4ODSzcnSzcnh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHIpIjTejHOq5Ph4eHh4eHh4eFdsC5QtxV0vEuI
        v2m60qyNwW9+vlqfyIi00aWRw3R8u1h1uU5hsTRQqxxyuUqiyIufyIewxqbT2dHh4eHh4eHh4eHh4eHh
        4eHh4eHh4eGmpqbh4eHSzcnSzcni4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLf2tbMqY7OsZrWu67J4cpu
        uERQuBVLrBNOtBRRuxWvz53i4uLi4uLi4uLi4uLh4uHG2L3G17za39jW3tO0z6VUsCBUwhat0Jni4uLi
        4uLi4uLi4uLi4uLi4uLi4uLi4uKmpqbi4uLSzcnSzcni4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLh
        4N+ybDS6aivSvauo1J18wFlMqxdMsBRgtDClyo/f4d7i4uLi4uLi4uLi4uLi4uLi4uLi4uLE17pasilS
        vBVgsjHT3c7i4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uKmpqbi4uLSzcnSzcnj4+Pj4+Pj4+Pj4+Pj4+Pj
        4+Pj4+Pj4+Pj4+Pj4+PTvKm3aiy9bCvVrZrj4+PP4s/F2rzX3tPj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Ph
        4uCgyodOrRlRuxVWsSPJ2b/j4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Ompqbj4+PSzcnSzcnl5eXl
        5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXWw7S6dDzKdC++gVHav7Ll5eXl5eXl5eXl5eXl5eXl
        5eXl5eXX4NOqz5Vqtz1PthVRuxVftDDH2Lzl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eWmpqbl
        5eXSzcnSzcnm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubg2dPFlG29bSzFci23dUHG
        mnfRtZ7YwrHj2NOn0JR5v1BTrCFQtxVSvhVMrxSDwV/Y4NTm5ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubm
        5ubm5ubm5uampqbm5ubSzcnSzcnn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn
        5+fbyr3Fl3G1bjXBbyzGci7RdzDPm4F4xFtZzRdPtxVSrh5/wFq/17Hn5+fn5+fn5+fn5+fn5+fn5+fn
        5+fn5+fn5+fn5+fn5+fn5+fn5+empqbn5+fSzsrSzsro6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo
        6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojl4t/cy73Ttp/OqIncwrW216mVyni21KXX4dHo6Ojo6Ojo6Ojo6Ojo
        6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Oimpqbo6OjSzsrSzsrp6enp6enp6enp6enp6enp
        6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp
        6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6emmpqbp6enSzsrSzsrp6enp
        6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp
        6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6enp6emmpqbp
        6enSzsrSzsrq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq
        6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq6urq
        6urq6urq6uqmpqbq6urSzsrSzsrr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr
        6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr
        6+vr6+vr6+vr6+vr6+vr6+vr6+vAwMDr6+vSzsrSzsrs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs
        7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs
        7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzSzsrSzsrt7e3t7e3t7e3t7e3t7e3t
        7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t
        7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3t7e3SzsrSzsru7u7u
        7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u
        7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u
        7u7SzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrS
        zsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrS
        zsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrS
        zsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrS
        zsrSzsrSzsrSzsrSzsrSzsrSzsrSzsrSzsoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAA=
</value>
  </data>
</root>