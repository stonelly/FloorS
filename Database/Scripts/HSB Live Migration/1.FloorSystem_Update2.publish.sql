/*
Deployment script for FloorSystemUAT

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO

CREATE OR ALTER   FUNCTION dbo.UFN_DOT_GetWarehouseForSummaryBatchCard
(
	-- Add the parameters for the function here
	--select dbo.UFN_DOT_GetWarehouseForSummaryBatchCard('2211290141',2) -- HBC-PROD
	@SerialNumber NVARCHAR(100),
	@Sequence INT
)
RETURNS NVARCHAR(50)
AS
BEGIN
DECLARE @FunctionIdentifier  NVARCHAR(50)
DECLARE @ParentRefRecId  BIGINT
DECLARE @PlantNo  NVARCHAR(10)
DECLARE @Warehouse  NVARCHAR(50)

	select @ParentRefRecId = Max(Id) from DOT_FloorAxIntParentTable with (nolock) 
	where batchnumber = @SerialNumber and Sequence < @Sequence and FunctionIdentifier not in ('SBC','SMBP','SGBC','SPPBC')
	and IsDeleted=0

	select @FunctionIdentifier = FunctionIdentifier, @PlantNo = PlantNo from DOT_FloorAxIntParentTable with (nolock) 
	where Id = @ParentRefRecId and IsDeleted=0

	IF (@FunctionIdentifier = 'SPBC' OR @FunctionIdentifier = 'STPO')
	BEGIN
		SELECT @Warehouse = Warehouse from DOT_TransferJournal with (nolock)  where ParentRefRecId = @ParentRefRecId
	END
	IF (@FunctionIdentifier = 'STPI') --STPI have data issue
	BEGIN
		SET @Warehouse = @PlantNo + '-PROD'
	END
	IF (@FunctionIdentifier = 'CBCI')
	BEGIN
		SET @Warehouse = @PlantNo + '-RWK'
	END
	IF (@FunctionIdentifier = 'SOBC' OR @FunctionIdentifier = 'HBC' OR @FunctionIdentifier = 'SRBC')
	BEGIN
		SELECT @Warehouse = Warehouse from DOT_RafStgTable with (nolock)  where ParentRefRecId = @ParentRefRecId
		IF LEN(@Warehouse) = 0 
		BEGIN
			SET @Warehouse = @PlantNo + '-PROD'
		END
	END
	IF (@FunctionIdentifier = 'PVTBCA' OR @FunctionIdentifier = 'PWTBCA' OR @FunctionIdentifier = 'PWTBCP' 
		OR @FunctionIdentifier = 'PWTBCQ' OR @FunctionIdentifier = 'PWTBCS')
	BEGIN
		SET @Warehouse = @PlantNo + '-QAI'
	END
	Return @Warehouse
END
GO
PRINT N'Refreshing Function [dbo].[UFN_DOT_GetAllStagingParent]...';

GO
-- =============================================    
-- Change History    
-- Date			Author		Comments    
-- -----		------		-----------------------------         
-- 11/01/2022	Max He		GET BO,D365BatchNo, Item No from detail staging for Batch Status Report
--                          for improve performance can use this function to replace function UFN_DOT_GetBOForSummaryBatchCard,UFN_DOT_GetD365BatchNoForSummaryBatchCard,UFN_DOT_GetItemNumberForSummaryBatchCard
-- =============================================  
 --select * from dbo.UFN_DOT_GetBO_D365BatchNo_ItemNumber_ForSummaryBatchCard('2221010163')  
CREATE    FUNCTION dbo.UFN_DOT_GetBO_D365BatchNo_ItemNumber_ForSummaryBatchCard  
(  
 -- Add the parameters for the function here  
 --select dbo.UFN_DOT_GetBOForSummaryBatchCard('2211290110')  
 --@SerialNumber NVARCHAR(100)  
)  
RETURNS TABLE
AS            
RETURN 
SELECT * 
FROM (
 select a.BatchNumber as SerialNumber,a.D365BatchNumber,b.BatchOrderNumber,b.ItemNumber 
 from DOT_FloorAxIntParentTable a with (nolock)  
 join DOT_RafStgTable b with (nolock) on a.id = b.ParentRefRecId and b.IsDeleted=0
 where a.Sequence = 1  and a.IsDeleted = 0
) aa
GO
PRINT N'Altering Procedure [dbo].[USP_DOT_FinalPackSummaryBatchCardReport]...';


GO
-- ==================================================================================================================================================          
-- Name: USP_DOT_FinalPackSummaryBatchCardReport        
-- Purpose: Summary Batch Card Report for Final Packing (SBC/SGBC)      
-- ==================================================================================================================================================          
-- Change History          
-- Date   Author   Comments          
-- -----  ------   ------------------------------------------------------------        
-- 2021/10/26   Azrul    SP created.          
-- ==================================================================================================================================================         
-- exec USP_DOT_FinalPackSummaryBatchCardReport '2211289819,2211290110,2210559670', '', '', '2021-01-01','2021-10-01','','',''      
-- exec USP_DOT_FinalPackSummaryBatchCardReport '2211290274,2211290295', '', '', '','','','',''      
-- exec USP_DOT_FinalPackSummaryBatchCardReport '', '', 'ANSL 301/20', '','','','',''      
-- exec USP_DOT_FinalPackSummaryBatchCardReport '', '', 'MEDU 806/21', '','','','',''      
-- exec USP_DOT_FinalPackSummaryBatchCardReport '', '', '', '2021-08-01','2021-08-31 23:59:59','','',''      
-- exec USP_DOT_FinalPackSummaryBatchCardReport @SerialNumber=N'',@D365BatchNumber=N'',@CustReferenceNumber=N'',@PlantNo=N'',@Warehouse=N'',@FunctionIdentifier=N'SMBP',@PostingDateTimeFrom='2021-12-01 00:00:00',@PostingDateTimeTo='2021-12-01 23:59:59'    
-- ==================================================================================================================================================      
      
CREATE OR ALTER   PROCEDURE USP_DOT_FinalPackSummaryBatchCardReport        
(      
@SerialNumber NVARCHAR(4000),      
@D365BatchNumber NVARCHAR(4000),      
@CustReferenceNumber NVARCHAR(4000),      
@PostingDateTimeFrom NVARCHAR(100),      
@PostingDateTimeTo NVARCHAR(100),      
@PlantNo NVARCHAR(4000),      
@Warehouse NVARCHAR(4000),      
@FunctionIdentifier NVARCHAR(4000)     
)      
      
AS      
BEGIN        
 -- SET NOCOUNT ON added to prevent extra result sets from          
 -- interfering with SELECT statements.          
 SET NOCOUNT ON;      
     
IF OBJECT_ID('tempdb..#FunctionIdentifiers') IS NOT NULL      
DROP TABLE #FunctionIdentifiers        
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL        
DROP TABLE #SerialNumbers       
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL        
DROP TABLE #D365BatchNumbers       
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL        
DROP TABLE #CustReferenceNumbers      
IF OBJECT_ID('tempdb..#TmpUnion') IS NOT NULL        
DROP TABLE #TmpUnion      
      
CREATE TABLE #FunctionIdentifiers (Identifier NVARCHAR(20) COLLATE DATABASE_DEFAULT)    
CREATE TABLE #SerialNumbers (SerialNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)      
CREATE TABLE #D365BatchNumbers (D365BatchNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)      
CREATE TABLE #CustReferenceNumbers (CustReferenceNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)      
CREATE TABLE #tmpUnion (PostingDateTime DATETIME2,       
      SerialNumber NVARCHAR(50) COLLATE DATABASE_DEFAULT,       
      D365BatchNumber NVARCHAR(50) COLLATE DATABASE_DEFAULT,       
      BatchOrderNumber NVARCHAR(50) COLLATE DATABASE_DEFAULT,       
      MovementJournalNumber NVARCHAR(50) COLLATE DATABASE_DEFAULT,       
      TransferJournalNumber NVARCHAR(50) COLLATE DATABASE_DEFAULT,       
      PickListJournalNumber NVARCHAR(50) COLLATE DATABASE_DEFAULT,       
      RouteCardJournalNumber NVARCHAR(50) COLLATE DATABASE_DEFAULT,       
      RAFJournalNumber NVARCHAR(50) COLLATE DATABASE_DEFAULT,       
      ItemNumber NVARCHAR(100) COLLATE DATABASE_DEFAULT,       
      Size NVARCHAR(10) COLLATE DATABASE_DEFAULT,       
      Warehouse NVARCHAR(10) COLLATE DATABASE_DEFAULT,       
      Location NVARCHAR(10) COLLATE DATABASE_DEFAULT,       
      TransitionQuantity DECIMAL (18, 4) DEFAULT 0.0000,       
      ReservedQuantity DECIMAL (18, 4),       
      BaseQuantity DECIMAL DEFAULT 0,       
      Sequence INT,       
      FunctionIdentifier NVARCHAR(50) COLLATE DATABASE_DEFAULT,      
      PlantNo NVARCHAR(10) COLLATE DATABASE_DEFAULT,      
      ReferenceBatchNumber1 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,       
      ReferenceBatchNumber2 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,       
      ReferenceBatchNumber3 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,       
      ReferenceBatchNumber4 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,       
      ReferenceBatchNumber5 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,      
      ReferenceBatchSequence1 INT DEFAULT 0,       
      ReferenceBatchSequence2 INT DEFAULT 0,       
      ReferenceBatchSequence3 INT DEFAULT 0,       
      ReferenceBatchSequence4 INT DEFAULT 0,       
      ReferenceBatchSequence5 INT DEFAULT 0,      
      RefNumberOfPieces1 DECIMAL DEFAULT 0,       
      RefNumberOfPieces2 DECIMAL DEFAULT 0,       
      RefNumberOfPieces3 DECIMAL DEFAULT 0,       
      RefNumberOfPieces4 DECIMAL DEFAULT 0,       
      RefNumberOfPieces5 DECIMAL DEFAULT 0,      
      RefItemNumber1 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,       
      RefItemNumber2 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,       
      RefItemNumber3 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,       
      RefItemNumber4 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,       
      RefItemNumber5 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,      
      PalletId NVARCHAR(50) COLLATE DATABASE_DEFAULT,
	  CreationTime DATETIME2)       
      
IF (LEN(@SerialNumber) > 0)       
BEGIN      
 INSERT INTO #SerialNumbers       
 select * from dbo.SplitString(NULLIF(@SerialNumber, ','), ',')      
END      
ELSE IF (LEN(@D365BatchNumber) > 0)       
BEGIN      
 INSERT INTO #D365BatchNumbers       
 select * from dbo.SplitString(NULLIF(@D365BatchNumber, ''), ',')      
      
 INSERT INTO #SerialNumbers      
 select     
 case when isnull(a.BatchNumber,'')='' then isnull(b.BatchNumber,'')    
    else isnull(a.BatchNumber,'') end     
    --*    
 from DOT_FloorAxIntParentTable a with(nolock)     
 left join DOT_FGJournalTable b with(nolock) on a.Id=b.ParentRefRecId and b.IsDeleted=0    
 where     
  D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '') or     
  a.BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '')    
    
 and a.IsDeleted = 0  --and IsMigratedFromAX6 = 0          
END      
Else IF (LEN(@CustReferenceNumber) > 0)       
BEGIN      
 INSERT INTO #CustReferenceNumbers       
 select * from dbo.SplitString(NULLIF(@CustReferenceNumber, ','), ',')      
      
 INSERT INTO #SerialNumbers      
 select BatchNumber from dbo.UFN_DOT_GetSNFromCustRefForSummaryBatchCardReport(@CustReferenceNumber)      
END      
      
DECLARE @TempPN TABLE (PlantNo VARCHAR(10))      
      
IF (LEN(@PlantNo) > 0)       
BEGIN      
 INSERT INTO @TempPN VALUES (@PlantNo)      
END      
      
ELSE      
BEGIN      
 INSERT INTO @TempPN select LocationName from LocationMaster      
END      
    
IF(LEN(@FunctionIdentifier) > 0)    
BEGIN    
 INSERT INTO #FunctionIdentifiers    
 select * from dbo.SplitString(NULLIF(@FunctionIdentifier, ','), ',')    
END    
ELSE    
BEGIN    
 INSERT INTO #FunctionIdentifiers     
 SELECT ('SBC')    
    
 INSERT INTO #FunctionIdentifiers     
 SELECT ('SGBC')    
END    
      
DECLARE @StartPostingDateTime DateTime = '2019-03-01'      
DECLARE @EndPostingDateTime DateTime = DATEADD(DAY,1,GetDate())      
DECLARE @SerialNoCount int      
SELECT @SerialNoCount = Count(1) from #SerialNumbers      
    
IF (@SerialNoCount > 0)      
BEGIN      
 --details: final pack      
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,       
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,      
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, BaseQuantity, Sequence, FunctionIdentifier, PlantNo, PalletId, CreationTime)      
      
 select b.PostingDateTime,     
   case when isnull(a.BatchNumber,'')=''     
    then     
     case when isnull(b.BatchNumber,'')=''     
      then     
       case when  isnull(a.ReferenceBatchNumber1,'')=''     
        then      
        case when  isnull(a.ReferenceBatchNumber2,'')=''     
         then      
         case when  isnull(a.ReferenceBatchNumber3,'')=''     
          then      
          case when  isnull(a.ReferenceBatchNumber4,'')='' then  isnull(a.ReferenceBatchNumber5,'') else  isnull(a.ReferenceBatchNumber4,'') end    
          else  isnull(a.ReferenceBatchNumber3,'')    
         end    
         else  isnull(a.ReferenceBatchNumber2,'')    
        end    
        else  isnull(a.ReferenceBatchNumber1,'')    
       end    
       else isnull(b.BatchNumber,'')     
     end    
    else isnull(a.BatchNumber,'')     
   end  as SerialNumber,    
 a.D365BatchNumber, b.BatchOrderNumber, '' as MovementJournalNumber, '' as TransferJournalNumber,        
 ISNULL(NULLIF(b.PickingListJournal,''), (select top 1 PickListJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and       
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as PickListJournalNumber, --for consolidation batch      
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select top 1 RouteCardJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and       
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as RouteCardJournalNumber, --for consolidation batch      
 ISNULL(NULLIF(b.ReportasFinishedJournal,''), (select top 1 RAFJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and       
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as RAFJournalNumber, --for consolidation batch      
      
 case when a.FunctionIdentifier = 'SGBC' then b.ReferenceItemNumber else b.ItemNumber end as ItemNumber,      
 b.Configuration as Size,      
 'FG' as Warehouse, '' as Location, b.Quantity as TransitionQuantity, NULL as ReservedQuantity, d.BaseQuantity,      
 a.Sequence, a.FunctionIdentifier,a.PlantNo, a.PalletId,a.CreationTime      
      
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_FGJournalTable b with(nolock) on a.id = b.ParentRefRecId      
 join DOT_FloorSalesLine d with(nolock) on d.SalesId = b.SalesOrderNumber and d.IsDeleted = 0    
 join #FunctionIdentifiers f on f.Identifier=a.FunctionIdentifier    
 where a.BatchNumber IN (Select Distinct SerialNumber from #SerialNumbers where SerialNumber <> '')      
 AND d.ItemId = case when a.FunctionIdentifier = 'SGBC' then b.ReferenceItemNumber else b.ItemNumber end       
 AND b.CONFIGURATION = d.HartalegaCommonSize      
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0       
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end      
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end      
 and PlantNo in (SELECT * FROM @TempPN)      
END      
ELSE      
BEGIN      
 --details: final pack      
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,       
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,       
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, BaseQuantity, Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime)      
      
 select b.PostingDateTime,    
   case when isnull(a.BatchNumber,'')=''     
    then     
     case when isnull(b.BatchNumber,'')=''     
      then     
       case when  isnull(a.ReferenceBatchNumber1,'')=''     
        then      
        case when  isnull(a.ReferenceBatchNumber2,'')=''     
         then      
         case when  isnull(a.ReferenceBatchNumber3,'')=''     
          then      
          case when  isnull(a.ReferenceBatchNumber4,'')='' then  isnull(a.ReferenceBatchNumber5,'') else  isnull(a.ReferenceBatchNumber4,'') end    
          else  isnull(a.ReferenceBatchNumber3,'')    
         end    
         else  isnull(a.ReferenceBatchNumber2,'')    
        end    
        else  isnull(a.ReferenceBatchNumber1,'')    
       end    
       else isnull(b.BatchNumber,'')     
     end    
    else isnull(a.BatchNumber,'')     
   end  as SerialNumber,    
 a.D365BatchNumber, b.BatchOrderNumber, '' as MovementJournalNumber, '' as TransferJournalNumber,        
 ISNULL(NULLIF(b.PickingListJournal,''), (select top 1 PickListJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and       
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as PickListJournalNumber, --for consolidation batch      
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select top 1 RouteCardJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and       
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as RouteCardJournalNumber, --for consolidation batch      
 ISNULL(NULLIF(b.ReportasFinishedJournal,''), (select top 1 RAFJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and       
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as RAFJournalNumber, --for consolidation batch      
      
 case when a.FunctionIdentifier = 'SGBC' then b.ReferenceItemNumber else b.ItemNumber end as ItemNumber,      
 b.Configuration as Size,      
 'FG' as Warehouse, '' as Location, b.Quantity as TransitionQuantity, NULL as ReservedQuantity, d.BaseQuantity,      
 a.Sequence, a.FunctionIdentifier, a.PlantNo, a.PalletId,a.CreationTime      
      
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_FGJournalTable b with(nolock) on a.id = b.ParentRefRecId      
 join DOT_FloorSalesLine d with(nolock) on d.SalesId = b.SalesOrderNumber and d.IsDeleted = 0    
 join #FunctionIdentifiers f on f.Identifier=a.FunctionIdentifier    
 where d.ItemId = case when a.FunctionIdentifier = 'SGBC' then b.ReferenceItemNumber else b.ItemNumber end       
 AND b.CONFIGURATION = d.HartalegaCommonSize      
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0       
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end      
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end      
 and PlantNo in (SELECT * FROM @TempPN)      
END      
      
--details: final pack-glove qty      
INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,       
TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size, Warehouse,       
Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo, PalletId,CreationTime)      
      
select PostingDateTime, SerialNumber,       
dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard(SerialNumber) as D365BatchNumber,       
--dbo.UFN_DOT_GetBOForSummaryBatchCard(SerialNumber) as BatchOrderNumber,
-- refer to FG BO
#tmpUnion.BatchOrderNumber,
MovementJournalNumber, TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,      
dbo.UFN_DOT_GetItemNumberForSummaryBatchCard(SerialNumber) as ItemNumber, Size,      
dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(SerialNumber,Sequence) as Warehouse,      
dbo.UFN_DOT_GetLocationForSummaryBatchCard(SerialNumber,Sequence) as Location,       
CAST(BaseQuantity as DECIMAL) * TransitionQuantity * -1 as TransitionQuantity, ReservedQuantity, Sequence + 1 as Sequence,       
FunctionIdentifier,PlantNo, PalletId,CreationTime      
from #tmpUnion      
      
Select a.PlantNo, a.FunctionIdentifier, a.PostingDateTime, a.SerialNumber, a.D365BatchNumber, a.BatchOrderNumber, a.MovementJournalNumber,       
a.TransferJournalNumber, a.PickListJournalNumber as PickingListJournalNumber, a.RouteCardJournalNumber, a.RAFJournalNumber, a.ItemNumber, a.Size, a.Warehouse,a.Location,      
-- hide qty if not complete posting without journal id come back from d365  
case when ISNULL(a.PickListJournalNumber,'')='' and ISNULL(a.RAFJournalNumber,'')='' then 0.0 else CONVERT(DECIMAL (10, 4),a.TransitionQuantity) end as TransitionQuantity, CONVERT(DECIMAL (10, 4),a.ReservedQuantity) as ReservedQuantity, a.PalletId,a.CreationTime        
from #tmpUnion a      
WHERE a.PlantNo in (SELECT * FROM @TempPN) and a.Warehouse LIKE (case when LEN(@Warehouse) > 0 then @Warehouse  else '%' end)      
      
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL        
DROP TABLE #SerialNumbers       
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL        
DROP TABLE #D365BatchNumbers       
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL        
DROP TABLE #CustReferenceNumbers      
IF OBJECT_ID('tempdb..#TmpUnion') IS NOT NULL        
DROP TABLE #TmpUnion      
      
END
GO
PRINT N'Altering Procedure [dbo].[USP_DOT_FinalPackSurgicalSummaryBatchCardReport]...';


GO
-- ==================================================================================================================================================              
-- Name: USP_DOT_FinalPackSurgicalSummaryBatchCardReport            
-- Purpose: Summary Batch Card Report for Surgical Batch (SPPBC)          
-- ==================================================================================================================================================              
-- Change History              
-- Date   Author   Comments              
-- -----  ------   ------------------------------------------------------------            
-- 2021/10/26   Azrul    SP created.              
-- ==================================================================================================================================================             
-- exec USP_DOT_FinalPackSurgicalSummaryBatchCardReport '2211289924,2211289946,2211289925,2211289923,2211289928,2211289945', '', '', '2021-02-04','2021-02-04 23:59:59','','',''          
-- exec USP_DOT_FinalPackSurgicalSummaryBatchCardReport '2211289924,2211289946,2211289925,2211289923,2211289928,2211289945', '', '', '','','','',''          
-- exec USP_DOT_FinalPackSurgicalSummaryBatchCardReport '2211289923', '', '', '','','','',''          
-- exec USP_DOT_FinalPackSurgicalSummaryBatchCardReport '', '', 'ANSL 301/20', '','','','',''          
-- exec USP_DOT_FinalPackSurgicalSummaryBatchCardReport '', '', '', '2021-07-01','2021-07-31 23:59:59','','',''          
-- exec USP_DOT_FinalPackSurgicalSummaryBatchCardReport @SerialNumber=N'',@D365BatchNumber=N'MUNA 152/21_6½_02',@CustReferenceNumber=N'',@PlantNo=N'',@Warehouse=N'',@FunctionIdentifier=N'',@PostingDateTimeFrom=N'',@PostingDateTimeTo=N''        
-- ==================================================================================================================================================          
CREATE OR ALTER   PROCEDURE USP_DOT_FinalPackSurgicalSummaryBatchCardReport            
(  
@SerialNumber NVARCHAR(4000),         
@D365BatchNumber NVARCHAR(4000),        
@CustReferenceNumber NVARCHAR(4000),          
@PostingDateTimeFrom NVARCHAR(100),          
@PostingDateTimeTo NVARCHAR(100),          
@PlantNo NVARCHAR(4000),          
@Warehouse NVARCHAR(4000),          
@FunctionIdentifier NVARCHAR(4000)         
)          
          
AS          
BEGIN            
 -- SET NOCOUNT ON added to prevent extra result sets from              
 -- interfering with SELECT statements.              
 SET NOCOUNT ON;          
        
IF OBJECT_ID('tempdb..#FunctionIdentifiers') IS NOT NULL          
DROP TABLE #FunctionIdentifiers         
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL            
DROP TABLE #SerialNumbers           
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL            
DROP TABLE #D365BatchNumbers           
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL            
DROP TABLE #CustReferenceNumbers          
IF OBJECT_ID('tempdb..#tmpUnion') IS NOT NULL            
DROP TABLE #tmpUnion           
        
CREATE TABLE #FunctionIdentifiers (Identifier NVARCHAR(20) COLLATE DATABASE_DEFAULT)        
CREATE TABLE #SerialNumbers (SerialNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)          
CREATE TABLE #D365BatchNumbers (D365BatchNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)          
CREATE TABLE #CustReferenceNumbers (CustReferenceNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)          
CREATE TABLE #tmpUnion (PostingDateTime DATETIME2,           
      SerialNumber NVARCHAR(50),           
      D365BatchNumber NVARCHAR(50),           
      BatchOrderNumber NVARCHAR(50),           
      MovementJournalNumber NVARCHAR(50),           
      TransferJournalNumber NVARCHAR(50),          
      PickListJournalNumber NVARCHAR(50),           
      RouteCardJournalNumber NVARCHAR(50),           
      RAFJournalNumber NVARCHAR(50),            
      ItemNumber NVARCHAR(100),           
      Size NVARCHAR(10),           
      Warehouse NVARCHAR(10),           
      Location NVARCHAR(10),           
      RefRecId BIGINT,          
      TransitionQuantity DECIMAL (18, 4) DEFAULT 0.0000,           
      ReservedQuantity DECIMAL (18, 4),           
      BaseQuantity DECIMAL DEFAULT 0,           
      Sequence INT,           
      FunctionIdentifier NVARCHAR(50),          
      PickingListQuantity DECIMAL,          
      BatchSequence INT,          
      PlantNo NVARCHAR(10),          
      PalletId NVARCHAR(50),  
   CreationTime DATETIME2)              
          
IF (LEN(@SerialNumber) > 0)         
BEGIN          
 INSERT INTO #SerialNumbers           
 select Distinct * from dbo.SplitString(NULLIF(@SerialNumber, ','), ',')          
END          
ELSE IF (LEN(@D365BatchNumber) > 0)           
BEGIN          
 INSERT INTO #D365BatchNumbers           
 select Distinct * from dbo.SplitString(NULLIF(@D365BatchNumber, ''), ',')          
          
 INSERT INTO #SerialNumbers          
 select Distinct         
 case when isnull(a.BatchNumber,'')='' then isnull(b.BatchNumber,'')        
    else isnull(a.BatchNumber,'') end         
    --*        
 from DOT_FloorAxIntParentTable a with(nolock)         
 left join DOT_FGJournalTable b with(nolock) on a.Id=b.ParentRefRecId and b.IsDeleted=0        
 where         
  D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '') or         
  a.BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '')        
        
 and a.IsDeleted = 0  --and IsMigratedFromAX6 = 0             
END          
Else IF (LEN(@CustReferenceNumber) > 0)           
BEGIN          
 INSERT INTO #CustReferenceNumbers           
 select Distinct * from dbo.SplitString(NULLIF(@CustReferenceNumber, ','), ',')          
          
 INSERT INTO #SerialNumbers          
 select Distinct BatchNumber from dbo.UFN_DOT_GetSNFromCustRefForSummaryBatchCardReport(@CustReferenceNumber)          
END          
          
DECLARE @TempPN TABLE (PlantNo VARCHAR(10))          
          
IF (LEN(@PlantNo) > 0)           
BEGIN          
 INSERT INTO @TempPN VALUES (@PlantNo)          
END          
          
ELSE          
BEGIN          
 INSERT INTO @TempPN select LocationName from LocationMaster          
END          
        
IF(LEN(@FunctionIdentifier) > 0)        
BEGIN        
 INSERT INTO #FunctionIdentifiers        
 select Distinct * from dbo.SplitString(NULLIF(@FunctionIdentifier, ','), ',')        
END        
ELSE        
BEGIN        
 INSERT INTO #FunctionIdentifiers         
 SELECT ('SPPBC')        
END        
        
DECLARE @StartPostingDateTime DateTime = '2019-03-01'          
DECLARE @EndPostingDateTime DateTime = DATEADD(DAY,1,GetDate())          
DECLARE @SerialNoCount int          
SELECT @SerialNoCount = Count(1) from #SerialNumbers          
          
IF (@SerialNoCount > 0)          
BEGIN        
 --Select * from #SerialNumbers  
 --details: final pack sppbc          
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,            
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 ItemNumber, Size, Warehouse, Location, RefRecId, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,          
 PickingListQuantity, BatchSequence, PlantNo, PalletId,CreationTime)          
          
 select   
 b.PostingDateTime, '' as SerialNumber, a.D365BatchNumber, b.BatchOrderNumber, '' as MovementJournalNumber, '' as TransferJournalNumber,             
 ISNULL(NULLIF(b.PickingListJournal,''), (select PickListJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and           
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0 and DetailStagingJSON like CONCAT( '%', a.Id, '%'))) as PickListJournalNumber, --for consolidation batch          
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and           
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0 and DetailStagingJSON like CONCAT( '%', a.Id, '%'))) as RouteCardJournalNumber, --for consolidation batch          
 ISNULL(NULLIF(b.ReportasFinishedJournal,''), (select RAFJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and           
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0 and DetailStagingJSON like CONCAT( '%', a.Id, '%'))) as RAFJournalNumber, --for consolidation batch          
 b.ItemNumber, b.Configuration as Size, 'FG' as Warehouse, '' as Location,           
 a.Id as RefRecId, a.FGQuantity as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier,           
 b.PickingListQuantity+isnull(b.GloveSampleQuantity,0), b.BatchSequence, a.PlantNo, a.PalletId,a.CreationTime          
          
 from DOT_FloorAxIntParentTable a with(nolock)           
 join (select ParentRefRecId, ItemNumber,BatchOrderNumber,Configuration,PickingListJournal,RouteCardJournalId,ReportasFinishedJournal,  
    min(PostingDateTime) as PostingDateTime, sum(PickingListQuantity) as PickingListQuantity, sum(GloveSampleQuantity) as GloveSampleQuantity, max(BatchSequence) as BatchSequence  
  from DOT_FGJournalTable fg with(nolock)  
  where BatchNumber IN (Select SerialNumber from #SerialNumbers where SerialNumber <> '')   
   and PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end          
   and PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end  
   group by ParentRefRecId, ItemNumber,BatchOrderNumber,Configuration,PickingListJournal,RouteCardJournalId,ReportasFinishedJournal  
  ) b  on a.id = b.ParentRefRecId          
 join #FunctionIdentifiers f on f.Identifier=a.FunctionIdentifier        
 where FunctionIdentifier = 'SPPBC'        
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0                 
 and a.PlantNo in (SELECT * FROM @TempPN)   
 --------------------------------------------------------------------  
 --details: final pack-glove batch number    
 --------------------------------------------------------------------  
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,          
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,        
 ItemNumber, Size, Warehouse, Location, RefRecId, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,        
 PickingListQuantity, BatchSequence, PlantNo, PalletId,CreationTime)        
        
 select b.PostingDateTime, b.BatchNumber as SerialNumber, a.D365BatchNumber, b.BatchOrderNumber, b.MovementJournalId as MovementJournalNumber,         
 '' as TransferJournalNumber,           
 ISNULL(NULLIF(b.PickingListJournal,''), (select PickListJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and           
 FunctionIdentifier = a.FunctionIdentifier and DetailStagingJSON like CONCAT( '%', a.Id, '%') and IsDeleted = 0)) as PickListJournalNumber, --for consolidation batch          
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and           
 FunctionIdentifier = a.FunctionIdentifier and DetailStagingJSON like CONCAT( '%', a.Id, '%') and IsDeleted = 0)) as RouteCardJournalNumber, --for consolidation batch          
 ISNULL(NULLIF(b.ReportasFinishedJournal,''), (select RAFJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and           
 FunctionIdentifier = a.FunctionIdentifier and DetailStagingJSON like CONCAT( '%', a.Id, '%') and IsDeleted = 0)) as RAFJournalNumber, --for consolidation batch           
 b.ItemNumber, b.Configuration as Size,  
 PlantNo+'-PROD' as Warehouse, 'QC' as Location,  
 a.Id as RefRecId, CAST(b.PickingListQuantity+isnull(b.GloveSampleQuantity,0) as DECIMAL (10, 4)) * -1 as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier,         
 0, b.BatchSequence, a.PlantNo, a.PalletId,a.CreationTime        
        
 from DOT_FloorAxIntParentTable a with(nolock)         
 join DOT_FGJournalTable b with(nolock) on a.id = b.ParentRefRecId        
 join #FunctionIdentifiers f on f.Identifier=a.FunctionIdentifier      
 where b.BatchNumber IN (Select SerialNumber from #SerialNumbers where SerialNumber <> '')        
 and FunctionIdentifier = 'SPPBC'      
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0         
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end        
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end        
 and a.PlantNo in (SELECT * FROM @TempPN)  
 ---------------------------------------------------  
END          
ELSE          
BEGIN          
 --details: final pack sppbc          
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,            
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 ItemNumber, Size, Warehouse, Location, RefRecId, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,          
 PickingListQuantity, BatchSequence, PlantNo, PalletId,CreationTime)          
          
 select b.PostingDateTime, b.BatchNumber as SerialNumber, a.D365BatchNumber, b.BatchOrderNumber, b.MovementJournalId as MovementJournalNumber,           
 '' as TransferJournalNumber,            
 ISNULL(NULLIF(b.PickingListJournal,''), (select PickListJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and         
 FunctionIdentifier = a.FunctionIdentifier and DetailStagingJSON like CONCAT( '%', a.Id, '%') and IsDeleted = 0)) as PickListJournalNumber, --for consolidation batch        
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and         
 FunctionIdentifier = a.FunctionIdentifier and DetailStagingJSON like CONCAT( '%', a.Id, '%') and IsDeleted = 0)) as RouteCardJournalNumber, --for consolidation batch        
 ISNULL(NULLIF(b.ReportasFinishedJournal,''), (select RAFJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and         
 FunctionIdentifier = a.FunctionIdentifier and DetailStagingJSON like CONCAT( '%', a.Id, '%') and IsDeleted = 0)) as RAFJournalNumber, --for consolidation batch         
 b.ItemNumber, b.Configuration as Size, 'FG' as Warehouse, '' as Location,           
 a.Id as RefRecId, a.FGQuantity as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier,           
 b.PickingListQuantity+isnull(b.GloveSampleQuantity,0), b.BatchSequence, a.PlantNo, a.PalletId,a.CreationTime          
          
 from DOT_FloorAxIntParentTable a with(nolock)           
 join DOT_FGJournalTable b with(nolock) on a.id = b.ParentRefRecId          
 join #FunctionIdentifiers f on f.Identifier=a.FunctionIdentifier        
 where a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0           
 and FunctionIdentifier = 'SPPBC'        
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end          
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end          
 and a.PlantNo in (SELECT * FROM @TempPN)          
   
           
--details: final pack-glove batch number           
INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,           
TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime)          
          
select PostingDateTime, a.SerialNumber,           
--dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard(SerialNumber) as D365BatchNumber,       
b.D365BatchNumber,      
--dbo.UFN_DOT_GetBOForSummaryBatchCard(SerialNumber) as BatchOrderNumber,         
a.BatchOrderNumber,   -- refer to FG BO    
MovementJournalNumber, TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
--dbo.UFN_DOT_GetItemNumberForSummaryBatchCard(SerialNumber) as ItemNumber      
b.ItemNumber      
, Size,          
PlantNo+'-PROD' as Warehouse,          
'QC' as Location,           
CAST(PickingListQuantity as DECIMAL (10, 4)) * -1 as TransitionQuantity, ReservedQuantity, BatchSequence as Sequence, FunctionIdentifier, PlantNo, PalletId,a.CreationTime          
from #tmpUnion a      
left join dbo.UFN_DOT_GetBO_D365BatchNo_ItemNumber_ForSummaryBatchCard() b on a.SerialNumber=b.SerialNumber  
  
END          
      
          
Select a.PlantNo, a.FunctionIdentifier, a.PostingDateTime, a.SerialNumber, 
case when a.Warehouse='FG' then a.D365BatchNumber else dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard(SerialNumber) end as D365BatchNumber,
--a.D365BatchNumber,
 a.BatchOrderNumber, a.MovementJournalNumber,           
a.TransferJournalNumber, a.PickListJournalNumber as PickingListJournalNumber, a.RouteCardJournalNumber, a.RAFJournalNumber, a.ItemNumber, a.Size, a.Warehouse,a.Location,          
-- hide qty if not complete posting without journal id come back from d365      
case when ISNULL(a.PickListJournalNumber,'')='' and ISNULL(a.RAFJournalNumber,'')='' then 0.0 else CONVERT(DECIMAL (10, 4),a.TransitionQuantity) end as TransitionQuantity, CONVERT(DECIMAL (10, 4),a.ReservedQuantity) as ReservedQuantity, a.PalletId,a.CreationTime          
    
--select *          
from #tmpUnion a           
where a.Warehouse LIKE (case when LEN(@Warehouse) > 0 then @Warehouse  else '%' end)  
          
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL            
DROP TABLE #SerialNumbers           
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL            
DROP TABLE #D365BatchNumbers           
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL            
DROP TABLE #CustReferenceNumbers          
IF OBJECT_ID('tempdb..#tmpUnion') IS NOT NULL            
DROP TABLE #tmpUnion           
          
END
GO
PRINT N'Altering Procedure [dbo].[USP_DOT_ConsolidationCutOffMarking]...';


GO
-- ==================================================================================================================================================    
-- Name:   USP_DOT_ConsolidationCutOffMarking  
-- Purpose:  Mark Staging Record for Consolidation   
-- ==================================================================================================================================================    
-- Change History    
-- Date   Author   Comments    
-- -----  ------   ------------------------------------------------------------  
-- 2021/07/21   Azrul    SP created.    
-- 2021/07/28   Max		Split update order handling for those require consolidation staging records(HBC/SBC...)  
-- 2021/08/01   Max		Update detail staging records to OutOfPeriod(6) status if Posting Datetime out side the posting period  
-- 2021/08/05   Max		Update final pack detail staging consolidation sequence  
-- 2021/08/11   Max     Fix HBC batch not mark due to not inside FP trace back batches,should only activate trace back for BO/Cust Ref   
-- 2021/10/14   Amir	Add IsConsolidated filter
-- ==================================================================================================================================================    
-- EXEC USP_DOT_ConsolidationCutOffMarking '2021-05-01 00:00:00.000','2021-08-02 23:59:59.999','','2021-05-01 00:00:00.000','2021-05-31 23:59:59.999','','','HBC','2021-08-06 15:39:50.073',1   
-- EXEC USP_DOT_ConsolidationCutOffMarking '2021-07-30 00:00:00.000','2021-08-05 23:59:59.999','','2021-07-01 00:00:00.000','2021-08-31 23:59:59.999','','','SBC','2021-08-06 15:39:50.073',1 
-- EXEC USP_DOT_ConsolidationCutOffMarking '2021-08-05 16:00:00.000','2021-08-06 15:59:59.999','','2021-08-01 00:00:00.000','2021-08-31 23:59:59.999','','','','2021-08-06 15:39:50.073',1 
-- EXEC USP_DOT_ConsolidationCutOffMarking '2019-04-01 00:00:00.000','2021-08-08 16:08:27.778','','2021-07-01 00:00:00.000','2021-08-31 23:59:59.999','HNBON000362512','','','2021-08-08 12:34:27.778',1
-- EXEC USP_DOT_ConsolidationCutOffMarking '2019-04-01 00:00:00.000','2021-08-08 22:14:42.007','','2019-04-01 00:00:00.000','2021-08-08 22:14:42.007','33342','','','2021-08-08 22:14:41.007',1
-- EXEC USP_DOT_ConsolidationCutOffMarking '2021-08-01 00:00:00.000','2021-08-01 23:59:59.999','','2021-08-01 00:00:00.000','2021-08-01 11:59:59.999','','','','2021-08-10 13:01:00.000',1
-- EXEC USP_DOT_ConsolidationCutOffMarking '2021-12-28 16:00:00.000','2021-12-29 15:59:59.999','','2021-12-01 00:00:00.000','2021-12-31 23:59:59.999','','','','2021-12-29 17:00:37.824',1
CREATE OR ALTER PROCEDURE [dbo].[USP_DOT_ConsolidationCutOffMarking]  
--declare    
  @CutOffTimeFrom varchar(100),--='2021-08-01 00:00:00.000',  
  @CutOffTimeTo varchar(100),--='2021-08-01 23:59:59.999',  
  @PlantNo NVARCHAR(500)='',  
  @PostingDateFrom varchar(100),--='2021-08-01 00:00:00.000',  
  @PostingDateTo varchar(100),--='2021-08-01 11:59:59.999',  
  @BatchOrderNumber NVARCHAR(100) = '',   
  @CustomerRef NVARCHAR(100) = '',  
  @FunctionId NVARCHAR(100) = '',  
  @MarkingTime varchar(100),--='2021-08-10 12:59:58.065',
  @ReadOnly bit=0
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from    
 -- interfering with SELECT statements.    
 SET NOCOUNT ON;    

 --DECLARE @markingTime DATETIME = GETDATE();
 DECLARE @CurrentRecordId BIGINT,@PostingDateTime DATETIME,@TotalRecords int,@ConsolidationSequence  NVARCHAR(100),
 @TotalFPRecords int, -- flag to activate FP batch trace back
 @TotalRelatedBatches int
 set @TotalRecords=0;
 set @TotalFPRecords=0;
 set @TotalRelatedBatches=0;
 --set @CutOffTimeFrom = convert(datetime,convert(varchar(23),@CutOffTimeFrom),121)
 --set @CutOffTimeTo = convert(datetime,convert(varchar(23),@CutOffTimeTo),121)
 --set @PostingDateFrom = convert(datetime,convert(varchar(23),@PostingDateFrom),121)
 --set @PostingDateTo = convert(datetime,convert(varchar(23),@PostingDateTo),121)
 --BEGIN TRY  
  IF OBJECT_ID('tempdb..#tmpParentTable') IS NOT NULL  
   DROP TABLE #tmpParentTable  
  IF OBJECT_ID('tempdb..#tmpRafStg') IS NOT NULL  
   DROP TABLE #tmpRafStg  
  IF OBJECT_ID('tempdb..#tmpOfflineRafStg') IS NOT NULL  
   DROP TABLE #tmpOfflineRafStg  
  IF OBJECT_ID('tempdb..#tmpFinalPack') IS NOT NULL  
   DROP TABLE #tmpFinalPack  
  IF OBJECT_ID('tempdb..#fpRelatedBatches') IS NOT NULL  
   DROP TABLE #fpRelatedBatches  
  IF OBJECT_ID('tempdb..#tmpRework') IS NOT NULL  
   DROP TABLE #tmpRework  
  IF OBJECT_ID('tempdb..#tmpTransfer') IS NOT NULL  
   DROP TABLE #tmpTransfer  
  IF OBJECT_ID('tempdb..#tmpPickList') IS NOT NULL  
   DROP TABLE #tmpPickList  
  IF OBJECT_ID('tempdb..#tmpMovement') IS NOT NULL  
   DROP TABLE #tmpMovement  
  IF OBJECT_ID('tempdb..#tmpTotalParentRecordIds') IS NOT NULL  
   DROP TABLE #tmpTotalParentRecordIds  
  
  -- total parent table going to update list, for read & review on manual consolidation UI 
  select cast(0 as BIGINT) as ParentRefRecId into #tmpTotalParentRecordIds;
  select cast('' as nvarchar(100)) as BatchNumber into #fpRelatedBatches;

  --find final pack staging first,if found records other functions should based on related batchNumber to trace back
  select b.* INTO #tmpFinalPack from dbo.UFN_DOT_GetFinalPackNotConsolidatedStaging(@CutOffTimeFrom,@CutOffTimeTo,@PlantNo,@BatchOrderNumber,@CustomerRef,@FunctionId) b;
  --select b.ParentRefRecId,b.BatchOrderNumber,b.PostingDateTime INTO #tmpFinalPack
  --from DOT_FGJournalTable b with(nolock)   
  --where b.IsDeleted = 0   
  --and b.PostingDateTime > = @CutOffTimeFrom   
  --and b.PostingDateTime < = @CutOffTimeTo  
  --and b.BatchOrderNumber = case when (@BatchOrderNumber IS NULL) OR (LEN(@BatchOrderNumber) = 0) then b.BatchOrderNumber else @BatchOrderNumber end  
  --and b.CustomerReference = case when (@CustomerRef IS NULL) OR (LEN(@CustomerRef) = 0) then b.CustomerReference else @CustomerRef end  
  
  IF (LEN(ISNULL(@BatchOrderNumber,'')) > 0 OR LEN(ISNULL(@CustomerRef,'')) > 0) -- should only activate FP trace back for BO/Cust Ref
  BEGIN
	  select @TotalFPRecords=count(1) from #tmpFinalPack -- activate trace back if more than 0
	  -- debug 
		--select @TotalFPRecords

	  -- SBC/SPPBC
	  insert #fpRelatedBatches(BatchNumber)
	  select fp.BatchNumber
	  from #tmpFinalPack fp
	  where LEN(ISNULL(fp.BatchNumber,'')) > 0
	  -- SMBP
	  -- ReferenceBatchNumber1
	  insert #fpRelatedBatches(BatchNumber)  
	  select fp.BatchNumber 
	  from #tmpFinalPack fp
	  where LEN(ISNULL(fp.ReferenceBatchNumber1,'')) > 0
	  -- ReferenceBatchNumber2
	  insert #fpRelatedBatches(BatchNumber)  
	  select fp.BatchNumber 
	  from #tmpFinalPack fp
	  where LEN(ISNULL(fp.ReferenceBatchNumber2,'')) > 0
	  -- ReferenceBatchNumber3
	  insert #fpRelatedBatches(BatchNumber)  
	  select fp.BatchNumber 
	  from #tmpFinalPack fp
	  where LEN(ISNULL(fp.ReferenceBatchNumber3,'')) > 0
	  -- ReferenceBatchNumber4
	  insert #fpRelatedBatches(BatchNumber)  
	  select fp.BatchNumber 
	  from #tmpFinalPack fp
	  where LEN(ISNULL(fp.ReferenceBatchNumber4,'')) > 0
	  -- ReferenceBatchNumber5
	  insert #fpRelatedBatches(BatchNumber)  
	  select fp.BatchNumber 
	  from #tmpFinalPack fp
	  where LEN(ISNULL(fp.ReferenceBatchNumber5,'')) > 0

  END

  select @TotalRelatedBatches=count(1) from #fpRelatedBatches
  -- debug  
  --select * from #tmpFinalPack  
  
  --insert final pack & online('HBC','SRBC','ON2G') staging to cursor 1 temp table  
  select a.ParentRefRecId,a.BatchOrderNumber,a.PostingDateTime  
  -- Get Final Pack Detail Staging Consolidation Sequence   
	,dbo.UDF_DOT_Get_FP_Staging_Consolidation_Seq(
		a.FunctionIdentifier,a.BatchNumber,a.Sequence
		,a.ReferenceBatchNumber1,a.ReferenceBatchSequence1
		,a.ReferenceBatchNumber2,a.ReferenceBatchSequence2
		,a.ReferenceBatchNumber3,a.ReferenceBatchSequence3
		,a.ReferenceBatchNumber4,a.ReferenceBatchSequence4
		,a.ReferenceBatchNumber5,a.ReferenceBatchSequence5) as ConsolidationSequence
  INTO #tmpRafStg  
  from #tmpFinalPack a
--  insert #tmpRafStg(ParentRefRecId,BatchOrderNumber,PostingDateTime,ConsolidationSequence)  
--  select b.ParentRefRecId,b.BatchOrderNumber,b.PostingDateTime  
  
--  -- Get Final Pack Detail Staging Consolidation Sequence   
--  ,dbo.UDF_DOT_Get_FP_Staging_Consolidation_Seq(a.FunctionIdentifier,a.BatchNumber,a.Sequence     ,a.ReferenceBatchNumber1,a.ReferenceBatchSequence1,a.ReferenceBatchNumber2,a.ReferenceBatchSequence2,a.ReferenceBatchNumber3     ,a.ReferenceBatchSequence3,a
--.ReferenceBatchNumber4,a.ReferenceBatchSequence4,a.ReferenceBatchNumber5,a.ReferenceBatchSequence5)  
  
--  from DOT_FloorAxIntParentTable a with(nolock)  
--   join #tmpFinalPack b on a.id=b.ParentRefRecId  
--  where a.IsConsolidated = 1
--  and a.PlantNo in (case when (@PlantNo IS NULL) OR (LEN(@PlantNo) = 0) then a.PlantNo else @PlantNo end)  
--  and a.FunctionIdentifier = case when (@FunctionId IS NULL) OR (LEN(@FunctionId) = 0) then a.FunctionIdentifier else @FunctionId end  
--  and a.ProcessingStatus <>3 -- not complete   
--  and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0   
--  and a.AutoConsoleMarking = 0  
  
  --Online batch  
    insert #tmpRafStg(ParentRefRecId,BatchOrderNumber,PostingDateTime,ConsolidationSequence)  
  select b.ParentRefRecId,b.BatchOrderNumber,b.PostingDateTime,a.ConsolidationSequence 
  from DOT_FloorAxIntParentTable a with(nolock)  
   join DOT_RafStgTable b with(nolock) on a.id=b.ParentRefRecId 
	-- if final pack staging found records should based on related batchNumber to trace back
	join #fpRelatedBatches c on a.BatchNumber = case when @TotalFPRecords>0 then c.BatchNumber else  a.BatchNumber end 
  where a.FunctionIdentifier in ('HBC','SRBC','ON2G')  
  and a.PlantNo in (case when LEN(ISNULL(@PlantNo,'')) = 0 then a.PlantNo else @PlantNo end)  
  and a.FunctionIdentifier = case when LEN(ISNULL(@FunctionId,'')) = 0 then a.FunctionIdentifier else @FunctionId end  
  and a.ProcessingStatus <>3 -- not complete   
  and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0   
  and a.AutoConsoleMarking = 0  
  and b.IsDeleted = 0   
  and b.PostingDateTime > = @CutOffTimeFrom   
  and b.PostingDateTime < = @CutOffTimeTo  
  and a.IsConsolidated = 1
  and b.BatchOrderNumber = case when LEN(ISNULL(@BatchOrderNumber,'')) = 0
										OR @TotalFPRecords>0 --  disable Glove BO filter if FG BO found records should based on related batchNumber to trace back
										then b.BatchOrderNumber else @BatchOrderNumber end  

  -- debug  
  --select @TotalFPRecords as TotalFPRecords,@TotalRelatedBatches as TotalRelatedBatches;  
  --select * from #fpRelatedBatches 
  --select *  from #tmpRafStg where ParentRefRecId=10470280
  -------------------------------------------------------------------------------------------  
  -- Cursor1 update HBC/SRBC and SBC/SMBP/SPPBC related batches order by Batch Order No  
  -------------------------------------------------------------------------------------------  
  DECLARE update_cursor1 CURSOR FAST_FORWARD FOR  
    SELECT ParentRefRecId, PostingDateTime,ConsolidationSequence  
    FROM   #tmpRafStg  
    order by BatchOrderNumber;  
  
  --print 'open cursor start'  
  -- open cursor and fetch first row into variables  
  OPEN update_cursor1  
  FETCH NEXT FROM update_cursor1 INTO @CurrentRecordId,@PostingDateTime,@ConsolidationSequence;  
  
  --print 'open cursor succeed'  
  -- check for a new row  
  WHILE @@FETCH_STATUS = 0  
  BEGIN  
   -- do update operation  
   --print @CurrentRecordId;  
   --print @PostingDateTime;  
   --print @ConsolidationSequence;  
   IF @ReadOnly=0 -- Do update staging records  
   BEGIN
	   IF @PostingDateTime >= @PostingDateFrom AND @PostingDateTime < = @PostingDateTo  
		BEGIN  
		 
		 UPDATE DOT_FloorAxIntParentTable  
		 SET AutoConsoleMarking = 1, ConsoleMarkingTime = @markingTime, LastModificationTime = GETDATE(), ConsolidationSequence = @ConsolidationSequence  
		 where id = @CurrentRecordId;  
		END  
	   ELSE  
		BEGIN  
		 --Update TO OUT OF PERIOD  
		 UPDATE DOT_FloorAxIntParentTable  
		 SET ProcessingStatus=6, LastModificationTime = GETDATE()  
		 where id = @CurrentRecordId;  
		END  
    END  
   ELSE  -- read staging and return to UI only
    BEGIN  
	   insert #tmpTotalParentRecordIds(ParentRefRecId)
	   select @CurrentRecordId
	END
   set @TotalRecords=@TotalRecords+1;  
   --select @CurrentRecordId  
  
   -- get next available row into variables  
   FETCH NEXT FROM update_cursor1 INTO @CurrentRecordId,@PostingDateTime,@ConsolidationSequence;  
  END  
  
  Close update_cursor1;  
  Deallocate update_cursor1;  
  
  
  --Offline batch and SOBC  
  select a.BatchNumber,b.ParentRefRecId,b.PostingDateTime INTO #tmpOfflineRafStg  
  from DOT_FloorAxIntParentTable a with(nolock)  
   join DOT_RafStgTable b with(nolock) on a.id=b.ParentRefRecId  
	-- if final pack staging found records should based on related batchNumber to trace back
   join #fpRelatedBatches c on a.BatchNumber = case when @TotalFPRecords>0 then c.BatchNumber else  a.BatchNumber end 
  where a.IsConsolidated = 1
  and a.FunctionIdentifier not in ('HBC','SRBC','ON2G')  
  and a.ProcessingStatus <>3 -- not complete   
  and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0   
  and a.AutoConsoleMarking = 0  
  and b.IsDeleted = 0   
  and b.PostingDateTime > = @CutOffTimeFrom   
  and b.PostingDateTime < = @CutOffTimeTo  
  and a.PlantNo in (case when LEN(ISNULL(@PlantNo,'')) = 0 then a.PlantNo else @PlantNo end)  
  and a.FunctionIdentifier = case when LEN(ISNULL(@FunctionId,'')) = 0 then a.FunctionIdentifier else @FunctionId end  
  and b.Id = case when (LEN(ISNULL(@BatchOrderNumber,'')) > 0 OR LEN(ISNULL(@CustomerRef,'')) > 0)
										AND @TotalFPRecords=0 --  hide other function staging if BO/Cust Ref not null but no final pack records found
										then 0 else b.Id end    
  --Rework  
  select a.BatchNumber,b.ParentRefRecId,b.PostingDateandTime as PostingDateTime INTO #tmpRework  
  from DOT_FloorAxIntParentTable a with(nolock)  
  join DOT_RwkBatchOrderCreationChildTable b with(nolock) on a.Id = b.ParentRefRecId        
  where a.IsConsolidated = 1
  and a.PlantNo in (case when LEN(ISNULL(@PlantNo,'')) = 0 then a.PlantNo else @PlantNo end)  
  and a.FunctionIdentifier = case when LEN(ISNULL(@FunctionId,'')) = 0 then a.FunctionIdentifier else @FunctionId end
  and a.ProcessingStatus <>3 -- not complete   
  and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0   
  and a.AutoConsoleMarking = 0  
  and b.IsDeleted = 0   
  and b.PostingDateandTime > = @CutOffTimeFrom   
  and b.PostingDateandTime < = @CutOffTimeTo  
  and b.Id = case when (LEN(ISNULL(@BatchOrderNumber,'')) > 0 OR LEN(ISNULL(@CustomerRef,'')) > 0)
										AND @TotalFPRecords=0 --  hide other function staging if BO/Cust Ref not null but no final pack records found
										then 0 else b.Id end
  select @CutOffTimeFrom,@CutOffTimeTo, @PlantNo,case when LEN(ISNULL(@PlantNo,'')) = 0 then '' else @PlantNo end,
  @FunctionId,case when LEN(ISNULL(@FunctionId,'')) = 0 then '' else @FunctionId end,
  case when (LEN(ISNULL(@BatchOrderNumber,'')) > 0 OR LEN(ISNULL(@CustomerRef,'')) > 0)
										AND @TotalFPRecords=0 --  hide other function staging if BO/Cust Ref not null but no final pack records found
										then 0 else '1' end

  --Transfer  
  select a.BatchNumber,b.ParentRefRecId,b.ScanInDateTime as PostingDateTime INTO #tmpTransfer  
  from DOT_FloorAxIntParentTable a with(nolock)  
  join DOT_TransferJournal b with(nolock) on a.Id = b.ParentRefRecId       
  where a.IsConsolidated = 1
  and a.PlantNo in (case when LEN(ISNULL(@PlantNo,'')) = 0 then a.PlantNo else @PlantNo end)  
  and a.FunctionIdentifier = case when LEN(ISNULL(@FunctionId,'')) = 0 then a.FunctionIdentifier else @FunctionId end
  and a.ProcessingStatus <>3 -- not complete   
  and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0   
  and a.AutoConsoleMarking = 0  
  and b.IsDeleted = 0   
  and b.ScanInDateTime > = @CutOffTimeFrom   
  and b.ScanInDateTime < = @CutOffTimeTo
  and b.Id = case when (LEN(ISNULL(@BatchOrderNumber,'')) > 0 OR LEN(ISNULL(@CustomerRef,'')) > 0)
										AND @TotalFPRecords=0 --  hide other function staging if BO/Cust Ref not null but no final pack records found
										then 0 else b.Id end  
    
  --PickingList  
  select a.BatchNumber,b.ParentRefRecId,b.PostingDateTime INTO #tmpPickList  
  from DOT_FloorAxIntParentTable a with(nolock)  
  join DOT_PickingList b with(nolock) on a.Id = b.ParentRefRecId    
  where  a.IsConsolidated = 1
  and a.PlantNo in (case when LEN(ISNULL(@PlantNo,'')) = 0 then a.PlantNo else @PlantNo end)  
  and a.FunctionIdentifier = case when LEN(ISNULL(@FunctionId,'')) = 0 then a.FunctionIdentifier else @FunctionId end
  and a.ProcessingStatus <>3 -- not complete   
  and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0   
  and a.AutoConsoleMarking = 0  
  and b.IsDeleted = 0   
  and b.PostingDateTime > = @CutOffTimeFrom   
  and b.PostingDateTime < = @CutOffTimeTo  
  and b.PSIReworkOrderNo = case when LEN(ISNULL(@BatchOrderNumber,'')) = 0 
										OR @TotalFPRecords>0 --  disable BO filter if final pack staging found records should based on related batchNumber to trace back
										then b.PSIReworkOrderNo else @BatchOrderNumber end  
  and b.Id = case when (LEN(ISNULL(@BatchOrderNumber,'')) > 0 OR LEN(ISNULL(@CustomerRef,'')) > 0)
										AND @TotalFPRecords=0 --  hide other function staging if BO/Cust Ref not null but no final pack records found
										then 0 else b.Id end    
  --Movement  
  select a.BatchNumber,b.ParentRefRecId,b.PostingDateAndTime as PostingDateTime INTO #tmpMovement  
  from DOT_FloorAxIntParentTable a with(nolock)
  join DOT_MovementJournalChild b with(nolock) on a.Id = b.ParentRefRecId    
  where  a.IsConsolidated = 1
  and a.PlantNo in (case when LEN(ISNULL(@PlantNo,'')) = 0 then a.PlantNo else @PlantNo end)  
  and a.FunctionIdentifier = case when LEN(ISNULL(@FunctionId,'')) = 0 then a.FunctionIdentifier else @FunctionId end
  and a.ProcessingStatus <>3 -- not complete   
  and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0   
  and a.AutoConsoleMarking = 0  
  and b.IsDeleted = 0   
  and b.PostingDateAndTime > = @CutOffTimeFrom   
  and b.PostingDateAndTime < = @CutOffTimeTo  
  and b.Id = case when (LEN(ISNULL(@BatchOrderNumber,'')) > 0 OR LEN(ISNULL(@CustomerRef,'')) > 0)
										AND @TotalFPRecords=0 --  hide other function staging if BO/Cust Ref not null but no final pack records found
										then 0 else b.Id end     
  --debug  
  
  SELECT b.ParentRefRecId,b.PostingDateTime  INTO #tmpParentTable  
  from --DOT_FloorAxIntParentTable a  
  --join 
  (  
   SELECT BatchNumber,ParentRefRecId,PostingDateTime from #tmpOfflineRafStg UNION  
   SELECT BatchNumber,ParentRefRecId,PostingDateTime from #tmpRework UNION  
   SELECT BatchNumber,ParentRefRecId,PostingDateTime from #tmpTransfer UNION  
   SELECT BatchNumber,ParentRefRecId,PostingDateTime from #tmpPickList UNION  
   SELECT BatchNumber,ParentRefRecId,PostingDateTime from #tmpMovement) as b --on a.Id = b.ParentRefRecId  
	-- if final pack staging found records should based on related batchNumber to trace back
     join #fpRelatedBatches c on b.BatchNumber = case when @TotalFPRecords>0 then c.BatchNumber else  b.BatchNumber end 
  --WHERE a.PlantNo in (select LocationName from DOT_LocationConsoleMaster with(nolock) WHERE IsConsole = 1)  
  --and a.PlantNo in (case when LEN(ISNULL(@PlantNo,'')) = 0 then a.PlantNo else @PlantNo end)  
  --and a.FunctionIdentifier = case when LEN(ISNULL(@FunctionId,'')) = 0 then a.FunctionIdentifier else @FunctionId end
  --and a.ProcessingStatus <>3 -- not complete   
  --and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0   
  --and a.AutoConsoleMarking = 0  
  
  
  --debug  
  --select count(1) tmpParentTable from #tmpParentTable  
  --SELECT count(1) tmpOfflineRafStg from #tmpOfflineRafStg  
  --SELECT count(1) tmpRework from #tmpRework  
  --SELECT count(1) tmpTransfer from #tmpTransfer  
  --SELECT count(1) tmpPickList from #tmpPickList  
  --SELECT count(1) tmpMovement from #tmpMovement  
  --debug  
  --print 'declare cursor'  
  
  -------------------------------------------------------------------------------------------  
  -- Cursor2 update Other functions related batches order by Parent Record Id  
  -------------------------------------------------------------------------------------------  
  DECLARE update_cursor2 CURSOR FAST_FORWARD FOR  
    SELECT ParentRefRecId,PostingDateTime  
    FROM   #tmpParentTable  
    ORDER BY ParentRefRecId;  
  
  --print 'open cursor start'  
  -- open cursor and fetch first row into variables  
  OPEN update_cursor2  
  FETCH NEXT FROM update_cursor2 INTO @CurrentRecordId,@PostingDateTime;  
  
  --print 'open cursor succeed'  
  -- check for a new row  
  WHILE @@FETCH_STATUS = 0  
  BEGIN  
   IF @ReadOnly=0 -- Do update staging records  
   BEGIN
	   IF @PostingDateTime >= @PostingDateFrom AND @PostingDateTime < = @PostingDateTo  
		BEGIN  
		 --update staging records  
		 UPDATE DOT_FloorAxIntParentTable  
		 SET AutoConsoleMarking = 1, ConsoleMarkingTime = @markingTime, LastModificationTime = GETDATE()  
		 where id = @CurrentRecordId;  
		END  
	   ELSE  
		BEGIN  
		 --Update TO OUT OF PERIOD  
		 UPDATE DOT_FloorAxIntParentTable  
		 SET ProcessingStatus=6, LastModificationTime = GETDATE()  
		 where id = @CurrentRecordId;  
		END  
    END  
   ELSE  -- read staging and return to UI only
    BEGIN  
	   insert #tmpTotalParentRecordIds(ParentRefRecId)
	   select @CurrentRecordId
	END
   set @TotalRecords=@TotalRecords+1;  
   --select @CurrentRecordId  
  
   -- get next available row into variables  
   FETCH NEXT FROM update_cursor2 INTO @CurrentRecordId,@PostingDateTime;  
  END  
  
  Close update_cursor2;  
  Deallocate update_cursor2;  
   IF @ReadOnly=0 -- Do update staging records  
   BEGIN  
	select @TotalRecords as TotalRecords,@TotalFPRecords as TotalFPRecords,@TotalRelatedBatches as TotalRelatedBatches;  
   END
   ELSE  -- read staging and return to UI only
    BEGIN  
	   select * from #tmpTotalParentRecordIds;
	END
  
 --END TRY  
  
 --BEGIN CATCH  
 --   DECLARE @ErrorMessage nvarchar(4000);  
 --   DECLARE @ErrorSeverity int;  
 --   DECLARE @ErrorState int;  
 --   SELECT  
 --  @ErrorMessage = ERROR_MESSAGE(),  
 --  @ErrorSeverity = ERROR_SEVERITY(),  
 --  @ErrorState = ERROR_STATE();  
  
 --END CATCH  
   
  IF OBJECT_ID('tempdb..#tmpOfflineRafStg') IS NOT NULL  
   DROP TABLE #tmpOfflineRafStg  
  IF OBJECT_ID('tempdb..#tmpRafStg') IS NOT NULL  
   DROP TABLE #tmpRafStg  
  IF OBJECT_ID('tempdb..#tmpFinalPack') IS NOT NULL  
   DROP TABLE #tmpFinalPack  
  IF OBJECT_ID('tempdb..#fpRelatedBatches') IS NOT NULL  
   DROP TABLE #fpRelatedBatches  
  IF OBJECT_ID('tempdb..#tmpRework') IS NOT NULL  
   DROP TABLE #tmpRework  
  IF OBJECT_ID('tempdb..#tmpTransfer') IS NOT NULL  
   DROP TABLE #tmpTransfer  
  IF OBJECT_ID('tempdb..#tmpPickList') IS NOT NULL  
   DROP TABLE #tmpPickList  
  IF OBJECT_ID('tempdb..#tmpMovement') IS NOT NULL  
   DROP TABLE #tmpMovement  
  IF OBJECT_ID('tempdb..#tmpParentTable') IS NOT NULL  
   DROP TABLE #tmpParentTable  
  IF OBJECT_ID('tempdb..#tmpTotalParentRecordIds') IS NOT NULL  
   DROP TABLE #tmpTotalParentRecordIds  
END
GO
PRINT N'Altering Procedure [dbo].[USP_DOT_FinalPackMultipleBatchSummaryBatchCardReport]...';


GO
-- ==================================================================================================================================================              
-- Name: USP_DOT_FinalPackMultipleBatchSummaryBatchCardReport            
-- Purpose: Summary Batch Card Report for Multiple Batch (SMBP)          
-- ==================================================================================================================================================              
-- Change History              
-- Date   Author   Comments              
-- -----  ------   ------------------------------------------------------------            
-- 2021/10/26   Azrul    SP created.              
-- ==================================================================================================================================================             
-- exec USP_DOT_FinalPackMultipleBatchSummaryBatchCardReport '2210684650,2210675295,2210681553,2210686200,2210686202', '', '', '2021-08-02','2021-08-02 23:59:59','','',''          
-- exec USP_DOT_FinalPackMultipleBatchSummaryBatchCardReport '2210684650,2210675295,2210681553,2210686200,2210686202', '', '', '','','','',''          
-- exec USP_DOT_FinalPackMultipleBatchSummaryBatchCardReport '2211290110', '', '', '','','','',''          
-- exec USP_DOT_FinalPackMultipleBatchSummaryBatchCardReport '', '', 'ANSL 301/20', '','','','',''          
-- exec USP_DOT_FinalPackMultipleBatchSummaryBatchCardReport '', '', 'MEDU 806/21', '','','','',''          
-- exec USP_DOT_FinalPackMultipleBatchSummaryBatchCardReport '', '', '', '2021-08-02','2021-08-02 23:59:59','','',''          
-- exec USP_DOT_FinalPackMultipleBatchSummaryBatchCardReport '', '', '','2021-08-02','2021-08-02 23:59:59','','',''          
-- exec USP_DOT_FinalPackMultipleBatchSummaryBatchCardReport '2210684650,2210675295,2210681553,2210686200,2210686202', '', '', '','','','',''  
-- exec USP_DOT_FinalPackMultipleBatchSummaryBatchCardReport @SerialNumber=N'',@D365BatchNumber=N'IHCP 98/21_M_03,IHCP 98/21_M_04,IHCP 98/21_M_05',@CustReferenceNumber=N'',@PlantNo=N'',@Warehouse=N'',@FunctionIdentifier=N'',@PostingDateTimeFrom=N'',@PostingDateTimeTo=N''  
-- exec USP_DOT_FinalPackMultipleBatchSummaryBatchCardReport @SerialNumber=N'2211010100',@D365BatchNumber=N'',@CustReferenceNumber=N'',@PlantNo=N'',@Warehouse=N'',@FunctionIdentifier=N'',@PostingDateTimeFrom=N'',@PostingDateTimeTo=N''  
-- exec USP_DOT_FinalPackMultipleBatchSummaryBatchCardReport @SerialNumber=N'2211010101',@D365BatchNumber=N'',@CustReferenceNumber=N'',@PlantNo=N'',@Warehouse=N'',@FunctionIdentifier=N'',@PostingDateTimeFrom=N'',@PostingDateTimeTo=N''  
-- exec USP_DOT_FinalPackMultipleBatchSummaryBatchCardReport @SerialNumber=N'2211010100,2211010101',@D365BatchNumber=N'',@CustReferenceNumber=N'',@PlantNo=N'',@Warehouse=N'',@FunctionIdentifier=N'',@PostingDateTimeFrom=N'',@PostingDateTimeTo=N''  
-- ==================================================================================================================================================          
          
CREATE OR ALTER   PROCEDURE USP_DOT_FinalPackMultipleBatchSummaryBatchCardReport            
(          
@SerialNumber NVARCHAR(4000),    
@D365BatchNumber NVARCHAR(4000),  
@CustReferenceNumber NVARCHAR(4000),          
@PostingDateTimeFrom NVARCHAR(100),          
@PostingDateTimeTo NVARCHAR(100),          
@PlantNo NVARCHAR(4000),          
@Warehouse NVARCHAR(4000),          
@FunctionIdentifier NVARCHAR(4000)          
)          
          
AS          
BEGIN            
 -- SET NOCOUNT ON added to prevent extra result sets from              
 -- interfering with SELECT statements.              
 SET NOCOUNT ON;          
        
IF OBJECT_ID('tempdb..#FunctionIdentifiers') IS NOT NULL          
DROP TABLE #FunctionIdentifiers         
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL            
DROP TABLE #SerialNumbers           
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL            
DROP TABLE #D365BatchNumbers    
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL            
DROP TABLE #CustReferenceNumbers          
IF OBJECT_ID('tempdb..#tmpUnion') IS NOT NULL            
DROP TABLE #tmpUnion           
          
CREATE TABLE #FunctionIdentifiers (Identifier NVARCHAR(20) COLLATE DATABASE_DEFAULT)        
CREATE TABLE #SerialNumbers (SerialNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)          
CREATE TABLE #D365BatchNumbers (D365BatchNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)          
CREATE TABLE #CustReferenceNumbers (CustReferenceNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)          
CREATE TABLE #tmpUnion (PostingDateTime DATETIME2,           
      SerialNumber NVARCHAR(50),           
      D365BatchNumber NVARCHAR(50),           
      BatchOrderNumber NVARCHAR(50),           
      MovementJournalNumber NVARCHAR(50),           
      TransferJournalNumber NVARCHAR(50),           
      PickListJournalNumber NVARCHAR(50),           
      RouteCardJournalNumber NVARCHAR(50),           
      RAFJournalNumber NVARCHAR(50),           
      ItemNumber NVARCHAR(100),           
      Size NVARCHAR(10),           
      Warehouse NVARCHAR(10),           
      Location NVARCHAR(10),           
      TransitionQuantity DECIMAL (18, 4) DEFAULT 0.0000,           
      ReservedQuantity DECIMAL (18, 4),           
      BaseQuantity DECIMAL DEFAULT 0,           
      Sequence INT,           
      RefRecId BIGINT,          
      FunctionIdentifier NVARCHAR(50) COLLATE DATABASE_DEFAULT,          
      PlantNo NVARCHAR(10) COLLATE DATABASE_DEFAULT,          
      ReferenceBatchNumber1 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,           
      ReferenceBatchNumber2 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,           
      ReferenceBatchNumber3 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,           
      ReferenceBatchNumber4 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,           
      ReferenceBatchNumber5 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,          
      ReferenceBatchSequence1 INT DEFAULT 0,           
      ReferenceBatchSequence2 INT DEFAULT 0,           
      ReferenceBatchSequence3 INT DEFAULT 0,           
      ReferenceBatchSequence4 INT DEFAULT 0,           
      ReferenceBatchSequence5 INT DEFAULT 0,          
      RefNumberOfPieces1 DECIMAL DEFAULT 0,           
      RefNumberOfPieces2 DECIMAL DEFAULT 0,           
      RefNumberOfPieces3 DECIMAL DEFAULT 0,           
      RefNumberOfPieces4 DECIMAL DEFAULT 0,           
      RefNumberOfPieces5 DECIMAL DEFAULT 0,          
      RefItemNumber1 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,           
      RefItemNumber2 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,           
      RefItemNumber3 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,           
      RefItemNumber4 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,           
      RefItemNumber5 NVARCHAR(50) COLLATE DATABASE_DEFAULT DEFAULT NULL,          
      PalletId NVARCHAR(50),
	  CreationTime DATETIME2)            
          
IF (LEN(@SerialNumber) > 0)           
BEGIN          
 INSERT INTO #SerialNumbers           
 select * from dbo.SplitString(NULLIF(@SerialNumber, ','), ',')          
END          
ELSE IF (LEN(@D365BatchNumber) > 0)           
BEGIN          
 INSERT INTO #D365BatchNumbers           
 select * from dbo.SplitString(NULLIF(@D365BatchNumber, ''), ',')          
          
    
 INSERT INTO #SerialNumbers        
 select Distinct a.BatchNumber      
    --*      
 from DOT_FloorAxIntParentTable a with(nolock)       
 where       
  (D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '') or       
  a.BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '')  )    
 and a.IsDeleted = 0  --and IsMigratedFromAX6 = 0 
 and isnull(a.BatchNumber,'')<>''         
        
 INSERT INTO #SerialNumbers          
 select Distinct ReferenceBatchNumber1    
 from DOT_FloorAxIntParentTable a with(nolock)         
 join DOT_FGJournalTable b with(nolock) on a.Id=b.ParentRefRecId and b.IsDeleted=0        
 where         
  D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '')     
 and a.IsDeleted = 0  --and IsMigratedFromAX6 = 0    
 and a.ReferenceBatchNumber1 is not null    
          
 INSERT INTO #SerialNumbers          
 select Distinct ReferenceBatchNumber2    
 from DOT_FloorAxIntParentTable a with(nolock)         
 join DOT_FGJournalTable b with(nolock) on a.Id=b.ParentRefRecId and b.IsDeleted=0        
 where         
  D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '')     
 and a.IsDeleted = 0  --and IsMigratedFromAX6 = 0    
 and a.ReferenceBatchNumber2 is not null    
           
 INSERT INTO #SerialNumbers          
 select Distinct ReferenceBatchNumber3    
 from DOT_FloorAxIntParentTable a with(nolock)         
 join DOT_FGJournalTable b with(nolock) on a.Id=b.ParentRefRecId and b.IsDeleted=0        
 where         
  D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '')     
 and a.IsDeleted = 0  --and IsMigratedFromAX6 = 0    
 and a.ReferenceBatchNumber3 is not null    
           
 INSERT INTO #SerialNumbers          
 select Distinct ReferenceBatchNumber4    
 from DOT_FloorAxIntParentTable a with(nolock)         
 join DOT_FGJournalTable b with(nolock) on a.Id=b.ParentRefRecId and b.IsDeleted=0        
 where         
  D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '')     
 and a.IsDeleted = 0  --and IsMigratedFromAX6 = 0    
 and a.ReferenceBatchNumber4 is not null    
           
 INSERT INTO #SerialNumbers          
 select Distinct ReferenceBatchNumber5    
 from DOT_FloorAxIntParentTable a with(nolock)         
 join DOT_FGJournalTable b with(nolock) on a.Id=b.ParentRefRecId and b.IsDeleted=0        
 where         
  D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '')     
 and a.IsDeleted = 0  --and IsMigratedFromAX6 = 0    
 and a.ReferenceBatchNumber5 is not null    
                
END          
Else IF (LEN(@CustReferenceNumber) > 0)           
BEGIN          
 INSERT INTO #CustReferenceNumbers           
 select * from dbo.SplitString(NULLIF(@CustReferenceNumber, ','), ',')          
          
 INSERT INTO #SerialNumbers          
 select BatchNumber from dbo.UFN_DOT_GetSNFromCustRefForSummaryBatchCardReport(@CustReferenceNumber)          
END          
          
DECLARE @TempPN TABLE (PlantNo VARCHAR(10))          
          
IF (LEN(@PlantNo) > 0)           
BEGIN          
 INSERT INTO @TempPN VALUES (@PlantNo)          
END          
          
ELSE          
BEGIN          
 INSERT INTO @TempPN select LocationName from LocationMaster          
END          
        
IF(LEN(@FunctionIdentifier) > 0)        
BEGIN        
 INSERT INTO #FunctionIdentifiers        
 select * from dbo.SplitString(NULLIF(@FunctionIdentifier, ','), ',')        
END        
ELSE        
BEGIN        
 INSERT INTO #FunctionIdentifiers         
 SELECT ('SMBP')        
END        
        
DECLARE @StartPostingDateTime DateTime = '2019-03-01'          
DECLARE @EndPostingDateTime DateTime = DATEADD(DAY,1,GetDate())          
DECLARE @SerialNoCount int          
SELECT @SerialNoCount = Count(1) from #SerialNumbers          
          
IF (@SerialNoCount > 0)          
BEGIN  
 --select * from #SerialNumbers  
 -----------------------------------------------  
 --details: final pack-fp batch number 1   
 -----------------------------------------------  
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,            
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 ItemNumber, Size, Warehouse, Location, RefRecId, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,          
 ReferenceBatchNumber1, ReferenceBatchSequence1, RefItemNumber1, RefNumberofPieces1,           
 ReferenceBatchNumber2, ReferenceBatchSequence2, RefItemNumber2, RefNumberofPieces2,           
 ReferenceBatchNumber3, ReferenceBatchSequence3, RefItemNumber3, RefNumberofPieces3,           
 ReferenceBatchNumber4, ReferenceBatchSequence4, RefItemNumber4, RefNumberofPieces4,           
 ReferenceBatchNumber5, ReferenceBatchSequence5, RefItemNumber5, RefNumberofPieces5,          
 PalletId,CreationTime)          
          
 select b.PostingDateTime, '' as SerialNumber, a.D365BatchNumber, b.BatchOrderNumber, '' as MovementJournalNumber,           
 '' as TransferJournalNumber,     
 ISNULL(NULLIF(b.PickingListJournal,''), (select PickListJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and         
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as PickListJournalNumber, --for consolidation batch        
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and         
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as RouteCardJournalNumber, --for consolidation batch        
 ISNULL(NULLIF(b.ReportasFinishedJournal,''), (select RAFJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and         
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as RAFJournalNumber, --for consolidation batch,          
 b.RefItemNumber1, b.Configuration as Size, 'FG' as Warehouse, '' as Location,           
 a.Id as RefRecId, b.Quantity as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,          
 a.ReferenceBatchNumber1, a.ReferenceBatchSequence1, b.RefItemNumber1, b.RefNumberofPieces1,           
 a.ReferenceBatchNumber2, a.ReferenceBatchSequence2, b.RefItemNumber2, b.RefNumberofPieces2,           
 a.ReferenceBatchNumber3, a.ReferenceBatchSequence3, b.RefItemNumber3, b.RefNumberofPieces3,           
 a.ReferenceBatchNumber4, a.ReferenceBatchSequence4, b.RefItemNumber4, b.RefNumberofPieces4,           
 a.ReferenceBatchNumber5, a.ReferenceBatchSequence5, b.RefItemNumber5, b.RefNumberofPieces5,           
 a.PalletId,a.CreationTime          
          
 from DOT_FloorAxIntParentTable a with(nolock)           
 join DOT_FGJournalTable b with(nolock) on a.id = b.ParentRefRecId          
 join #FunctionIdentifiers f on f.Identifier=a.FunctionIdentifier        
 where  exists (Select SerialNumber from #SerialNumbers   
    where SerialNumber <> '' and a.ReferenceBatchNumber1 = SerialNumber)  
 and isnull(a.ReferenceBatchNumber1,'')<>''  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0           
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end          
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end          
 and a.PlantNo in (SELECT * FROM @TempPN)    
 -----------------------------------------------  
  --details: final pack-fp batch number 2   
 -----------------------------------------------  
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,            
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 ItemNumber, Size, Warehouse, Location, RefRecId, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,          
 ReferenceBatchNumber1, ReferenceBatchSequence1, RefItemNumber1, RefNumberofPieces1,           
 ReferenceBatchNumber2, ReferenceBatchSequence2, RefItemNumber2, RefNumberofPieces2,           
 ReferenceBatchNumber3, ReferenceBatchSequence3, RefItemNumber3, RefNumberofPieces3,           
 ReferenceBatchNumber4, ReferenceBatchSequence4, RefItemNumber4, RefNumberofPieces4,           
 ReferenceBatchNumber5, ReferenceBatchSequence5, RefItemNumber5, RefNumberofPieces5,          
 PalletId,CreationTime)          
          
 select b.PostingDateTime, a.ReferenceBatchNumber2 as SerialNumber, a.D365BatchNumber, b.BatchOrderNumber, '' as MovementJournalNumber,           
 '' as TransferJournalNumber,     
 ISNULL(NULLIF(b.PickingListJournal,''), (select PickListJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and         
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as PickListJournalNumber, --for consolidation batch        
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and         
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as RouteCardJournalNumber, --for consolidation batch        
 ISNULL(NULLIF(b.ReportasFinishedJournal,''), (select RAFJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and         
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as RAFJournalNumber, --for consolidation batch,          
 b.RefItemNumber1, b.Configuration as Size, 'FG' as Warehouse, '' as Location,           
 a.Id as RefRecId, b.Quantity as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,          
 a.ReferenceBatchNumber1, a.ReferenceBatchSequence1, b.RefItemNumber1, b.RefNumberofPieces1,           
 a.ReferenceBatchNumber2, a.ReferenceBatchSequence2, b.RefItemNumber2, b.RefNumberofPieces2,           
 a.ReferenceBatchNumber3, a.ReferenceBatchSequence3, b.RefItemNumber3, b.RefNumberofPieces3,           
 a.ReferenceBatchNumber4, a.ReferenceBatchSequence4, b.RefItemNumber4, b.RefNumberofPieces4,           
 a.ReferenceBatchNumber5, a.ReferenceBatchSequence5, b.RefItemNumber5, b.RefNumberofPieces5,           
 a.PalletId,a.CreationTime          
          
 from DOT_FloorAxIntParentTable a with(nolock)           
 join DOT_FGJournalTable b with(nolock) on a.id = b.ParentRefRecId          
 join #FunctionIdentifiers f on f.Identifier=a.FunctionIdentifier        
 where  exists (Select 1 from #SerialNumbers where SerialNumber <> '' and a.ReferenceBatchNumber2 = SerialNumber)  
 and not exists (select 1 from #tmpUnion where RefRecId=a.Id)  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0           
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end          
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end          
 and a.PlantNo in (SELECT * FROM @TempPN)    
 -----------------------------------------------  
  --details: final pack-fp batch number 3   
 -----------------------------------------------  
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,            
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 ItemNumber, Size, Warehouse, Location, RefRecId, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,          
 ReferenceBatchNumber1, ReferenceBatchSequence1, RefItemNumber1, RefNumberofPieces1,           
 ReferenceBatchNumber2, ReferenceBatchSequence2, RefItemNumber2, RefNumberofPieces2,           
 ReferenceBatchNumber3, ReferenceBatchSequence3, RefItemNumber3, RefNumberofPieces3,           
 ReferenceBatchNumber4, ReferenceBatchSequence4, RefItemNumber4, RefNumberofPieces4,           
 ReferenceBatchNumber5, ReferenceBatchSequence5, RefItemNumber5, RefNumberofPieces5,          
 PalletId,CreationTime)          
          
 select b.PostingDateTime, a.ReferenceBatchNumber3 as SerialNumber, a.D365BatchNumber, b.BatchOrderNumber, '' as MovementJournalNumber,           
 '' as TransferJournalNumber,     
 ISNULL(NULLIF(b.PickingListJournal,''), (select PickListJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and         
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as PickListJournalNumber, --for consolidation batch        
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and         
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as RouteCardJournalNumber, --for consolidation batch        
 ISNULL(NULLIF(b.ReportasFinishedJournal,''), (select RAFJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and         
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as RAFJournalNumber, --for consolidation batch,          
 b.RefItemNumber1, b.Configuration as Size, 'FG' as Warehouse, '' as Location,           
 a.Id as RefRecId, b.Quantity as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,          
 a.ReferenceBatchNumber1, a.ReferenceBatchSequence1, b.RefItemNumber1, b.RefNumberofPieces1,           
 a.ReferenceBatchNumber2, a.ReferenceBatchSequence2, b.RefItemNumber2, b.RefNumberofPieces2,           
 a.ReferenceBatchNumber3, a.ReferenceBatchSequence3, b.RefItemNumber3, b.RefNumberofPieces3,           
 a.ReferenceBatchNumber4, a.ReferenceBatchSequence4, b.RefItemNumber4, b.RefNumberofPieces4,           
 a.ReferenceBatchNumber5, a.ReferenceBatchSequence5, b.RefItemNumber5, b.RefNumberofPieces5,           
 a.PalletId,a.CreationTime          
          
 from DOT_FloorAxIntParentTable a with(nolock)           
 join DOT_FGJournalTable b with(nolock) on a.id = b.ParentRefRecId          
 join #FunctionIdentifiers f on f.Identifier=a.FunctionIdentifier        
 where  exists (Select SerialNumber from #SerialNumbers where SerialNumber <> '' and a.ReferenceBatchNumber3 = SerialNumber)  
 and not exists (select 1 from #tmpUnion where RefRecId=a.Id)  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0           
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end          
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end          
 and a.PlantNo in (SELECT * FROM @TempPN)    
 -----------------------------------------------  
  --details: final pack-fp batch number 4   
 -----------------------------------------------  
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,            
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 ItemNumber, Size, Warehouse, Location, RefRecId, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,          
 ReferenceBatchNumber1, ReferenceBatchSequence1, RefItemNumber1, RefNumberofPieces1,           
 ReferenceBatchNumber2, ReferenceBatchSequence2, RefItemNumber2, RefNumberofPieces2,           
 ReferenceBatchNumber3, ReferenceBatchSequence3, RefItemNumber3, RefNumberofPieces3,           
 ReferenceBatchNumber4, ReferenceBatchSequence4, RefItemNumber4, RefNumberofPieces4,           
 ReferenceBatchNumber5, ReferenceBatchSequence5, RefItemNumber5, RefNumberofPieces5,          
 PalletId,CreationTime)          
          
 select b.PostingDateTime, a.ReferenceBatchNumber4 as SerialNumber, a.D365BatchNumber, b.BatchOrderNumber, '' as MovementJournalNumber,           
 '' as TransferJournalNumber,     
 ISNULL(NULLIF(b.PickingListJournal,''), (select PickListJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and         
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as PickListJournalNumber, --for consolidation batch        
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and         
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as RouteCardJournalNumber, --for consolidation batch        
 ISNULL(NULLIF(b.ReportasFinishedJournal,''), (select RAFJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and         
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as RAFJournalNumber, --for consolidation batch,          
 b.RefItemNumber1, b.Configuration as Size, 'FG' as Warehouse, '' as Location,           
 a.Id as RefRecId, b.Quantity as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,          
 a.ReferenceBatchNumber1, a.ReferenceBatchSequence1, b.RefItemNumber1, b.RefNumberofPieces1,           
 a.ReferenceBatchNumber2, a.ReferenceBatchSequence2, b.RefItemNumber2, b.RefNumberofPieces2,           
 a.ReferenceBatchNumber3, a.ReferenceBatchSequence3, b.RefItemNumber3, b.RefNumberofPieces3,           
 a.ReferenceBatchNumber4, a.ReferenceBatchSequence4, b.RefItemNumber4, b.RefNumberofPieces4,           
 a.ReferenceBatchNumber5, a.ReferenceBatchSequence5, b.RefItemNumber5, b.RefNumberofPieces5,           
 a.PalletId,a.CreationTime          
          
 from DOT_FloorAxIntParentTable a with(nolock)           
 join DOT_FGJournalTable b with(nolock) on a.id = b.ParentRefRecId          
 join #FunctionIdentifiers f on f.Identifier=a.FunctionIdentifier        
 where  exists (Select SerialNumber from #SerialNumbers where SerialNumber <> '' and a.ReferenceBatchNumber4 = SerialNumber)  
 and not exists (select 1 from #tmpUnion where RefRecId=a.Id)  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0           
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end          
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end          
 and a.PlantNo in (SELECT * FROM @TempPN)    
 -----------------------------------------------  
  --details: final pack-fp batch number 5   
 -----------------------------------------------  
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,            
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 ItemNumber, Size, Warehouse, Location, RefRecId, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,          
 ReferenceBatchNumber1, ReferenceBatchSequence1, RefItemNumber1, RefNumberofPieces1,           
 ReferenceBatchNumber2, ReferenceBatchSequence2, RefItemNumber2, RefNumberofPieces2,           
 ReferenceBatchNumber3, ReferenceBatchSequence3, RefItemNumber3, RefNumberofPieces3,           
 ReferenceBatchNumber4, ReferenceBatchSequence4, RefItemNumber4, RefNumberofPieces4,           
 ReferenceBatchNumber5, ReferenceBatchSequence5, RefItemNumber5, RefNumberofPieces5,          
 PalletId,CreationTime)          
          
 select b.PostingDateTime, a.ReferenceBatchNumber5 as SerialNumber, a.D365BatchNumber, b.BatchOrderNumber, '' as MovementJournalNumber,           
 '' as TransferJournalNumber,     
 ISNULL(NULLIF(b.PickingListJournal,''), (select PickListJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and         
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as PickListJournalNumber, --for consolidation batch        
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and         
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as RouteCardJournalNumber, --for consolidation batch        
 ISNULL(NULLIF(b.ReportasFinishedJournal,''), (select RAFJournalId from DOT_FGSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and         
 FunctionIdentifier = a.FunctionIdentifier and IsDeleted = 0)) as RAFJournalNumber, --for consolidation batch,          
 b.RefItemNumber1, b.Configuration as Size, 'FG' as Warehouse, '' as Location,           
 a.Id as RefRecId, b.Quantity as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,          
 a.ReferenceBatchNumber1, a.ReferenceBatchSequence1, b.RefItemNumber1, b.RefNumberofPieces1,           
 a.ReferenceBatchNumber2, a.ReferenceBatchSequence2, b.RefItemNumber2, b.RefNumberofPieces2,           
 a.ReferenceBatchNumber3, a.ReferenceBatchSequence3, b.RefItemNumber3, b.RefNumberofPieces3,           
 a.ReferenceBatchNumber4, a.ReferenceBatchSequence4, b.RefItemNumber4, b.RefNumberofPieces4,           
 a.ReferenceBatchNumber5, a.ReferenceBatchSequence5, b.RefItemNumber5, b.RefNumberofPieces5,           
 a.PalletId,a.CreationTime          
          
 from DOT_FloorAxIntParentTable a with(nolock)           
 join DOT_FGJournalTable b with(nolock) on a.id = b.ParentRefRecId   
 join #FunctionIdentifiers f on f.Identifier=a.FunctionIdentifier        
 where  exists (Select SerialNumber from #SerialNumbers where SerialNumber <> '' and a.ReferenceBatchNumber5 = SerialNumber)  
 and not exists (select 1 from #tmpUnion where RefRecId=a.Id)  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0           
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end          
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end          
 and a.PlantNo in (SELECT * FROM @TempPN)    
 -----------------------------------------------  
          
  
          
 --details: final pack-glove batch number 1           
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,           
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size,           
 Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime)          
          
 select PostingDateTime, ReferenceBatchNumber1 as SerialNumber,          
 dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard(ReferenceBatchNumber1) as D365BatchNumber,           
 --dbo.UFN_DOT_GetBOForSummaryBatchCard(ReferenceBatchNumber1) as BatchOrderNumber,  
  -- refer to FG BO  
 #tmpUnion.BatchOrderNumber,  
 MovementJournalNumber, TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 RefItemNumber1 as ItemNumber, Size,          
 dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber1,ReferenceBatchSequence1) as Warehouse,          
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber1,ReferenceBatchSequence1) as Location,           
 CAST(RefNumberofPieces1 as DECIMAL (10, 4)) * -1 as TransitionQuantity, ReservedQuantity, ReferenceBatchSequence1 as Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime          
 from #tmpUnion where ReferenceBatchNumber1 IN (Select SerialNumber from #SerialNumbers where SerialNumber <> '')          
             
          
 --details: final pack-glove batch number 2           
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,           
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,           
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime)          
          
 select PostingDateTime, ReferenceBatchNumber2 as SerialNumber,           
 dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard(ReferenceBatchNumber2) as D365BatchNumber,           
 --dbo.UFN_DOT_GetBOForSummaryBatchCard(ReferenceBatchNumber2) as BatchOrderNumber,   
  -- refer to FG BO  
 #tmpUnion.BatchOrderNumber,  
 MovementJournalNumber, TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 RefItemNumber1 as ItemNumber, Size,          
 dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber2,ReferenceBatchSequence2) as Warehouse,          
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber2,ReferenceBatchSequence2) as Location,           
 CAST(RefNumberofPieces2 as DECIMAL (10, 4)) * -1 as TransitionQuantity, ReservedQuantity, ReferenceBatchSequence2 as Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime          
 from #tmpUnion where ReferenceBatchNumber2 IN (Select SerialNumber from #SerialNumbers where SerialNumber <> '')          
                
          
 --details: final pack-glove batch number 3           
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,           
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,           
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime)          
          
 select PostingDateTime, ReferenceBatchNumber3 as SerialNumber,           
 dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard(ReferenceBatchNumber3) as D365BatchNumber,           
 --dbo.UFN_DOT_GetBOForSummaryBatchCard(ReferenceBatchNumber3) as BatchOrderNumber,  
  -- refer to FG BO  
 #tmpUnion.BatchOrderNumber,  
 MovementJournalNumber, TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 RefItemNumber1 as ItemNumber, Size,          
 dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber3,ReferenceBatchSequence3) as Warehouse,          
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber3,ReferenceBatchSequence3) as Location,           
 CAST(RefNumberofPieces3 as DECIMAL (10, 4)) * -1 as TransitionQuantity, ReservedQuantity, ReferenceBatchSequence3 as Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime          
 from #tmpUnion where ReferenceBatchNumber3 IN (Select SerialNumber from #SerialNumbers where SerialNumber <> '')          
               
          
 --details: final pack-glove batch number 4           
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,           
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,           
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime)          
          
 select PostingDateTime, ReferenceBatchNumber4 as SerialNumber,           
 dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard(ReferenceBatchNumber4) as D365BatchNumber,           
 --dbo.UFN_DOT_GetBOForSummaryBatchCard(ReferenceBatchNumber4) as BatchOrderNumber,  
  -- refer to FG BO  
 #tmpUnion.BatchOrderNumber,  
 MovementJournalNumber, TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 RefItemNumber1 as ItemNumber, Size,          
 dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber4,ReferenceBatchSequence4) as Warehouse,          
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber4,ReferenceBatchSequence4) as Location,           
 CAST(RefNumberofPieces4 as DECIMAL (10, 4)) * -1 as TransitionQuantity, ReservedQuantity, ReferenceBatchSequence4 as Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime          
 from #tmpUnion where ReferenceBatchNumber4 IN (Select SerialNumber from #SerialNumbers where SerialNumber <> '')          
               
          
 --details: final pack-glove batch number 5           
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,           
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,           
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime)          
          
 select PostingDateTime, ReferenceBatchNumber5 as SerialNumber,           
 dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard(ReferenceBatchNumber5) as D365BatchNumber,           
 --dbo.UFN_DOT_GetBOForSummaryBatchCard(ReferenceBatchNumber5) as BatchOrderNumber,   
  -- refer to FG BO  
 #tmpUnion.BatchOrderNumber,  
 MovementJournalNumber, TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 RefItemNumber1 as ItemNumber, Size,          
 dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber5,ReferenceBatchSequence5) as Warehouse,          
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber5,ReferenceBatchSequence5) as Location,           
 CAST(RefNumberofPieces5 as DECIMAL (10, 4)) * -1 as TransitionQuantity, ReservedQuantity, ReferenceBatchSequence5 as Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime          
 from #tmpUnion where ReferenceBatchNumber5 IN (Select SerialNumber from #SerialNumbers where SerialNumber <> '')          
END          
ELSE IF LEN(@PlantNo) > 0 OR LEN(@FunctionIdentifier) > 0
BEGIN          
 --details: final pack smbp seq 0          
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,            
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 ItemNumber, Size, Warehouse, Location, RefRecId, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,          
 ReferenceBatchNumber1, ReferenceBatchSequence1, RefItemNumber1, RefNumberofPieces1,           
 ReferenceBatchNumber2, ReferenceBatchSequence2, RefItemNumber2, RefNumberofPieces2,           
 ReferenceBatchNumber3, ReferenceBatchSequence3, RefItemNumber3, RefNumberofPieces3,           
 ReferenceBatchNumber4, ReferenceBatchSequence4, RefItemNumber4, RefNumberofPieces4,           
 ReferenceBatchNumber5, ReferenceBatchSequence5, RefItemNumber5, RefNumberofPieces5,           
 PalletId,CreationTime)          
          
 select b.PostingDateTime, '' as SerialNumber, a.D365BatchNumber, b.BatchOrderNumber, '' as MovementJournalNumber,           
 '' as TransferJournalNumber, ISNULL(b.PickingListJournal,'') as PickListJournalNumber, ISNULL(b.RouteCardJournalId,'') as           
 RouteCardJournalNumber, ISNULL(b.ReportasFinishedJournal,'') as RAFJournalNumber,          
 b.RefItemNumber1, b.Configuration as Size, 'FG' as Warehouse, '' as Location,           
 a.Id as RefRecId, b.Quantity as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,          
 a.ReferenceBatchNumber1, a.ReferenceBatchSequence1, b.RefItemNumber1, b.RefNumberofPieces1,           
 a.ReferenceBatchNumber2, a.ReferenceBatchSequence2, b.RefItemNumber2, b.RefNumberofPieces2,           
 a.ReferenceBatchNumber3, a.ReferenceBatchSequence3, b.RefItemNumber3, b.RefNumberofPieces3,           
 a.ReferenceBatchNumber4, a.ReferenceBatchSequence4, b.RefItemNumber4, b.RefNumberofPieces4,           
 a.ReferenceBatchNumber5, a.ReferenceBatchSequence5, b.RefItemNumber5, b.RefNumberofPieces5,          
 a.PalletId,a.CreationTime          
          
 from DOT_FloorAxIntParentTable a with(nolock)           
 join DOT_FGJournalTable b with(nolock) on a.id = b.ParentRefRecId          
 join #FunctionIdentifiers f on f.Identifier=a.FunctionIdentifier        
 where a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0          
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end          
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end          
 and a.PlantNo in (SELECT * FROM @TempPN)           
          
 --details: final pack-fp batch number 1            
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,           
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,           
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime)          
          
 select PostingDateTime, ReferenceBatchNumber1 as SerialNumber, D365BatchNumber, BatchOrderNumber,           
 MovementJournalNumber, TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 ItemNumber, Size, 'FG' as Warehouse, '' as Location,           
 CAST(TransitionQuantity as DECIMAL (10, 4)) as TransitionQuantity, ReservedQuantity, ReferenceBatchSequence1 as Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime          
 from #tmpUnion where RefItemNumber1 is not null and RefNumberOfPieces1 > 0          
          
 --details: final pack-glove batch number 1           
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,           
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,           
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime)          
          
 select PostingDateTime, ReferenceBatchNumber1 as SerialNumber,           
 dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard(ReferenceBatchNumber1) as D365BatchNumber,           
 --dbo.UFN_DOT_GetBOForSummaryBatchCard(ReferenceBatchNumber1) as BatchOrderNumber,   
  -- refer to FG BO  
 #tmpUnion.BatchOrderNumber,  
 MovementJournalNumber, TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 RefItemNumber1 as ItemNumber, Size,          
 dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber1,ReferenceBatchSequence1) as Warehouse,          
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber1,ReferenceBatchSequence1) as Location,           
 CAST(RefNumberofPieces1 as DECIMAL (10, 4)) * -1 as TransitionQuantity, ReservedQuantity, ReferenceBatchSequence1 as Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime          
 from #tmpUnion where RefItemNumber1 is not null and RefNumberOfPieces1 > 0          
          
 --details: final pack-fp batch number 2           
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,           
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,           
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime)          
          
 select PostingDateTime, ReferenceBatchNumber2 as SerialNumber, D365BatchNumber, BatchOrderNumber,           
 MovementJournalNumber, TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 ItemNumber, Size, 'FG' as Warehouse, '' as Location,           
 CAST(TransitionQuantity as DECIMAL (10, 4)) as TransitionQuantity, ReservedQuantity, ReferenceBatchSequence2 as Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime          
 from #tmpUnion where RefItemNumber2 is not null and RefNumberOfPieces2 > 0          
          
 --details: final pack-glove batch number 2           
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,         
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,           
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime)          
          
 select PostingDateTime, ReferenceBatchNumber2 as SerialNumber,           
 dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard(ReferenceBatchNumber2) as D365BatchNumber,           
 --dbo.UFN_DOT_GetBOForSummaryBatchCard(ReferenceBatchNumber2) as BatchOrderNumber,    
  -- refer to FG BO  
 #tmpUnion.BatchOrderNumber,  
 MovementJournalNumber, TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 RefItemNumber1 as ItemNumber, Size,          
 dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber2,ReferenceBatchSequence2) as Warehouse,          
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber2,ReferenceBatchSequence2) as Location,           
 CAST(RefNumberofPieces2 as DECIMAL) * -1 as TransitionQuantity, ReservedQuantity, ReferenceBatchSequence2 as Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime          
 from #tmpUnion where RefItemNumber2 is not null and RefNumberOfPieces2 > 0          
          
 --details: final pack-fp batch number 3           
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,           
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,           
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime)          
          
 select PostingDateTime, ReferenceBatchNumber3 as SerialNumber, D365BatchNumber, BatchOrderNumber,           
 MovementJournalNumber, TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 ItemNumber, Size, 'FG' as Warehouse, '' as Location,           
 CAST(TransitionQuantity as DECIMAL (10, 4)) as TransitionQuantity, ReservedQuantity, ReferenceBatchSequence3 as Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime          
 from #tmpUnion where RefItemNumber3 is not null and RefNumberOfPieces3 > 0          
          
 --details: final pack-glove batch number 3           
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,           
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,           
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime)          
          
 select PostingDateTime, ReferenceBatchNumber3 as SerialNumber,           
 dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard(ReferenceBatchNumber3) as D365BatchNumber,           
 --dbo.UFN_DOT_GetBOForSummaryBatchCard(ReferenceBatchNumber3) as BatchOrderNumber,   
  -- refer to FG BO  
 #tmpUnion.BatchOrderNumber,  
 MovementJournalNumber, TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 RefItemNumber1 as ItemNumber, Size,          
 dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber3,ReferenceBatchSequence3) as Warehouse,          
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber3,ReferenceBatchSequence3) as Location,           
 CAST(RefNumberofPieces3 as DECIMAL (10, 4)) * -1 as TransitionQuantity, ReservedQuantity, ReferenceBatchSequence3 as Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime          
 from #tmpUnion where RefItemNumber3 is not null and RefNumberOfPieces3 > 0          
          
 --details: final pack-fp batch number 4           
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,           
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,           
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime)          
          
 select PostingDateTime, ReferenceBatchNumber4 as SerialNumber, D365BatchNumber, BatchOrderNumber,           
 MovementJournalNumber, TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 ItemNumber, Size, 'FG' as Warehouse, '' as Location,           
 CAST(TransitionQuantity as DECIMAL (10, 4)) as TransitionQuantity, ReservedQuantity, ReferenceBatchSequence4 as Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime          
 from #tmpUnion where RefItemNumber4 is not null and RefNumberOfPieces4 > 0          
          
 --details: final pack-glove batch number 4           
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,           
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,           
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime)          
          
 select PostingDateTime, ReferenceBatchNumber4 as SerialNumber,           
 dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard(ReferenceBatchNumber4) as D365BatchNumber,           
 --dbo.UFN_DOT_GetBOForSummaryBatchCard(ReferenceBatchNumber4) as BatchOrderNumber,  
  -- refer to FG BO  
 #tmpUnion.BatchOrderNumber,  
 MovementJournalNumber, TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 RefItemNumber1 as ItemNumber, Size,          
 dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber4,ReferenceBatchSequence4) as Warehouse,          
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber4,ReferenceBatchSequence4) as Location,           
 CAST(RefNumberofPieces4 as DECIMAL (10, 4)) * -1 as TransitionQuantity, ReservedQuantity, ReferenceBatchSequence4 as Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime          
 from #tmpUnion where RefItemNumber4 is not null and RefNumberOfPieces4 > 0          
          
 --details: final pack-fp batch number 5           
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,           
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,           
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime)          
          
 select PostingDateTime, ReferenceBatchNumber5 as SerialNumber, D365BatchNumber, BatchOrderNumber,           
 MovementJournalNumber, TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 ItemNumber, Size, 'FG' as Warehouse, '' as Location,           
 CAST(TransitionQuantity as DECIMAL (10, 4)) as TransitionQuantity, ReservedQuantity, ReferenceBatchSequence5 as Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime          
 from #tmpUnion where RefItemNumber5 is not null and RefNumberOfPieces5 > 0          
          
 --details: final pack-glove batch number 5           
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,           
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,           
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime)          
          
 select PostingDateTime, ReferenceBatchNumber5 as SerialNumber,           
 dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard(ReferenceBatchNumber5) as D365BatchNumber,           
 --dbo.UFN_DOT_GetBOForSummaryBatchCard(ReferenceBatchNumber5) as BatchOrderNumber,    
 -- refer to FG BO  
 #tmpUnion.BatchOrderNumber,  
 MovementJournalNumber, TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,          
 RefItemNumber1 as ItemNumber, Size,          
 dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber5,ReferenceBatchSequence5) as Warehouse,          
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber5,ReferenceBatchSequence5) as Location,           
 CAST(RefNumberofPieces5 as DECIMAL) * -1 as TransitionQuantity, ReservedQuantity, ReferenceBatchSequence5 as Sequence, FunctionIdentifier, PlantNo, PalletId,CreationTime          
 from #tmpUnion where RefItemNumber5 is not null and RefNumberOfPieces5 > 0          
END          
          
Select a.PlantNo, a.FunctionIdentifier, a.PostingDateTime, a.SerialNumber, a.D365BatchNumber, a.BatchOrderNumber, a.MovementJournalNumber,           
a.TransferJournalNumber, a.PickListJournalNumber as PickingListJournalNumber, a.RouteCardJournalNumber, a.RAFJournalNumber, a.ItemNumber, a.Size, a.Warehouse,a.Location,          
-- hide qty if not complete posting without journal id come back from d365      
case when ISNULL(a.PickListJournalNumber,'')='' and ISNULL(a.RAFJournalNumber,'')='' then 0.0 else CONVERT(DECIMAL (10, 4),a.TransitionQuantity) end as TransitionQuantity, CONVERT(DECIMAL (10, 4),a.ReservedQuantity) as ReservedQuantity, PalletId,CreationTime         
   
--select *          
from #tmpUnion a           
where --SerialNumber <> ''           
a.Warehouse LIKE (case when LEN(@Warehouse) > 0 then @Warehouse  else '%' end)          
          
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL            
DROP TABLE #SerialNumbers           
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL            
DROP TABLE #D365BatchNumbers           
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL            
DROP TABLE #CustReferenceNumbers          
IF OBJECT_ID('tempdb..#tmpUnion') IS NOT NULL            
DROP TABLE #tmpUnion           
          
END

GO
PRINT N'Altering Procedure [dbo].[USP_DOT_TransferSummaryBatchCardReport]...';


GO
-- ==================================================================================================================================================                
-- Name: USP_DOT_TransferSummaryBatchCardReport              
-- Purpose: Summary Batch Card Report For Transfer Batch              
-- ==================================================================================================================================================                
-- Change History                
-- Date   Author   Comments                
-- -----  ------   ------------------------------------------------------------              
-- 2021/10/26   Azrul    SP created.                
-- ==================================================================================================================================================               
-- exec USP_DOT_TransferSummaryBatchCardReport '2210605283,2210605145,2210605001,2210605292,2210605426', '', '', '2021-01-01','2021-10-01','','',''            
-- exec USP_DOT_TransferSummaryBatchCardReport '2210605283,2210605145,2210605001,2210605292,2210605426', '', '', '','','','',''            
-- exec USP_DOT_TransferSummaryBatchCardReport '2210931745', '', '', '','','','',''            
-- exec USP_DOT_TransferSummaryBatchCardReport '', '', 'ANSL 301/20', '','','','',''            
-- exec USP_DOT_TransferSummaryBatchCardReport '', '', 'MEDU 806/21', '','','','',''            
-- exec USP_DOT_TransferSummaryBatchCardReport '', '', '', '2021-08-01','2021-08-02','','',''    
-- exec USP_DOT_TransferSummaryBatchCardReport '', '202112220002', '', '','','','',''        
-- exec USP_DOT_TransferSummaryBatchCardReport '2210980629', '', '', '','','','',''        
-- ==================================================================================================================================================            
            
CREATE OR ALTER   PROCEDURE USP_DOT_TransferSummaryBatchCardReport  
(            
@SerialNumber NVARCHAR(4000),            
@D365BatchNumber NVARCHAR(4000),            
@CustReferenceNumber NVARCHAR(4000),            
@PostingDateTimeFrom NVARCHAR(100),            
@PostingDateTimeTo NVARCHAR(100),            
@PlantNo NVARCHAR(4000),            
@Warehouse NVARCHAR(4000),            
@FunctionIdentifier NVARCHAR(4000)        
)            
            
AS            
BEGIN              
-- -- SET NOCOUNT ON added to prevent extra result sets from                
-- -- interfering with SELECT statements.                
 SET NOCOUNT ON;            
        
IF OBJECT_ID('tempdb..#FunctionIdentifiers') IS NOT NULL          
DROP TABLE #FunctionIdentifiers              
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL              
DROP TABLE #SerialNumbers             
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL              
DROP TABLE #D365BatchNumbers             
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL              
DROP TABLE #CustReferenceNumbers            
IF OBJECT_ID('tempdb..#tmpUnion') IS NOT NULL              
DROP TABLE #tmpUnion            
        
CREATE TABLE #FunctionIdentifiers (Identifier NVARCHAR(20))            
CREATE TABLE #SerialNumbers (SerialNumber NVARCHAR(4000))            
CREATE TABLE #D365BatchNumbers (D365BatchNumber NVARCHAR(4000))            
CREATE TABLE #CustReferenceNumbers (CustReferenceNumber NVARCHAR(4000))            
CREATE TABLE #tmpUnion (PostingDateTime DATETIME2,             
      SerialNumber NVARCHAR(50),             
      D365BatchNumber NVARCHAR(50),             
      BatchOrderNumber NVARCHAR(50),             
      MovementJournalNumber NVARCHAR(100),             
      TransferJournalNumber NVARCHAR(100),             
      PickListJournalNumber NVARCHAR(100),             
      RouteCardJournalNumber NVARCHAR(100),             
      RAFJournalNumber NVARCHAR(100),             
      ItemNumber NVARCHAR(100),             
      Size NVARCHAR(10),             
      Warehouse NVARCHAR(10),             
      Location NVARCHAR(10),             
    TransitionQuantity DECIMAL (18, 4) DEFAULT 0,             
      ReservedQuantity DECIMAL (18, 4),             
      BaseQuantity DECIMAL DEFAULT 0,             
      Sequence INT,             
      FunctionIdentifier NVARCHAR(50),            
      PlantNo NVARCHAR(10),            
      ReferenceBatchNumber1 NVARCHAR(50) DEFAULT NULL,             
      ReferenceBatchNumber2 NVARCHAR(50) DEFAULT NULL,             
      ReferenceBatchNumber3 NVARCHAR(50) DEFAULT NULL,             
      ReferenceBatchNumber4 NVARCHAR(50) DEFAULT NULL,             
      ReferenceBatchNumber5 NVARCHAR(50) DEFAULT NULL,            
      ReferenceBatchSequence1 INT DEFAULT 0,             
      ReferenceBatchSequence2 INT DEFAULT 0,             
      ReferenceBatchSequence3 INT DEFAULT 0,             
      ReferenceBatchSequence4 INT DEFAULT 0,             
      ReferenceBatchSequence5 INT DEFAULT 0,            
      RefNumberOfPieces1 DECIMAL DEFAULT 0,                 
      RefNumberOfPieces2 DECIMAL DEFAULT 0,             
      RefNumberOfPieces3 DECIMAL DEFAULT 0,             
      RefNumberOfPieces4 DECIMAL DEFAULT 0,             
      RefNumberOfPieces5 DECIMAL DEFAULT 0,            
      RefItemNumber1 NVARCHAR(50) DEFAULT NULL,             
      RefItemNumber2 NVARCHAR(50) DEFAULT NULL,             
      RefItemNumber3 NVARCHAR(50) DEFAULT NULL,             
      RefItemNumber4 NVARCHAR(50) DEFAULT NULL,             
      RefItemNumber5 NVARCHAR(50) DEFAULT NULL,
	  CreationTime DATETIME2)            
            
IF (LEN(@SerialNumber) > 0)             
BEGIN            
 INSERT INTO #SerialNumbers             
 select * from dbo.SplitString(NULLIF(@SerialNumber, ','), ',')            
END            
ELSE IF (LEN(@D365BatchNumber) > 0)             
BEGIN            
 INSERT INTO #D365BatchNumbers             
 select * from dbo.SplitString(NULLIF(@D365BatchNumber, ''), ',')            
            
 INSERT INTO #SerialNumbers            
 select           
 case when isnull(a.BatchNumber,'')='' then isnull(b.BatchNumber,'')          
    else isnull(a.BatchNumber,'') end           
    --*          
 from DOT_FloorAxIntParentTable a with(nolock)           
 left join DOT_FGJournalTable b with(nolock) on a.Id=b.ParentRefRecId and b.IsDeleted=0          
 where           
  D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '') or           
  a.BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '')          
          
 and a.IsDeleted = 0  and IsMigratedFromAX6 = 0                
END            
Else IF (LEN(@CustReferenceNumber) > 0)             
BEGIN            
 INSERT INTO #CustReferenceNumbers             
 select * from dbo.SplitString(NULLIF(@CustReferenceNumber, ','), ',')            
            
 INSERT INTO #SerialNumbers            
 select BatchNumber from dbo.UFN_DOT_GetSNFromCustRefForSummaryBatchCardReport(@CustReferenceNumber)            
END            
            
DECLARE @TempPN TABLE (PlantNo VARCHAR(10))            
            
IF (LEN(@PlantNo) > 0)             
BEGIN            
 INSERT INTO @TempPN VALUES (@PlantNo)            
END            
            
ELSE            
BEGIN            
 INSERT INTO @TempPN select LocationName from LocationMaster            
END            
        
IF(LEN(@FunctionIdentifier) > 0)        
BEGIN        
      INSERT INTO #FunctionIdentifiers        
      select * from dbo.SplitString(NULLIF(@FunctionIdentifier, ','), ',')        
END        
ELSE        
BEGIN        
      INSERT INTO #FunctionIdentifiers         
      SELECT ('SPBC')        
        
   INSERT INTO #FunctionIdentifiers         
      SELECT ('STPI')        
        
   INSERT INTO #FunctionIdentifiers         
      SELECT ('STPO')        
END        
            
DECLARE @StartPostingDateTime DateTime = '2019-03-01'            
DECLARE @EndPostingDateTime DateTime = DATEADD(DAY,1,GetDate())            
DECLARE @SerialNoCount int            
SELECT @SerialNoCount = Count(1) from #SerialNumbers            
            
--details: transfer batch            
IF (@SerialNoCount > 0)            
BEGIN            
 -- Transfer from details            
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,             
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size, Warehouse,             
 Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,CreationTime)            
            
 select b.ScanInDateTime as PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber, '' as BatchOrderNumber, '' as MovementJournalNumber,             
 ISNULL(NULLIF(b.TransferJournalId,''), (select TransferJournalId from DOT_TransferSumTable with(nolock)             
 where DetailStagingJSON=a.Id))             
 as TransferJournalNumber, --for consolidation batch            
 '' as PickListJournalNumber, '' as RouteCardJournalNumber, '' as RAFJournalNumber,            
 b.ItemNumber, b.Configuration as Size, b.Warehouse, b.Location,             
 Case when ((b.Location = 'PN' or b.Location = 'QC') and a.FunctionIdentifier='STPI') or (b.Location = 'TP' and a.FunctionIdentifier='STPO') Then b.Quantity * -1 else b.Quantity end as TransitionQuantity,             
 NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,a.CreationTime            
            
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_TransferJournal b with(nolock) on a.id = b.ParentRefRecId            
 join #FunctionIdentifiers f on f.Identifier=a.FunctionIdentifier        
 where a.BatchNumber IN (Select Distinct SerialNumber from #SerialNumbers where SerialNumber <> '')            
 and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0             
 and b.ScanInDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end            
 and b.ScanInDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end            
 and PlantNo in (SELECT * FROM @TempPN)            
             
 -- Transfer to details            
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,             
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size, Warehouse,             
 Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,CreationTime)            
            
 Select PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,             
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size,             
 '' as Warehouse,             
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(SerialNumber, Sequence) as Location,             
 TransitionQuantity * -1, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,CreationTime            
 From #tmpUnion            
            
END            
ELSE            
BEGIN            
 -- Transfer from details            
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,             
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size, Warehouse,             
 Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,CreationTime)            
            
 select b.ScanInDateTime as PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber, '' as BatchOrderNumber, '' as MovementJournalNumber,             
 ISNULL(NULLIF(b.TransferJournalId,''), (select TransferJournalId from DOT_TransferSumTable with(nolock)             
 where DetailStagingJSON=a.Id)) as TransferJournalNumber, --for consolidation batch           
 '' as PickListJournalNumber, '' as RouteCardJournalNumber, '' as RAFJournalNumber,            
 b.ItemNumber, b.Configuration as Size, b.Warehouse, b.Location,             
 Case when ((b.Location = 'PN' or b.Location = 'QC') and a.FunctionIdentifier='STPI') or (b.Location = 'TP' and a.FunctionIdentifier='STPO') Then b.Quantity * -1 else b.Quantity end as TransitionQuantity,             
 NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,a.CreationTime            
    
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_TransferJournal b with(nolock) on a.id = b.ParentRefRecId            
 join #FunctionIdentifiers f on f.Identifier=a.FunctionIdentifier        
 where a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0             
 and b.ScanInDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end            
 and b.ScanInDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end            
 and PlantNo in (SELECT * FROM @TempPN)            
            
 -- Transfer to details            
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,             
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size, Warehouse,             
 Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,CreationTime)            
             
 Select PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,             
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size,            
 '' as Warehouse,             
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(SerialNumber, Sequence) as Location,             
 TransitionQuantity * -1, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,CreationTime            
 From #tmpUnion            
END            
            
select * from     
(    
Select a.PlantNo, a.FunctionIdentifier, a.PostingDateTime, a.SerialNumber, a.D365BatchNumber, a.BatchOrderNumber, a.MovementJournalNumber,             
a.TransferJournalNumber, '' as PickingListJournalNumber, '' as RouteCardJournalNumber, '' as RAFJournalNumber,            
a.ItemNumber, a.Size,     
case when isnull(a.Warehouse,'')<>'' and FunctionIdentifier='SPBC' then a.Warehouse   
else case when isnull(@Warehouse,'')<>'' then @Warehouse else dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(SerialNumber, Sequence) end  
end as Warehouse,       
 a.Location,          
-- hide qty if not complete posting without journal id come back from d365      
case when ISNULL(a.TransferJournalNumber,'')='' then 0.0 else CONVERT(DECIMAL (10, 4),a.TransitionQuantity) end as TransitionQuantity, CONVERT(DECIMAL (10, 4),a.ReservedQuantity) as ReservedQuantity,a.CreationTime              
from #tmpUnion a      
) b         
WHERE Warehouse LIKE (case when LEN(@Warehouse) > 0 then @Warehouse  else '%' end)         
    
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL              
DROP TABLE #SerialNumbers             
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL              
DROP TABLE #D365BatchNumbers             
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL              
DROP TABLE #CustReferenceNumbers            
IF OBJECT_ID('tempdb..#tmpUnion') IS NOT NULL              
DROP TABLE #tmpUnion            
            
END
GO
PRINT N'Altering Procedure [dbo].[USP_DOT_PickingListSummaryBatchCardReport]...';


GO
-- ==================================================================================================================================================        
-- Name: USP_DOT_PickingListSummaryBatchCardReport      
-- Purpose: Summary Batch Card Report for Change Batch Card Inner    
-- ==================================================================================================================================================        
-- Change History        
-- Date   Author   Comments        
-- -----  ------   ------------------------------------------------------------      
-- 2021/10/26   Azrul    SP created.        
-- ==================================================================================================================================================       
-- exec USP_DOT_PickingListSummaryBatchCardReport '2211289819,2211290110,2210559670', '', '', '2021-01-01','2021-10-01','','',''    
-- exec USP_DOT_PickingListSummaryBatchCardReport '2211289819,2211290110,2210559670', '', '', '','','','',''    
-- exec USP_DOT_PickingListSummaryBatchCardReport '', '', 'ANSL 301/20', '','','','',''    
-- exec USP_DOT_PickingListSummaryBatchCardReport '', '', 'MEDU 806/21', '','','','',''    
-- exec USP_DOT_PickingListSummaryBatchCardReport '', '', '', '2021-07-01','2021-07-31','','',''    
-- exec USP_DOT_PickingListSummaryBatchCardReport '2211054090' , '' , '' , '', '', '', '', ''
-- exec USP_DOT_PickingListSummaryBatchCardReport '2211010114' , '' , '' , '', '', '', '', ''
-- ==================================================================================================================================================    
    
CREATE OR ALTER   PROCEDURE [dbo].[USP_DOT_PickingListSummaryBatchCardReport_test]      
(
@SerialNumber NVARCHAR(4000),    
@D365BatchNumber NVARCHAR(4000)='202112230004',    
@CustReferenceNumber NVARCHAR(4000),    
@PostingDateTimeFrom NVARCHAR(100),    
@PostingDateTimeTo NVARCHAR(100),    
@PlantNo NVARCHAR(4000),    
@Warehouse NVARCHAR(4000),    
@FunctionIdentifier NVARCHAR(4000)    
)    
    
AS    
BEGIN      
 -- SET NOCOUNT ON added to prevent extra result sets from        
 -- interfering with SELECT statements.        
 SET NOCOUNT ON;    
     
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL      
DROP TABLE #SerialNumbers     
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL      
DROP TABLE #D365BatchNumbers     
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL      
DROP TABLE #CustReferenceNumbers    
IF OBJECT_ID('tempdb..#TmpUnion') IS NOT NULL      
DROP TABLE #TmpUnion    
    
CREATE TABLE #SerialNumbers (SerialNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)    
CREATE TABLE #D365BatchNumbers (D365BatchNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)    
CREATE TABLE #CustReferenceNumbers (CustReferenceNumber NVARCHAR(4000))    
CREATE TABLE #tmpUnion (PostingDateTime DATETIME2,     
      SerialNumber NVARCHAR(50),     
      D365BatchNumber NVARCHAR(50),     
      BatchOrderNumber NVARCHAR(50),     
      MovementJournalNumber NVARCHAR(50),     
      TransferJournalNumber NVARCHAR(50),     
      PickingListJournalNumber NVARCHAR(50),     
      RouteCardJournalNumber NVARCHAR(50),     
      RAFJournalNumber NVARCHAR(50),     
      ItemNumber NVARCHAR(100),     
      Size NVARCHAR(10),     
      Warehouse NVARCHAR(10),     
      Location NVARCHAR(10),     
      TransitionQuantity DECIMAL (10, 4) DEFAULT 0000,     
      ReservedQuantity DECIMAL (10, 4),     
      BaseQuantity DECIMAL DEFAULT 0,     
      Sequence INT,     
      FunctionIdentifier NVARCHAR(50),    
      PlantNo NVARCHAR(10),    
      ReferenceBatchNumber1 NVARCHAR(50) DEFAULT NULL,     
      ReferenceBatchNumber2 NVARCHAR(50) DEFAULT NULL,     
      ReferenceBatchNumber3 NVARCHAR(50) DEFAULT NULL,     
      ReferenceBatchNumber4 NVARCHAR(50) DEFAULT NULL,     
      ReferenceBatchNumber5 NVARCHAR(50) DEFAULT NULL,    
      ReferenceBatchSequence1 INT DEFAULT 0,     
      ReferenceBatchSequence2 INT DEFAULT 0,     
      ReferenceBatchSequence3 INT DEFAULT 0,     
      ReferenceBatchSequence4 INT DEFAULT 0,     
      ReferenceBatchSequence5 INT DEFAULT 0,    
      RefNumberOfPieces1 DECIMAL DEFAULT 0,     
      RefNumberOfPieces2 DECIMAL DEFAULT 0,     
      RefNumberOfPieces3 DECIMAL DEFAULT 0,     
      RefNumberOfPieces4 DECIMAL DEFAULT 0,     
      RefNumberOfPieces5 DECIMAL DEFAULT 0,    
      RefItemNumber1 NVARCHAR(50) DEFAULT NULL,     
      RefItemNumber2 NVARCHAR(50) DEFAULT NULL,     
      RefItemNumber3 NVARCHAR(50) DEFAULT NULL,     
      RefItemNumber4 NVARCHAR(50) DEFAULT NULL,     
      RefItemNumber5 NVARCHAR(50) DEFAULT NULL,
	  CreationTime DATETIME2)    
    
IF (LEN(@SerialNumber) > 0)     
BEGIN    
 INSERT INTO #SerialNumbers     
 select * from dbo.SplitString(NULLIF(@SerialNumber, ','), ',')    
END    
ELSE IF (LEN(@D365BatchNumber) > 0)     
BEGIN    
 INSERT INTO #D365BatchNumbers     
 select * from dbo.SplitString(NULLIF(@D365BatchNumber, ''), ',')    
    
 INSERT INTO #SerialNumbers    
 select Distinct  
 case when isnull(a.BatchNumber,'')='' then isnull(b.BatchNumber,'')  
    else isnull(a.BatchNumber,'') end   
    --*  
 from DOT_FloorAxIntParentTable a with(nolock)   
 left join DOT_FGJournalTable b with(nolock) on a.Id=b.ParentRefRecId and b.IsDeleted=0  
 where   
  D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '') or   
  a.BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '')  
  
 and a.IsDeleted = 0  and IsMigratedFromAX6 = 0              
END    
Else IF (LEN(@CustReferenceNumber) > 0)     
BEGIN    
 INSERT INTO #CustReferenceNumbers     
 select * from dbo.SplitString(NULLIF(@CustReferenceNumber, ','), ',')    
    
 INSERT INTO #SerialNumbers    
 select Distinct BatchNumber from dbo.UFN_DOT_GetSNFromCustRefForSummaryBatchCardReport(@CustReferenceNumber)    
END    
    
DECLARE @TempPN TABLE (PlantNo VARCHAR(10))    
    
IF (LEN(@PlantNo) > 0)     
BEGIN    
 INSERT INTO @TempPN VALUES (@PlantNo)    
END    
    
ELSE    
BEGIN    
 INSERT INTO @TempPN select LocationName from LocationMaster    
END    
    
DECLARE @StartPostingDateTime DateTime = '2019-03-01'    
DECLARE @EndPostingDateTime DateTime = DATEADD(DAY,1,GetDate())    
DECLARE @SerialNoCount int    
SELECT @SerialNoCount = Count(1) from #SerialNumbers    
    
IF (@SerialNoCount > 0)    
BEGIN    
 --details: picking list    
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,    
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,    
 ReferenceBatchNumber1, ReferenceBatchNumber2, ReferenceBatchNumber3, ReferenceBatchSequence1, ReferenceBatchSequence2, ReferenceBatchSequence3,    
 RefNumberOfPieces1, RefNumberOfPieces2, RefNumberOfPieces3,CreationTime)    
    
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber, b.PSIReworkOrderNo as BatchOrderNumber,     
 '' as MovementJournalNumber, '' as TransferJournalNumber, ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_PickingSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and     
 FunctionIdentifier = a.FunctionIdentifier)) as PickListJournalNumber,      
 '' as RouteCardJournalNumber, '' as RAFJournalNumber, b.ItemNumber, b.Configuration as Size,    
 b.Warehouse, 'RWK' as Location,     
 b.OldBatchQty as TransitionQuantity,     
 NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,    
 a.ReferenceBatchNumber1, a.ReferenceBatchNumber2, a.ReferenceBatchNumber3,    
 a.ReferenceBatchSequence1, a.ReferenceBatchSequence2, a.ReferenceBatchSequence3,    
 b.RefNumberOfPieces1, b.RefNumberOfPieces2, b.RefNumberOfPieces3,a.CreationTime    
     
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_PickingList b with(nolock) on a.id = b.ParentRefRecId    
 where a.FunctionIdentifier in (case when LEN(@FunctionIdentifier) > 0 then @FunctionIdentifier else 'CBCI' end)    
 and a.BatchNumber IN (Select Distinct SerialNumber from #SerialNumbers where SerialNumber <> '')    
 and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0     
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end    
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end     
 and a.PlantNo in (SELECT * FROM @TempPN)   
 
 --details: picking list change glove 1(negative qty)    
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,    
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,    
 ReferenceBatchNumber1, ReferenceBatchNumber2, ReferenceBatchNumber3, ReferenceBatchSequence1, ReferenceBatchSequence2, ReferenceBatchSequence3,    
 RefNumberOfPieces1, RefNumberOfPieces2, RefNumberOfPieces3,CreationTime)    
    
 select b.PostingDateTime, a.ReferenceBatchNumber1, a.D365BatchNumber, b.PSIReworkOrderNo as BatchOrderNumber,     
 '' as MovementJournalNumber, '' as TransferJournalNumber, ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_PickingSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and     
 FunctionIdentifier = a.FunctionIdentifier)) as PickListJournalNumber,      
 '' as RouteCardJournalNumber, '' as RAFJournalNumber, b.ItemNumber, b.Configuration as Size,    
 dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber1,ReferenceBatchSequence1) ,    
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber1,ReferenceBatchSequence1) ,     
 b.RefNumberOfPieces1 * -1 as TransitionQuantity,     
 NULL as ReservedQuantity, a.Sequence + 1, a.FunctionIdentifier, a.PlantNo,    
 a.ReferenceBatchNumber1, a.ReferenceBatchNumber2, a.ReferenceBatchNumber3,    
 a.ReferenceBatchSequence1, a.ReferenceBatchSequence2, a.ReferenceBatchSequence3,    
 b.RefNumberOfPieces1, b.RefNumberOfPieces2, b.RefNumberOfPieces3,a.CreationTime    
     
 from DOT_FloorAxIntParentTable a with(nolock) 
 join DOT_PickingList b with(nolock) on a.id = b.ParentRefRecId 
 join #SerialNumbers sn on a.ReferenceBatchNumber1 = sn.SerialNumber
 where a.FunctionIdentifier in (case when LEN(@FunctionIdentifier) > 0 then @FunctionIdentifier else 'CBCI' end)    
 and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0     
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end    
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end     
 and a.PlantNo in (SELECT * FROM @TempPN)  
 and a.ReferenceBatchNumber1 is not null
 and a.ReferenceBatchNumber1 <>'RESAMPLE'


  --details: picking list change glove 2(negative qty)    
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,    
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,    
 ReferenceBatchNumber1, ReferenceBatchNumber2, ReferenceBatchNumber3, ReferenceBatchSequence1, ReferenceBatchSequence2, ReferenceBatchSequence3,    
 RefNumberOfPieces1, RefNumberOfPieces2, RefNumberOfPieces3,CreationTime)    
    
 select b.PostingDateTime, a.ReferenceBatchNumber2, a.D365BatchNumber, b.PSIReworkOrderNo as BatchOrderNumber,     
 '' as MovementJournalNumber, '' as TransferJournalNumber, ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_PickingSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and     
 FunctionIdentifier = a.FunctionIdentifier)) as PickListJournalNumber,      
 '' as RouteCardJournalNumber, '' as RAFJournalNumber, b.ItemNumber, b.Configuration as Size,    
 dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber2,ReferenceBatchSequence2) ,    
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber2,ReferenceBatchSequence2) ,     
 b.RefNumberOfPieces2 * -1 as TransitionQuantity,     
 NULL as ReservedQuantity, a.Sequence + 1, a.FunctionIdentifier, a.PlantNo,    
 a.ReferenceBatchNumber1, a.ReferenceBatchNumber2, a.ReferenceBatchNumber3,    
 a.ReferenceBatchSequence1, a.ReferenceBatchSequence2, a.ReferenceBatchSequence3,    
 b.RefNumberOfPieces1, b.RefNumberOfPieces2, b.RefNumberOfPieces3,a.CreationTime    
     
 from DOT_FloorAxIntParentTable a with(nolock) 
 join DOT_PickingList b with(nolock) on a.id = b.ParentRefRecId 
 join #SerialNumbers sn on a.ReferenceBatchNumber2 = sn.SerialNumber
 where a.FunctionIdentifier in (case when LEN(@FunctionIdentifier) > 0 then @FunctionIdentifier else 'CBCI' end)    
 and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0     
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end    
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end     
 and a.PlantNo in (SELECT * FROM @TempPN)  
 and a.ReferenceBatchNumber2 is not null 

  --details: picking list change glove 3(negative qty)    
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,    
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,    
 ReferenceBatchNumber1, ReferenceBatchNumber2, ReferenceBatchNumber3, ReferenceBatchSequence1, ReferenceBatchSequence2, ReferenceBatchSequence3,    
 RefNumberOfPieces1, RefNumberOfPieces2, RefNumberOfPieces3,CreationTime)    
    
 select b.PostingDateTime, a.ReferenceBatchNumber3, a.D365BatchNumber, b.PSIReworkOrderNo as BatchOrderNumber,     
 '' as MovementJournalNumber, '' as TransferJournalNumber, ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_PickingSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and     
 FunctionIdentifier = a.FunctionIdentifier)) as PickListJournalNumber,      
 '' as RouteCardJournalNumber, '' as RAFJournalNumber, b.ItemNumber, b.Configuration as Size,    
 dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber3,ReferenceBatchSequence3) ,    
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber3,ReferenceBatchSequence3) ,     
 b.RefNumberOfPieces3 * -1 as TransitionQuantity,     
 NULL as ReservedQuantity, a.Sequence + 1, a.FunctionIdentifier, a.PlantNo,    
 a.ReferenceBatchNumber1, a.ReferenceBatchNumber2, a.ReferenceBatchNumber3,    
 a.ReferenceBatchSequence1, a.ReferenceBatchSequence2, a.ReferenceBatchSequence3,    
 b.RefNumberOfPieces1, b.RefNumberOfPieces2, b.RefNumberOfPieces3,a.CreationTime    
     
 from DOT_FloorAxIntParentTable a with(nolock) 
 join DOT_PickingList b with(nolock) on a.id = b.ParentRefRecId 
 join #SerialNumbers sn on a.ReferenceBatchNumber3 = sn.SerialNumber
 where a.FunctionIdentifier in (case when LEN(@FunctionIdentifier) > 0 then @FunctionIdentifier else 'CBCI' end)    
 and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0     
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end    
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end     
 and a.PlantNo in (SELECT * FROM @TempPN) 
 and a.ReferenceBatchNumber3 is not null  

END    
ELSE    
BEGIN    
 --details: picking list    
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,    
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,    
 ReferenceBatchNumber1, ReferenceBatchNumber2, ReferenceBatchNumber3, ReferenceBatchSequence1, ReferenceBatchSequence2, ReferenceBatchSequence3,    
 RefNumberOfPieces1, RefNumberOfPieces2, RefNumberOfPieces3,CreationTime)    
    
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber, b.PSIReworkOrderNo as BatchOrderNumber,     
 '' as MovementJournalNumber, '' as TransferJournalNumber,     
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_PickingSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and     
 FunctionIdentifier = a.FunctionIdentifier)) as PickListJournalNumber,     
 '' as RouteCardJournalNumber, '' as RAFJournalNumber, b.ItemNumber, b.Configuration as Size,    
 b.Warehouse, 'RWK' as Location,     
 b.OldBatchQty as TransitionQuantity,     
 NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,    
 a.ReferenceBatchNumber1, a.ReferenceBatchNumber2, a.ReferenceBatchNumber3,    
 a.ReferenceBatchSequence1, a.ReferenceBatchSequence2, a.ReferenceBatchSequence3,    
 b.RefNumberOfPieces1, b.RefNumberOfPieces2, b.RefNumberOfPieces3,a.CreationTime    
     
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_PickingList b with(nolock) on a.id = b.ParentRefRecId    
 where a.FunctionIdentifier in (case when LEN(@FunctionIdentifier) > 0 then @FunctionIdentifier else 'CBCI' end)    
 and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0     
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end    
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end     
 and a.PlantNo in (SELECT * FROM @TempPN)   
     
--details: picking list change SN 1    
INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,    
ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,CreationTime)    
    
select PostingDateTime, ReferenceBatchNumber1 as SerialNumber,     
dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard(ReferenceBatchNumber1) as D365BatchNumber,     
dbo.UFN_DOT_GetBOForSummaryBatchCard(ReferenceBatchNumber1) as BatchOrderNumber,     
MovementJournalNumber, TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size,    
dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber1,ReferenceBatchSequence1) as Warehouse,    
dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber1,ReferenceBatchSequence1) as Location,     
RefNumberOfPieces1 * -1 as TransitionQuantity, ReservedQuantity, Sequence + 1 as Sequence, FunctionIdentifier, PlantNo,CreationTime    
from #tmpUnion where ReferenceBatchNumber1 is not null    
    
--details: picking list change SN 2    
INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,    
ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,CreationTime)    
    
select PostingDateTime, ReferenceBatchNumber2 as SerialNumber,     
dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard(ReferenceBatchNumber2) as D365BatchNumber,     
dbo.UFN_DOT_GetBOForSummaryBatchCard(ReferenceBatchNumber2) as BatchOrderNumber,     
MovementJournalNumber, TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size,    
dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber2,ReferenceBatchSequence2) as Warehouse,    
dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber2,ReferenceBatchSequence2) as Location,     
RefNumberOfPieces2 * -1 as TransitionQuantity, ReservedQuantity, Sequence + 1 as Sequence, FunctionIdentifier,PlantNo,CreationTime    
from #tmpUnion where ReferenceBatchNumber2 is not null    
    
--details: picking list change SN 3    
INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,    
ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,CreationTime)    
    
select PostingDateTime, ReferenceBatchNumber3 as SerialNumber,     
dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard(ReferenceBatchNumber3) as D365BatchNumber,     
dbo.UFN_DOT_GetBOForSummaryBatchCard(ReferenceBatchNumber3) as BatchOrderNumber,     
MovementJournalNumber, TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size,    
dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber3,ReferenceBatchSequence3) as Warehouse,    
dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber3,ReferenceBatchSequence3) as Location,     
RefNumberOfPieces3 * -1 as TransitionQuantity, ReservedQuantity, Sequence + 1 as Sequence, FunctionIdentifier, PlantNo,CreationTime    
from #tmpUnion where ReferenceBatchNumber3 is not null   

END    
 
--add opening balance
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,    
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,    
 ReferenceBatchNumber1, ReferenceBatchNumber2, ReferenceBatchNumber3, ReferenceBatchSequence1, ReferenceBatchSequence2, ReferenceBatchSequence3,    
 RefNumberOfPieces1, RefNumberOfPieces2, RefNumberOfPieces3,CreationTime)    
SELECT 
	case when b.LastModificationTime is null then b.CreationTime else b.LastModificationTime end ,b.BatchCardNum   as SerialNumber, a.D365BatchNumber ,'',a.JournalId,
	'','','','',
	a.ItemNumber,'',a.Warehouse ,a.Location ,b.Quantity as TransitionQuantity,0 ,0, 'OpeningUpload' as FunctionIdentifier, '',
    '','', '', 0,0, 0,   
     0,0, 0 , null
FROM DOT_InventAdjustmentSumTable a right join DOT_InventAdjustmentSumTableDetails b on a.InventTransId = b.InventTransId
where 
	(a.D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers) or 
	b.BatchCardNum in (select SerialNumber from #SerialNumbers) )
	and a.BatchNumber = 'OpeningUpload'

Select a.PlantNo, a.FunctionIdentifier, a.PostingDateTime, a.SerialNumber, a.D365BatchNumber, a.BatchOrderNumber, a.MovementJournalNumber,     
a.TransferJournalNumber, a.PickingListJournalNumber as PickingListJournalNumber, a.RouteCardJournalNumber, a.RAFJournalNumber, a.ItemNumber, a.Size, a.Warehouse,a.Location,    
 -- hide qty if not complete posting without journal id come back from d365
case when FunctionIdentifier = 'OpeningUpload' then a.TransitionQuantity when ISNULL(a.PickingListJournalNumber,'')='' then 0.0 else CONVERT(DECIMAL (18, 4),a.TransitionQuantity) end as TransitionQuantity, 
CONVERT(DECIMAL (10, 4),a.ReservedQuantity) as ReservedQuantity,CreationTime    
from #tmpUnion a    
WHERE Warehouse LIKE (case when LEN(@Warehouse) > 0 then @Warehouse  else '%' end)      
    
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL      
DROP TABLE #SerialNumbers     
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL      
DROP TABLE #D365BatchNumbers     
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL      
DROP TABLE #CustReferenceNumbers    
IF OBJECT_ID('tempdb..#TmpUnion') IS NOT NULL      
DROP TABLE #TmpUnion    
    
END
GO
PRINT N'Altering Procedure [dbo].[USP_DOT_ReworkSummaryBatchCardReport]...';


GO
-- ==================================================================================================================================================        
-- Name: USP_DOT_ReworkSummaryBatchCardReport      
-- Purpose: Summary Batch Card Report for Rework Order (RWKCR/RWKDEL)    
-- ==================================================================================================================================================        
-- Change History        
-- Date   Author   Comments        
-- -----  ------   ------------------------------------------------------------      
-- 2021/10/26   Azrul    SP created.        
-- ==================================================================================================================================================       
-- exec USP_DOT_ReworkSummaryBatchCardReport '2211289819,2211290110,2210559670', '', '', '2021-01-01','2021-10-01','','',''    
-- exec USP_DOT_ReworkSummaryBatchCardReport '2211290123', '', '', '','','','',''    
-- exec USP_DOT_ReworkSummaryBatchCardReport '2211290124', '', '', '','','','',''    
-- exec USP_DOT_ReworkSummaryBatchCardReport '2211290126', '', '', '','','','',''    
-- exec USP_DOT_ReworkSummaryBatchCardReport '2211290110', '', '', '','','','',''    
-- exec USP_DOT_ReworkSummaryBatchCardReport '', '', 'ANSL 301/20', '','','','',''    
-- exec USP_DOT_ReworkSummaryBatchCardReport '', '', 'MEDU 806/21', '','','','',''    
-- exec USP_DOT_ReworkSummaryBatchCardReport '', '', '', '2021-08-01','2021-08-02','','',''    
-- exec USP_DOT_ReworkSummaryBatchCardReport '2211010114', '', '', '','','','',''    
-- ==================================================================================================================================================    
    
CREATE OR ALTER   PROCEDURE USP_DOT_ReworkSummaryBatchCardReport      
(    
@SerialNumber NVARCHAR(4000),    
@D365BatchNumber NVARCHAR(4000),    
@CustReferenceNumber NVARCHAR(4000),    
@PostingDateTimeFrom NVARCHAR(100),    
@PostingDateTimeTo NVARCHAR(100),    
@PlantNo NVARCHAR(4000),    
@Warehouse NVARCHAR(4000),    
@FunctionIdentifier NVARCHAR(4000)    
)    
    
AS    
BEGIN      
 -- SET NOCOUNT ON added to prevent extra result sets from        
 -- interfering with SELECT statements.        
 SET NOCOUNT ON;    
    
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL      
DROP TABLE #SerialNumbers     
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL      
DROP TABLE #D365BatchNumbers     
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL      
DROP TABLE #CustReferenceNumbers    
IF OBJECT_ID('tempdb..#TmpUnion') IS NOT NULL      
DROP TABLE #TmpUnion    
    
CREATE TABLE #SerialNumbers (SerialNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)    
CREATE TABLE #D365BatchNumbers (D365BatchNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)    
CREATE TABLE #CustReferenceNumbers (CustReferenceNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)     
CREATE TABLE #tmpUnion (PostingDateTime DATETIME2,     
      SerialNumber NVARCHAR(50),     
      D365BatchNumber NVARCHAR(50),     
      BatchOrderNumber NVARCHAR(50),     
      MovementJournalNumber NVARCHAR(50),     
      TransferJournalNumber NVARCHAR(50),     
      PickListJournalNumber NVARCHAR(50),     
      RouteCardJournalNumber NVARCHAR(50),     
      RAFJournalNumber NVARCHAR(50),     
      ItemNumber NVARCHAR(100),     
      Size NVARCHAR(10),     
      Warehouse NVARCHAR(10),     
      Location NVARCHAR(10),     
      TransitionQuantity DECIMAL (18, 4) DEFAULT 0.0000,     
      ReservedQuantity DECIMAL (18, 4),     
      BaseQuantity DECIMAL DEFAULT 0,     
      Sequence INT,     
      FunctionIdentifier NVARCHAR(50),    
      PlantNo NVARCHAR(10),    
      ReferenceBatchNumber1 NVARCHAR(50) DEFAULT NULL,     
      ReferenceBatchNumber2 NVARCHAR(50) DEFAULT NULL,     
      ReferenceBatchNumber3 NVARCHAR(50) DEFAULT NULL,     
      ReferenceBatchNumber4 NVARCHAR(50) DEFAULT NULL,     
      ReferenceBatchNumber5 NVARCHAR(50) DEFAULT NULL,    
      ReferenceBatchSequence1 INT DEFAULT 0,     
      ReferenceBatchSequence2 INT DEFAULT 0,     
      ReferenceBatchSequence3 INT DEFAULT 0,     
      ReferenceBatchSequence4 INT DEFAULT 0,     
      ReferenceBatchSequence5 INT DEFAULT 0,    
      RefNumberOfPieces1 DECIMAL DEFAULT 0,     
      RefNumberOfPieces2 DECIMAL DEFAULT 0,     
      RefNumberOfPieces3 DECIMAL DEFAULT 0,     
      RefNumberOfPieces4 DECIMAL DEFAULT 0,     
      RefNumberOfPieces5 DECIMAL DEFAULT 0,    
      RefItemNumber1 NVARCHAR(50) DEFAULT NULL,     
      RefItemNumber2 NVARCHAR(50) DEFAULT NULL,     
      RefItemNumber3 NVARCHAR(50) DEFAULT NULL,     
      RefItemNumber4 NVARCHAR(50) DEFAULT NULL,     
      RefItemNumber5 NVARCHAR(50) DEFAULT NULL,
	  CreationTime DATETIME2)    
    
IF (LEN(@SerialNumber) > 0)     
BEGIN    
 INSERT INTO #SerialNumbers     
 select * from dbo.SplitString(NULLIF(@SerialNumber, ','), ',')    
END    
ELSE IF (LEN(@D365BatchNumber) > 0)     
BEGIN    
 INSERT INTO #D365BatchNumbers     
 select * from dbo.SplitString(NULLIF(@D365BatchNumber, ''), ',')    
    
 INSERT INTO #SerialNumbers    
 select   
 case when isnull(a.BatchNumber,'')='' then isnull(b.BatchNumber,'')  
    else isnull(a.BatchNumber,'') end   
    --*  
 from DOT_FloorAxIntParentTable a with(nolock)   
 left join DOT_FGJournalTable b with(nolock) on a.Id=b.ParentRefRecId and b.IsDeleted=0  
 where   
  D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '') or   
  a.BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '')  
  
 and a.IsDeleted = 0  and IsMigratedFromAX6 = 0        
END    
Else IF (LEN(@CustReferenceNumber) > 0)     
BEGIN    
 INSERT INTO #CustReferenceNumbers     
 select * from dbo.SplitString(NULLIF(@CustReferenceNumber, ','), ',')    
    
 INSERT INTO #SerialNumbers    
 select BatchNumber from dbo.UFN_DOT_GetSNFromCustRefForSummaryBatchCardReport(@CustReferenceNumber)    
END    
    
DECLARE @TempPN TABLE (PlantNo VARCHAR(10))    
    
IF (LEN(@PlantNo) > 0)     
BEGIN    
 INSERT INTO @TempPN VALUES (@PlantNo)    
END    
    
ELSE    
BEGIN    
 INSERT INTO @TempPN select LocationName from LocationMaster    
END    
    
DECLARE @StartPostingDateTime DateTime = '2019-03-01'    
DECLARE @EndPostingDateTime DateTime = DATEADD(DAY,1,GetDate())    
DECLARE @SerialNoCount int    
SELECT @SerialNoCount = Count(1) from #SerialNumbers    
    
IF (@SerialNoCount > 0)    
BEGIN    
 --details: rework Reserved    
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,     
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,CreationTime)    
    
 select b.PostingDateandTime as PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,     
 ISNULL(b.ReworkOrder, (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch    
 '' as MovementJournalNumber, '' as TransferJournalNumber,     
 '' as PickListJournalNumber, '' as RouteCardJournalNumber, '' as RAFJournalNumber,    
 b.ItemNumber, b.Configuration as Size,    
 b.Warehouse, ISNULL(dbo.UFN_DOT_GetLocationForSummaryBatchCard(a.BatchNumber,a.Sequence),Replace(b.RouteCategory,'O','')) as Location,     
 NULL as TransitionQuantity, b.Quantity * -1 as ReservedQuantity,     
 a.Sequence, a.FunctionIdentifier, a.PlantNo,a.CreationTime   
 from DOT_FloorAxIntParentTable a with(nolock)     
 join DOT_RwkBatchOrderCreationChildTable b with(nolock) on a.id = b.ParentRefRecId    
 where (a.FunctionIdentifier in (case when LEN(@FunctionIdentifier) > 0 then @FunctionIdentifier else 'RWKCR' end)    
 or a.FunctionIdentifier in (case when LEN(@FunctionIdentifier) > 0 then @FunctionIdentifier else 'RWKDEL' end))    
 and a.BatchNumber IN (Select Distinct SerialNumber from #SerialNumbers where SerialNumber <> '')    
 and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0     
 and b.PostingDateandTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end    
 and b.PostingDateandTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end    
 and PlantNo in (SELECT * FROM @TempPN)    
END    
ELSE    
BEGIN    
 --details: rework Reserved    
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,     
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,CreationTime)    
    
 select b.PostingDateandTime as PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,
 ISNULL(b.ReworkOrder, (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch      
 '' as MovementJournalNumber, '' as TransferJournalNumber,     
 '' as PickListJournalNumber, '' as RouteCardJournalNumber, '' as RAFJournalNumber,    
 b.ItemNumber, b.Configuration as Size,    
 b.Warehouse, ISNULL(dbo.UFN_DOT_GetLocationForSummaryBatchCard(a.BatchNumber,a.Sequence),Replace(b.RouteCategory,'O','')) as Location,     
 NULL as TransitionQuantity, b.Quantity * -1 as ReservedQuantity,     
 a.Sequence, a.FunctionIdentifier, a.PlantNo,a.CreationTime    
 from DOT_FloorAxIntParentTable a with(nolock)     
 join DOT_RwkBatchOrderCreationChildTable b with(nolock) on a.id = b.ParentRefRecId    
 where (a.FunctionIdentifier in (case when LEN(@FunctionIdentifier) > 0 then @FunctionIdentifier else 'RWKCR' end)    
 or a.FunctionIdentifier in (case when LEN(@FunctionIdentifier) > 0 then @FunctionIdentifier else 'RWKDEL' end))    
 and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0     
 and b.PostingDateandTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end    
 and b.PostingDateandTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end    
 and PlantNo in (SELECT * FROM @TempPN)    
END    
    
Select a.PlantNo, a.FunctionIdentifier, a.PostingDateTime, a.SerialNumber, a.D365BatchNumber, a.BatchOrderNumber, a.MovementJournalNumber,     
a.TransferJournalNumber, PickListJournalNumber as PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,    
a.ItemNumber, a.Size, a.Warehouse,a.Location,    
CONVERT(DECIMAL (10, 4),a.TransitionQuantity) as TransitionQuantity, 
case when ISNULL(a.BatchOrderNumber,'')='' then 0.0 else CONVERT(DECIMAL (10, 4),a.ReservedQuantity) end as ReservedQuantity,CreationTime      
from #tmpUnion a    
WHERE Warehouse LIKE (case when LEN(@Warehouse) > 0 then @Warehouse  else '%' end)    
    
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL      
DROP TABLE #SerialNumbers     
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL      
DROP TABLE #D365BatchNumbers     
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL      
DROP TABLE #CustReferenceNumbers    
IF OBJECT_ID('tempdb..#TmpUnion') IS NOT NULL      
DROP TABLE #TmpUnion    
    
END
GO
PRINT N'Altering Procedure [dbo].[USP_DOT_SecondGradeSummaryBatchCardReport]...';


GO
-- ==================================================================================================================================================      
-- Name: USP_DOT_SecondGradeSummaryBatchCardReport    
-- Purpose: Summary Batch Card Report for Second Grade Batch (SOBC)   
-- ==================================================================================================================================================      
-- Change History      
-- Date   Author   Comments      
-- -----  ------   ------------------------------------------------------------    
-- 2021/10/26   Azrul    SP created.      
-- ==================================================================================================================================================     
-- exec USP_DOT_SecondGradeSummaryBatchCardReport '2211289819,2211290110,2210559670', '', '', '2021-01-01','2021-10-01','','',''  
-- exec USP_DOT_SecondGradeSummaryBatchCardReport '2211290123', '', '', '','','','',''  
-- exec USP_DOT_SecondGradeSummaryBatchCardReport '', '', 'ANSL 301/20', '','','','',''  
-- exec USP_DOT_SecondGradeSummaryBatchCardReport '', '', 'MEDU 806/21', '','','','',''  
-- exec USP_DOT_SecondGradeSummaryBatchCardReport '', '', '', '2021-08-01','2021-08-31','','',''  
-- ==================================================================================================================================================  
  
CREATE OR ALTER   PROCEDURE [dbo].[USP_DOT_SecondGradeSummaryBatchCardReport]    
(  
@SerialNumber NVARCHAR(4000),  
@D365BatchNumber NVARCHAR(4000),  
@CustReferenceNumber NVARCHAR(4000),  
@PostingDateTimeFrom NVARCHAR(100),  
@PostingDateTimeTo NVARCHAR(100),  
@PlantNo NVARCHAR(4000),  
@Warehouse NVARCHAR(4000),  
@FunctionIdentifier NVARCHAR(4000)  
)  
  
AS  
BEGIN    
 -- SET NOCOUNT ON added to prevent extra result sets from      
 -- interfering with SELECT statements.      
 SET NOCOUNT ON;  
   
IF OBJECT_ID('tempdb..#FunctionIdentifiers') IS NOT NULL    
DROP TABLE #FunctionIdentifiers   
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL    
DROP TABLE #SerialNumbers   
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL    
DROP TABLE #D365BatchNumbers   
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL    
DROP TABLE #CustReferenceNumbers  
IF OBJECT_ID('tempdb..#TmpUnion') IS NOT NULL    
DROP TABLE #TmpUnion  
  
CREATE TABLE #FunctionIdentifiers (Identifier NVARCHAR(20) COLLATE DATABASE_DEFAULT)  
CREATE TABLE #SerialNumbers (SerialNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)  
CREATE TABLE #D365BatchNumbers (D365BatchNumber NVARCHAR(4000)  COLLATE DATABASE_DEFAULT)  
CREATE TABLE #CustReferenceNumbers (CustReferenceNumber NVARCHAR(4000))  
CREATE TABLE #tmpUnion (PostingDateTime DATETIME2,   
      SerialNumber NVARCHAR(50)  COLLATE DATABASE_DEFAULT,   
      D365BatchNumber NVARCHAR(50)  COLLATE DATABASE_DEFAULT,   
      BatchOrderNumber NVARCHAR(50)  COLLATE DATABASE_DEFAULT,   
      MovementJournalNumber NVARCHAR(50)  COLLATE DATABASE_DEFAULT,   
      TransferJournalNumber NVARCHAR(50)  COLLATE DATABASE_DEFAULT,   
      PickListJournalNumber NVARCHAR(50)  COLLATE DATABASE_DEFAULT,   
      RouteCardJournalNumber NVARCHAR(50)  COLLATE DATABASE_DEFAULT,   
      RAFJournalNumber NVARCHAR(50)  COLLATE DATABASE_DEFAULT,   
      ItemNumber NVARCHAR(100)  COLLATE DATABASE_DEFAULT,   
      Size NVARCHAR(10)  COLLATE DATABASE_DEFAULT,   
      Warehouse NVARCHAR(10)  COLLATE DATABASE_DEFAULT,   
      Location NVARCHAR(10)  COLLATE DATABASE_DEFAULT,   
      TransitionQuantity DECIMAL (18, 4) DEFAULT 0.0000,   
      ReservedQuantity DECIMAL (18, 4),   
      BaseQuantity DECIMAL DEFAULT 0,   
      Sequence INT,   
      FunctionIdentifier NVARCHAR(50)  COLLATE DATABASE_DEFAULT,  
      PlantNo NVARCHAR(10)  COLLATE DATABASE_DEFAULT,  
      ReferenceBatchNumber1 NVARCHAR(50)  COLLATE DATABASE_DEFAULT DEFAULT NULL,   
      ReferenceBatchNumber2 NVARCHAR(50)  COLLATE DATABASE_DEFAULT DEFAULT NULL,   
      ReferenceBatchNumber3 NVARCHAR(50)  COLLATE DATABASE_DEFAULT DEFAULT NULL,   
      ReferenceBatchNumber4 NVARCHAR(50)  COLLATE DATABASE_DEFAULT DEFAULT NULL,   
      ReferenceBatchNumber5 NVARCHAR(50)  COLLATE DATABASE_DEFAULT DEFAULT NULL,  
      ReferenceBatchSequence1 INT DEFAULT 0,   
      ReferenceBatchSequence2 INT DEFAULT 0,   
      ReferenceBatchSequence3 INT DEFAULT 0,   
      ReferenceBatchSequence4 INT DEFAULT 0,   
      ReferenceBatchSequence5 INT DEFAULT 0,  
      RefNumberOfPieces1 DECIMAL DEFAULT 0,   
      RefNumberOfPieces2 DECIMAL DEFAULT 0,   
      RefNumberOfPieces3 DECIMAL DEFAULT 0,   
      RefNumberOfPieces4 DECIMAL DEFAULT 0,   
      RefNumberOfPieces5 DECIMAL DEFAULT 0,  
      RefItemNumber1 NVARCHAR(50)  COLLATE DATABASE_DEFAULT DEFAULT NULL,   
      RefItemNumber2 NVARCHAR(50)  COLLATE DATABASE_DEFAULT DEFAULT NULL,   
      RefItemNumber3 NVARCHAR(50)  COLLATE DATABASE_DEFAULT DEFAULT NULL,   
      RefItemNumber4 NVARCHAR(50)  COLLATE DATABASE_DEFAULT DEFAULT NULL,   
      RefItemNumber5 NVARCHAR(50)  COLLATE DATABASE_DEFAULT DEFAULT NULL,
      TransactionType NVARCHAR(150)  COLLATE DATABASE_DEFAULT DEFAULT '',
	  CreationTime DATETIME2)  
  
IF (LEN(@SerialNumber) > 0)   
BEGIN  
 INSERT INTO #SerialNumbers   
 select * from dbo.SplitString(NULLIF(@SerialNumber, ','), ',')  
END  
ELSE IF (LEN(@D365BatchNumber) > 0)   
BEGIN  
 INSERT INTO #D365BatchNumbers     
 select * from dbo.SplitString(NULLIF(@D365BatchNumber, ''), ',')    
    
 INSERT INTO #SerialNumbers    
 select   
 case when isnull(a.BatchNumber,'')='' then isnull(b.BatchNumber,'')  
    else isnull(a.BatchNumber,'') end   
    --*  
 from DOT_FloorAxIntParentTable a with(nolock)   
 left join DOT_FGJournalTable b with(nolock) on a.Id=b.ParentRefRecId and b.IsDeleted=0  
 where   
  D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '') or   
  a.BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '')  
  
 and a.IsDeleted = 0  --and IsMigratedFromAX6 = 0     
END  
Else IF (LEN(@CustReferenceNumber) > 0)   
BEGIN  
 INSERT INTO #CustReferenceNumbers   
 select * from dbo.SplitString(NULLIF(@CustReferenceNumber, ','), ',')  
  
 INSERT INTO #SerialNumbers  
 select BatchNumber from dbo.UFN_DOT_GetSNFromCustRefForSummaryBatchCardReport(@CustReferenceNumber)  
END  
  
DECLARE @TempPN TABLE (PlantNo VARCHAR(10))  
  
IF (LEN(@PlantNo) > 0)   
BEGIN  
 INSERT INTO @TempPN VALUES (@PlantNo)  
END  
  
ELSE  
BEGIN  
 INSERT INTO @TempPN select LocationName from LocationMaster  
END  
  
IF(LEN(@FunctionIdentifier) > 0)  
BEGIN  
 INSERT INTO #FunctionIdentifiers  
 select * from dbo.SplitString(NULLIF(@FunctionIdentifier, ','), ',')  
END  
ELSE  
BEGIN  
 INSERT INTO #FunctionIdentifiers   
 SELECT ('SOBC')  
END  
  
DECLARE @StartPostingDateTime DateTime = '2019-03-01'  
DECLARE @EndPostingDateTime DateTime = DATEADD(DAY,1,GetDate())  
DECLARE @SerialNoCount int  
SELECT @SerialNoCount = Count(1) from #SerialNumbers  
  
  
IF (@SerialNoCount > 0)  
BEGIN  
 --header SOBC  
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,   
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,TransactionType,CreationTime)  
  
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,   
 ISNULL(NULLIF(b.BatchOrderNumber,''), (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch  
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as MovementJournalNumber, --for consolidation batch  
 '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as PickListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RAFJournalNumber, --for consolidation batch  
   
 b.ItemNumber, b.Configuration as Size,  
 dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(a.BatchNumber, a.Sequence-1) as Watehouse,   
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(a.BatchNumber, a.Sequence-1) as Location,   
 (b.RAFGoodQty+b.RejectedQuantity+b.RejectedSampleQuantity+b.SecondGradeQuantity)*-1 as TransitionQuantity, null as ReservedQuantity,   
 --b.RAFGoodQty*-1 as TransitionQuantity, NULL as ReservedQuantity,   
 a.Sequence, a.FunctionIdentifier, a.PlantNo,'Pick',a.CreationTime  
 from DOT_FloorAxIntParentTable a with(nolock) 
 join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId 
 where a.FunctionIdentifier in (SELECT Identifier from #FunctionIdentifiers)  
 and a.BatchNumber IN (Select Distinct SerialNumber from #SerialNumbers where SerialNumber <> '')  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0    
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end   
 and a.PlantNo in (SELECT * FROM @TempPN)  
 -----------------------------------------------------------------------  
 --details: RAF SOBC  
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,   
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,TransactionType,CreationTime)  
  
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,   
 ISNULL(NULLIF(b.BatchOrderNumber,''), (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch  
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as MovementJournalNumber, --for consolidation batch  
 '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as PickListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RAFJournalNumber, --for consolidation batch  
  
 b.ItemNumber, b.Configuration as Size,  
 b.Warehouse, b.Location, b.RAFGoodQty as TransitionQuantity, 0 as ReservedQuantity,   
 a.Sequence, a.FunctionIdentifier, a.PlantNo,'RAF',a.CreationTime  
 from DOT_FloorAxIntParentTable a with(nolock) 
 join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId
 where a.FunctionIdentifier in (SELECT Identifier from #FunctionIdentifiers)  
 and a.BatchNumber IN (Select Distinct SerialNumber from #SerialNumbers where SerialNumber <> '')  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0   
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end   
 and a.PlantNo in (SELECT * FROM @TempPN)  
 ----------------------------------------------------------------------- 
 --details: Rejected SOBC(negative -- reduce glove)  
 -----------------------------------------------------------------------
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,   
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,TransactionType,CreationTime)  
  
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,   
 ISNULL(NULLIF(b.BatchOrderNumber,''), (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch  
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as MovementJournalNumber, --for consolidation batch  
 '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as PickListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RAFJournalNumber, --for consolidation batch  
  
 b.ItemNumber, b.Configuration as Size,  
 b.Warehouse, b.Location, b.RejectedQuantity * -1 as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,'(Rejected)',a.CreationTime  
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId  
 where a.FunctionIdentifier in (SELECT Identifier from #FunctionIdentifiers) and b.RejectedQuantity > 0  
 and a.BatchNumber IN (Select Distinct SerialNumber from #SerialNumbers where SerialNumber <> '')  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0   
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end   
 and PlantNo in (SELECT * FROM @TempPN)  

 --------------------------------------------------------------------
  --details: Rejected SOBC(prositive -- increase Rejected glove) 
 --------------------------------------------------------------------
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,   
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,TransactionType,CreationTime)  
  
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,   
 ISNULL(NULLIF(b.BatchOrderNumber,''), (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch  
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as MovementJournalNumber, --for consolidation batch  
 '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as PickListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RAFJournalNumber, --for consolidation batch  
  
 b.ItemNumber, b.Configuration as Size,  
 b.Warehouse, b.Location, b.RejectedQuantity as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,'(Rejected)',a.CreationTime  
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId  
 where a.FunctionIdentifier in (SELECT Identifier from #FunctionIdentifiers) and b.RejectedQuantity > 0  
 and a.BatchNumber IN (Select Distinct SerialNumber from #SerialNumbers where SerialNumber <> '')  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0   
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end   
 and PlantNo in (SELECT * FROM @TempPN)  
 --------------------------------------------------------------------
 --details: Rejected Sample SOBC(negative -- reduce glove)
 --------------------------------------------------------------------
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,   
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,TransactionType,CreationTime)  
  
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,   
 ISNULL(NULLIF(b.BatchOrderNumber,''), (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch  
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as MovementJournalNumber, --for consolidation batch  
 '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as PickListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RAFJournalNumber, --for consolidation batch  
  
 b.ItemNumber, b.Configuration as Size,  
 b.Warehouse, b.Location, b.RejectedSampleQuantity * -1 as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,'(Rejected Sample)',a.CreationTime
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId  
 where a.FunctionIdentifier in (SELECT Identifier from #FunctionIdentifiers) and b.RejectedSampleQuantity > 0  
 and a.BatchNumber IN (Select Distinct SerialNumber from #SerialNumbers where SerialNumber <> '')  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0   
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end   
 and PlantNo in (SELECT * FROM @TempPN)  

 -----------------------------------------------------------------------
 --details: Rejected Sample SOBC(prositive -- increase Rejected Sample)
 -----------------------------------------------------------------------
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,   
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,TransactionType,CreationTime)  
  
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,   
 ISNULL(NULLIF(b.BatchOrderNumber,''), (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch  
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as MovementJournalNumber, --for consolidation batch  
 '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as PickListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RAFJournalNumber, --for consolidation batch  
  
 b.ItemNumber, b.Configuration as Size,  
 b.Warehouse, b.Location, b.RejectedSampleQuantity as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,'(Rejected Sample)',a.CreationTime
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId  
 where a.FunctionIdentifier in (SELECT Identifier from #FunctionIdentifiers) and b.RejectedSampleQuantity > 0  
 and a.BatchNumber IN (Select Distinct SerialNumber from #SerialNumbers where SerialNumber <> '')  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0   
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end   
 and PlantNo in (SELECT * FROM @TempPN)  

 --------------------------------------------------------------------  
 --details: 2nd grade SOBC(negative -- reduce glove)
 --------------------------------------------------------------------
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,   
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,TransactionType,CreationTime)  
  
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,   
 ISNULL(NULLIF(b.BatchOrderNumber,''), (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch  
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as MovementJournalNumber, --for consolidation batch  
 '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as PickListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RAFJournalNumber, --for consolidation batch  
  
 b.ItemNumber, b.Configuration as Size,  
 b.Warehouse, b.Location, b.SecondGradeQuantity * -1 as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier,a.PlantNo,'(2G)',a.CreationTime
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId  
 where a.FunctionIdentifier in (SELECT Identifier from #FunctionIdentifiers) and b.SecondGradeQuantity > 0  
 and a.BatchNumber IN (Select Distinct SerialNumber from #SerialNumbers where SerialNumber <> '')  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0   
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end   
 and PlantNo in (SELECT * FROM @TempPN)  

 --------------------------------------------------------------------  
 --details: 2nd grade SOBC(prositive -- increase 2G glove) 
 --------------------------------------------------------------------
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,   
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,TransactionType,CreationTime)  
  
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,   
 ISNULL(NULLIF(b.BatchOrderNumber,''), (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch  
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as MovementJournalNumber, --for consolidation batch  
 '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as PickListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RAFJournalNumber, --for consolidation batch  
  
 b.ItemNumber, b.Configuration as Size,  
 b.Warehouse, b.Location, b.SecondGradeQuantity as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier,a.PlantNo,'(2G)',a.CreationTime
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId  
 where a.FunctionIdentifier in (SELECT Identifier from #FunctionIdentifiers) and b.SecondGradeQuantity > 0  
 and a.BatchNumber IN (Select Distinct SerialNumber from #SerialNumbers where SerialNumber <> '')  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0   
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end   
 and PlantNo in (SELECT * FROM @TempPN)  
END  
ELSE  
BEGIN  
 --header SOBC  
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,   
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,TransactionType,CreationTime)  
  
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,   
 ISNULL(NULLIF(b.BatchOrderNumber,''), (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch  
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as MovementJournalNumber, --for consolidation batch  
 '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as PickListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RAFJournalNumber, --for consolidation batch  
  
 b.ItemNumber, b.Configuration as Size,  
 dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(a.BatchNumber, a.Sequence-1) as Watehouse,   
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(a.BatchNumber, a.Sequence-1) as Location,   
 (b.RAFGoodQty+b.RejectedQuantity+b.RejectedSampleQuantity+b.SecondGradeQuantity)*-1 as TransitionQuantity, NULL as ReservedQuantity,   
 --b.RAFGoodQty*-1 as TransitionQuantity, NULL as ReservedQuantity,   
 a.Sequence, a.FunctionIdentifier, a.PlantNo,'Pick',a.CreationTime  
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId  
 where a.FunctionIdentifier in (SELECT Identifier from #FunctionIdentifiers)  
 and a.BatchNumber IN (Select Distinct SerialNumber from #SerialNumbers where SerialNumber <> '')  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0   
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end   
 and PlantNo in (SELECT * FROM @TempPN)  
 -------------------------------------------------------------------- 
 --details: RAF SOBC  
 --------------------------------------------------------------------
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,   
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,TransactionType,CreationTime)  
  
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,   
 ISNULL(NULLIF(b.BatchOrderNumber,''), (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch  
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as MovementJournalNumber, --for consolidation batch  
 '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as PickListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RAFJournalNumber, --for consolidation batch  
  
 b.ItemNumber, b.Configuration as Size,  
 b.Warehouse, b.Location, b.RAFGoodQty as TransitionQuantity, NULL as ReservedQuantity,   
 a.Sequence, a.FunctionIdentifier,a.PlantNo,'RAF',a.CreationTime
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId  
 where a.FunctionIdentifier in (SELECT Identifier from #FunctionIdentifiers)  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0  
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end   
 and PlantNo in (SELECT * FROM @TempPN)  

 --------------------------------------------------------------------
 --details: Rejected SOBC(negative -- reduce glove)  
 --------------------------------------------------------------------
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,   
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,TransactionType,CreationTime)  
  
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,   
 ISNULL(NULLIF(b.BatchOrderNumber,''), (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch  
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as MovementJournalNumber, --for consolidation batch  
 '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as PickListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RAFJournalNumber, --for consolidation batch  
  
 b.ItemNumber, b.Configuration as Size,  
 b.Warehouse, b.Location, b.RejectedQuantity * -1 as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier,a.PlantNo,'(Rejected)',a.CreationTime 
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId  
 where a.FunctionIdentifier in (SELECT Identifier from #FunctionIdentifiers) and b.RejectedQuantity > 0  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0  
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end   
 and PlantNo in (SELECT * FROM @TempPN)  

 --------------------------------------------------------------------  
 --details: Rejected SOBC(prositive -- increase Rejected glove)
 --------------------------------------------------------------------
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,   
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,TransactionType,CreationTime)  
  
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,   
 ISNULL(NULLIF(b.BatchOrderNumber,''), (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch  
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as MovementJournalNumber, --for consolidation batch  
 '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as PickListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RAFJournalNumber, --for consolidation batch  
  
 b.ItemNumber, b.Configuration as Size,  
 b.Warehouse, b.Location, b.RejectedQuantity as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier,a.PlantNo,'(Rejected)',a.CreationTime
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId  
 where a.FunctionIdentifier in (SELECT Identifier from #FunctionIdentifiers) and b.RejectedQuantity > 0  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0  
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end   
 and PlantNo in (SELECT * FROM @TempPN)  
 --------------------------------------------------------------------  
 --details: Rejected Sample SOBC(negative -- reduce glove) 
 --------------------------------------------------------------------
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,   
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,TransactionType,CreationTime)  
  
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,   
 ISNULL(NULLIF(b.BatchOrderNumber,''), (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch  
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as MovementJournalNumber, --for consolidation batch  
 '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as PickListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RAFJournalNumber, --for consolidation batch  
  
 b.ItemNumber, b.Configuration as Size,  
 b.Warehouse, b.Location, b.RejectedSampleQuantity * -1 as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier,a.PlantNo,'(Rejected Sample)',a.CreationTime 
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId  
 where a.FunctionIdentifier in (SELECT Identifier from #FunctionIdentifiers)and b.RejectedSampleQuantity > 0  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0  
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end   
 and PlantNo in (SELECT * FROM @TempPN)  

 ------------------------------------------------------------------------
  --details: Rejected Sample SOBC(prositive -- increase Rejected Sample)  
 ------------------------------------------------------------------------
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,   
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,TransactionType,CreationTime)  
  
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,   
 ISNULL(NULLIF(b.BatchOrderNumber,''), (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch  
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as MovementJournalNumber, --for consolidation batch  
 '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as PickListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RAFJournalNumber, --for consolidation batch  
  
 b.ItemNumber, b.Configuration as Size,  
 b.Warehouse, b.Location, b.RejectedSampleQuantity as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier,a.PlantNo,'(Rejected Sample)',a.CreationTime 
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId  
 where a.FunctionIdentifier in (SELECT Identifier from #FunctionIdentifiers)and b.RejectedSampleQuantity > 0  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0  
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end   
 and PlantNo in (SELECT * FROM @TempPN)  
 
 ------------------------------------------------------------------------
 --details: 2nd grade SOBC(negative -- reduce glove) 
 ------------------------------------------------------------------------
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,   
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,TransactionType,CreationTime)  
  
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,   
 ISNULL(NULLIF(b.BatchOrderNumber,''), (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch  
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as MovementJournalNumber, --for consolidation batch  
 '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as PickListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RAFJournalNumber, --for consolidation batch  
  
 b.ItemNumber, b.Configuration as Size,  
 b.Warehouse, b.Location, b.SecondGradeQuantity * -1 as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,'(2G)',a.CreationTime
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId  
 where a.FunctionIdentifier in (SELECT Identifier from #FunctionIdentifiers) and b.SecondGradeQuantity > 0  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0   
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end  
 and PlantNo in (SELECT * FROM @TempPN)  

 ------------------------------------------------------------------------ 
 --details: 2nd grade SOBC(prositive -- increase 2G glove) 
 ------------------------------------------------------------------------
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,   
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,TransactionType,CreationTime)  
  
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,   
 ISNULL(NULLIF(b.BatchOrderNumber,''), (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch  
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as MovementJournalNumber, --for consolidation batch  
 '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as PickListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as RAFJournalNumber, --for consolidation batch  
  
 b.ItemNumber, b.Configuration as Size,  
 b.Warehouse, b.Location, b.SecondGradeQuantity as TransitionQuantity, NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,'(2G)',a.CreationTime
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId  
 where a.FunctionIdentifier in (SELECT Identifier from #FunctionIdentifiers) and b.SecondGradeQuantity > 0  
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0   
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end  
 and PlantNo in (SELECT * FROM @TempPN)  
END  
  
Select a.PlantNo, a.FunctionIdentifier, a.PostingDateTime, a.SerialNumber, a.D365BatchNumber, a.BatchOrderNumber, 
a.MovementJournalNumber + case when TransactionType in ('(2G)','(Rejected Sample)','(Rejected)') then TransactionType else '' end as MovementJournalNumber,   
a.TransferJournalNumber, a.PickListJournalNumber as PickingListJournalNumber, a.RouteCardJournalNumber, a.RAFJournalNumber, a.ItemNumber, a.Size, a.Warehouse,a.Location,  
 -- hide qty if not complete posting without journal id come back from d365
  case when ISNULL(a.PickListJournalNumber,'')='' and ISNULL(a.RAFJournalNumber,'')='' then 0.0 else CONVERT(DECIMAL (10, 4),
		-- if over consume than rework order qty then always refer back to rework order reserved Qty
		case when TransactionType='Pick' and abs(a.TransitionQuantity)<>abs(isnull(r.Quantity,rs.Quantity)) then isnull(r.Quantity,rs.Quantity)*-1 else a.TransitionQuantity end) end as TransitionQuantity,
  CONVERT(DECIMAL (10, 4),case when TransactionType='Pick' then a.TransitionQuantity+isnull(r.Quantity,rs.Quantity) else 0 end) as ReservedQuantity,a.CreationTime
from #tmpUnion a  
left join DOT_RwkBatchOrderCreationChildTable r with(nolock) on a.BatchOrderNumber=r.ReworkOrder
left join DOT_RwkcrSumTable rs with(nolock) on rs.functionIdentifier='RWKCR' and a.BatchOrderNumber=rs.ReworkOrder
WHERE a.Warehouse LIKE (case when LEN(@Warehouse) > 0 then @Warehouse  else '%' end)  
  
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL    
DROP TABLE #SerialNumbers   
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL    
DROP TABLE #D365BatchNumbers   
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL    
DROP TABLE #CustReferenceNumbers  
IF OBJECT_ID('tempdb..#TmpUnion') IS NOT NULL    
DROP TABLE #TmpUnion  
  
END
GO
PRINT N'Altering Procedure [dbo].[USP_DOT_OnlineBatchSummaryBatchCardReport]...';


GO
-- ==================================================================================================================================================      
-- Name: USP_DOT_OnlineBatchSummaryBatchCardReport    
-- Purpose: Summary Batch Card Report for Surgical Batch    
-- ==================================================================================================================================================      
-- Change History      
-- Date   Author   Comments      
-- -----  ------   ------------------------------------------------------------    
-- 2021/10/26   Azrul    SP created.      
-- 2022/01/05   Amir  Exclude ON2G , Split to another SP USP_DOT_ON2GSummaryBatchCardReport  
-- ==================================================================================================================================================     
-- exec USP_DOT_OnlineBatchSummaryBatchCardReport '2210605283,2210605145,2210605001,2210605292,2210605426', '', '', '2021-01-01','2021-10-01','','',''  
-- exec USP_DOT_OnlineBatchSummaryBatchCardReport '2211290123', '', '', '','','','',''  
-- exec USP_DOT_OnlineBatchSummaryBatchCardReport '', '', 'ANSL 301/20', '','','','',''  
-- exec USP_DOT_OnlineBatchSummaryBatchCardReport '', '', 'MEDU 806/21', '','','','',''  
-- exec USP_DOT_OnlineBatchSummaryBatchCardReport '', '', '', '2021-08-31','2021-08-31 23:59:59','','',''  
-- exec USP_DOT_OnlineBatchSummaryBatchCardReport @SerialNumber=N'',@D365BatchNumber=N'MUNA 152/21_6½_02',@CustReferenceNumber=N'',@PlantNo=N'',@Warehouse=N'',@FunctionIdentifier=N'',@PostingDateTimeFrom=N'',@PostingDateTimeTo=N''  
-- exec USP_DOT_OnlineBatchSummaryBatchCardReport @SerialNumber=N'',@D365BatchNumber=N'',@CustReferenceNumber=N'MEDU 1992/21',@PlantNo=N'',@Warehouse=N'',@FunctionIdentifier=N'',@PostingDateTimeFrom=N'',@PostingDateTimeTo=N''  
-- ==================================================================================================================================================  
  
CREATE OR ALTER   PROCEDURE [dbo].[USP_DOT_OnlineBatchSummaryBatchCardReport]    
(  
@SerialNumber NVARCHAR(4000),  
@D365BatchNumber NVARCHAR(4000),  
@CustReferenceNumber NVARCHAR(4000),  
@PostingDateTimeFrom NVARCHAR(100),  
@PostingDateTimeTo NVARCHAR(100),  
@PlantNo NVARCHAR(4000),  
@Warehouse NVARCHAR(4000),  
@FunctionIdentifier NVARCHAR(4000)  
)  
  
AS  
BEGIN    
 -- SET NOCOUNT ON added to prevent extra result sets from      
 -- interfering with SELECT statements.      
 SET NOCOUNT ON;  
   
    
IF OBJECT_ID('tempdb..#FunctionIdentifiers') IS NOT NULL    
DROP TABLE #FunctionIdentifiers   
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL    
DROP TABLE #SerialNumbers   
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL    
DROP TABLE #D365BatchNumbers   
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL    
DROP TABLE #CustReferenceNumbers  
IF OBJECT_ID('tempdb..#tmpFinal') IS NOT NULL    
DROP TABLE #tmpFinal   
  
CREATE TABLE #FunctionIdentifiers (Identifier NVARCHAR(20))  
CREATE TABLE #SerialNumbers (SerialNumber NVARCHAR(4000))  
CREATE TABLE #D365BatchNumbers (D365BatchNumber NVARCHAR(4000))  
CREATE TABLE #CustReferenceNumbers (CustReferenceNumber NVARCHAR(4000))  
CREATE TABLE #tmpFinal (FunctionIdentifier NVARCHAR(10),   
      PostingDateTime DATETIME2,   
      SerialNumber NVARCHAR(50),   
      D365BatchNumber NVARCHAR(50),   
      BatchOrderNumber NVARCHAR(50),   
      MovementJournalNumber NVARCHAR(50),   
      TransferJournalNumber NVARCHAR(50),  
      PickingListJournalNumber NVARCHAR(50),   
      RouteCardJournalNumber NVARCHAR(50),   
      RAFJournalNumber NVARCHAR(50),    
      ItemNumber NVARCHAR(100),   
      Size NVARCHAR(10),   
      Warehouse NVARCHAR(10),   
      Location NVARCHAR(10),  
      TransitionQuantity DECIMAL (18, 4) DEFAULT 0.0000,   
      ReservedQuantity DECIMAL (18, 4),  
      PlantNo NVARCHAR(10),
	  CreationTime DATETIME2)  
  
IF (LEN(@SerialNumber) > 0)   
BEGIN  
 INSERT INTO #SerialNumbers   
 select * from dbo.SplitString(NULLIF(@SerialNumber, ','), ',')  
END  
ELSE IF (LEN(@D365BatchNumber) > 0)   
BEGIN  
 INSERT INTO #D365BatchNumbers   
 select * from dbo.SplitString(NULLIF(@D365BatchNumber, ''), ',')  
  
 INSERT INTO #SerialNumbers  
 select   
 case when isnull(a.BatchNumber,'')='' then isnull(b.BatchNumber,'')  
    else isnull(a.BatchNumber,'') end   
    --*  
 from DOT_FloorAxIntParentTable a with(nolock)   
 left join DOT_FGJournalTable b with(nolock) on a.Id=b.ParentRefRecId and b.IsDeleted=0  
 where   
  D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '') or   
  a.BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '')  
  
 and a.IsDeleted = 0  and IsMigratedFromAX6 = 0     
END  
Else IF (LEN(@CustReferenceNumber) > 0)   
BEGIN  
 INSERT INTO #CustReferenceNumbers   
 select * from dbo.SplitString(NULLIF(@CustReferenceNumber, ','), ',')  
  
 INSERT INTO #SerialNumbers  
 select BatchNumber from dbo.UFN_DOT_GetSNFromCustRefForSummaryBatchCardReport(@CustReferenceNumber)  
END  
  
DECLARE @TempPN TABLE (PlantNo VARCHAR(10))  
  
IF (LEN(@PlantNo) > 0)   
BEGIN  
 INSERT INTO @TempPN VALUES (@PlantNo)  
END  
  
ELSE  
BEGIN  
 INSERT INTO @TempPN select LocationName from LocationMaster  
END  
  
IF(LEN(@FunctionIdentifier) > 0)  
BEGIN  
 INSERT INTO #FunctionIdentifiers  
 select * from dbo.SplitString(NULLIF(@FunctionIdentifier, ','), ',')  
END  
ELSE  
BEGIN  
 INSERT INTO #FunctionIdentifiers   
 SELECT ('HBC')  
  
 INSERT INTO #FunctionIdentifiers   
 SELECT ('SRBC')  
  
 --INSERT INTO #FunctionIdentifiers   
 --SELECT ('ON2G')  
END  
  
DECLARE @StartPostingDateTime DateTime = '2019-03-01'  
DECLARE @EndPostingDateTime DateTime = DATEADD(DAY,1,GetDate())  
DECLARE @SerialNoCount int  
SELECT @SerialNoCount = Count(1) from #SerialNumbers  
  
--details: online/surgical batch only, online 2G and offline batch excluded  
IF (@SerialNoCount > 0)  
BEGIN  
 INSERT INTO #tmpFinal (FunctionIdentifier,PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,    
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity,PlantNo,CreationTime)  
  
 select a.FunctionIdentifier, b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber, ISNULL(b.BatchOrderNumber,'') as BatchOrderNumber,   
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and   
 FunctionIdentifier = a.FunctionIdentifier)) as MovementJournalNumber, '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and   
 FunctionIdentifier = a.FunctionIdentifier)) as PickingListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and   
 FunctionIdentifier = a.FunctionIdentifier)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and   
 FunctionIdentifier = a.FunctionIdentifier)) as RAFJournalNumber, --for consolidation batch  
 b.ItemNumber, b.Configuration as Size,  
 ISNULL(NULLIF(b.Warehouse,''),a.PlantNo+'-PROD') as Warehouse, b.Location, CONVERT(DECIMAL (10, 4),b.RAFGoodQty) as TransitionQuantity, 0 as ReservedQuantity,a.PlantNo,a.CreationTime  
  
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId  
 join #FunctionIdentifiers f on f.Identifier=a.FunctionIdentifier  
 where a.BatchNumber IN (Select Distinct SerialNumber from #SerialNumbers where SerialNumber <> '')  
 and a.FunctionIdentifier <> 'ON2G'  
 and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0   
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end  
 and PlantNo in (SELECT * FROM @TempPN)  
 and a.ReferenceBatchNumber1 is null -- filter out resample records
END  
ELSE  
BEGIN  
 INSERT INTO #tmpFinal (FunctionIdentifier,PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,    
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity,PlantNo,CreationTime)  
  
 select a.FunctionIdentifier, b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber, ISNULL(b.BatchOrderNumber,'') as BatchOrderNumber,   
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and   
 FunctionIdentifier = a.FunctionIdentifier)) as MovementJournalNumber, '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and   
 FunctionIdentifier = a.FunctionIdentifier)) as PickingListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and   
 FunctionIdentifier = a.FunctionIdentifier)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and   
 FunctionIdentifier = a.FunctionIdentifier)) as RAFJournalNumber, --for consolidation batch  
 b.ItemNumber, b.Configuration as Size,  
 ISNULL(NULLIF(b.Warehouse,''),a.PlantNo+'-PROD') as Warehouse, b.Location, CONVERT(DECIMAL (10, 4),b.RAFGoodQty) as TransitionQuantity, 0 as ReservedQuantity, a.PlantNo,a.CreationTime  
  
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId  
 join #FunctionIdentifiers f on f.Identifier=a.FunctionIdentifier  
 where a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0   
 and a.FunctionIdentifier <> 'ON2G'  
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end  
 and PlantNo in (SELECT * FROM @TempPN)  
 and a.ReferenceBatchNumber1 is null -- filter out resample records
END  

--add adjustment quantity
insert into #tmpFinal
SELECT 'Adjusted' as FunctionIdentifier, case when b.LastModificationTime is null then b.CreationTime else b.LastModificationTime end , b.BatchCardNum as SerialNumber,   
   a.D365BatchNumber, '', a.JournalId,   
   '','', '','',
   a.ItemNumber, '',a.Warehouse, a.Location, 0,   
   b.Quantity ,''  ,null
FROM DOT_InventAdjustmentSumTable a right join DOT_InventAdjustmentSumTableDetails b on a.InventTransId = b.InventTransId 
where 
	a.D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers) or 
	b.BatchCardNum in (select SerialNumber from #SerialNumbers)
	and a.BatchNumber <> 'OpeningUpload'
	
 SELECT 
 FunctionIdentifier,PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,    
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, ReservedQuantity,PlantNo,
 -- hide qty if not complete posting without journal id come back from d365
  case when ISNULL(#tmpFinal.PickingListJournalNumber,'')='' and ISNULL(#tmpFinal.RAFJournalNumber,'')='' then 0.0 else #tmpFinal.TransitionQuantity end as TransitionQuantity,CreationTime
 FROM #tmpFinal   
 WHERE Warehouse LIKE (case when LEN(@Warehouse) > 0 then @Warehouse  else '%' end)  
  
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL    
DROP TABLE #SerialNumbers   
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL    
DROP TABLE #D365BatchNumbers   
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL    
DROP TABLE #CustReferenceNumbers  
IF OBJECT_ID('tempdb..#tmpFinal') IS NOT NULL    
DROP TABLE #tmpFinal   
  
END
GO
PRINT N'Altering Procedure [dbo].[USP_DOT_PendingPalletScanListDashboard]...';


GO

--exec USP_DOT_PendingPalletScanListDashboard '',''
--exec USP_DOT_PendingPalletScanListDashboard 'P1',''
--exec USP_DOT_PendingPalletScanListDashboard '','N3005550,N3002430'
--exec USP_DOT_PendingPalletScanListDashboard 'P1','N3003077,N1000438,N1000012'

CREATE OR ALTER   PROCEDURE [dbo].[USP_DOT_PendingPalletScanListDashboard]
(
@PlantNo NVARCHAR(10),
@PalletNo NVARCHAR(4000)
)

AS
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from    
 -- interfering with SELECT statements.    
 SET NOCOUNT ON;

IF OBJECT_ID('tempdb..#ewnCompletedPallet') IS NOT NULL  
DROP TABLE #ewnCompletedPallet 

--pallet not scanned
select Item, PoNumber, Qty, PalletId, DateCompleted into #ewnCompletedPallet
from EWN_CompletedPallet WITH (NOLOCK) where DateScanned is null and DateStockOut is null

DECLARE @TempPN TABLE (PlantNo VARCHAR(10))

IF (LEN(@PlantNo) > 0) 
BEGIN
	INSERT INTO @TempPN VALUES (@PlantNo)
END

ELSE
BEGIN
	INSERT INTO @TempPN SELECT DISTINCT LocationName FROM DOT_LocationConsoleMaster WHERE IsDeleted = 0
END

DECLARE @TempPalletId TABLE (PalletId VARCHAR(10))

IF (LEN(@PalletNo) > 0) 
BEGIN
	INSERT INTO @TempPalletId 
	select * from dbo.SplitString(NULLIF(@PalletNo, ''), ',') where Item <> ''

	SELECT PlantNo,CustRef,SalesOrder,Item,Size,Qty,PalletId,PalletIsClosed,PalletClosedDate,PalletIsScanned,PalletWaitDay FROM
	(select d.LocationName as PlantNo, c.CustomerReferenceNumber as CustRef, a.PoNumber as SalesOrder, SUBSTRING(Item,0,CHARINDEX('_',Item,0)) as Item, 
	SUBSTRING(Item, CHARINDEX('_', Item) + 1, LEN(Item)) as Size, Qty, a.PalletId, 1 as PalletIsClosed, DateCompleted as PalletClosedDate, 0 as PalletIsScanned, 
	DATEDIFF(day, DateCompleted, Getdate()) as PalletWaitDay
	from #ewnCompletedPallet a WITH (NOLOCK)
	JOIN FinalPacking b with (NOLOCK) on a.PoNumber = b.PONumber and a.PalletId = b.PalletId and SUBSTRING(Item, CHARINDEX('_', Item) + 1, LEN(Item)) = b.Size
	and SUBSTRING(Item,0,CHARINDEX('_',Item,0)) = b.ItemNumber
	JOIN PurchaseOrderItem c WITH (NOLOCK) ON c.PONumber = b.PONumber AND c.ItemNumber = b.ItemNumber AND b.Size = c.ItemSize   
	Join DOT_LocationConsoleMaster d with (NOLOCK) on b.LocationId = d.LocationId
	where d.IsDeleted = 0
	GROUP BY LocationName,CustomerReferenceNumber,a.PoNumber,Item,Size,Qty,a.PalletId,DateCompleted

	UNION 

	--pallet not closed
	select DOT_LocationConsoleMaster.LocationName as PlantNo,palletNotClosed.BatchId as CustRef,palletNotClosed.PONumber as SalesOrder,
	palletNotClosed.ItemNumber as Item,palletNotClosed.Size,sum(palletNotClosed.CasesPacked) as Qty,palletNotClosed.PalletId,
	0,null,	0,0 from(select * from
	(select fgboFullPack.PlantId,fgboFullPack.BatchId,finalPacking.PONumber,CONCAT(finalPacking.ItemNumber,'_',finalPacking.Size) as itemNoSize,finalPacking.ItemNumber,finalPacking.Size,finalPacking.CasesPacked,finalPacking.PalletId from
	(select * from (SELECT sum(fp.CasesPacked) as FGReportedQty,bo2.BthOrderId as FGBO,fp.LocationId as PlantId from finalpacking FP WITH (NOLOCK)      
	join purchaseorderitem POIN WITH (NOLOCK) on POIN.ponumber = FP.ponumber and POIN.Itemnumber = FP.itemnumber and FP.Size = POIN.ItemSize     
	join DOT_FloorD365BO bo2 WITH (NOLOCK) on bo2.BthOrderId = fp.FGBatchOrderNo and bo2.IsDeleted=0 AND bo2.Size = POIN.CustomerSize
	WHERE bo2.ProdStatus IN ('ReportedFinished','StartedUp')
	group by bo2.BthOrderId,fp.LocationId) as a
	inner join (select fgbo.* from DOT_FloorD365BO as fgbo with (nolock) where fgbo.ProdPoolId = 'FG') b on a.FGBO = b.BthOrderId
	where a.FGReportedQty >= b.QtySched) as fgboFullPack
	inner join (select PalletId,FGBatchOrderNo,ItemNumber,Size,PONumber,CasesPacked from finalpacking with (nolock)) finalPacking on fgboFullPack.FGBO = finalPacking.FGBatchOrderNo) palletList
	where palletList.itemNoSize NOT IN (select item from EWN_CompletedPalletLog with (nolock))) palletNotClosed
	inner join DOT_LocationConsoleMaster with (nolock) on palletNotClosed.PlantId = DOT_LocationConsoleMaster.LocationId 
	GROUP BY LocationName,BatchId,PONumber,ItemNumber,Size,PalletId
	) TmpUnion
	WHERE PlantNo IN (SELECT PlantNo FROM @TempPN)
	AND	PalletId IN (SELECT PalletId FROM @TempPalletId)
	ORDER BY PlantNo
END
	
ELSE
BEGIN
	SELECT PlantNo,CustRef,SalesOrder,Item,Size,Qty,PalletId,PalletIsClosed,PalletClosedDate,PalletIsScanned,PalletWaitDay FROM
	(select d.LocationName as PlantNo, c.CustomerReferenceNumber as CustRef, a.PoNumber as SalesOrder, SUBSTRING(Item,0,CHARINDEX('_',Item,0)) as Item, 
	SUBSTRING(Item, CHARINDEX('_', Item) + 1, LEN(Item)) as Size, Qty, a.PalletId, 1 as PalletIsClosed, DateCompleted as PalletClosedDate, 0 as PalletIsScanned, 
	DATEDIFF(day, DateCompleted, Getdate()) as PalletWaitDay
	from #ewnCompletedPallet a WITH (NOLOCK)
	JOIN FinalPacking b with (NOLOCK) on a.PoNumber = b.PONumber and a.PalletId = b.PalletId and SUBSTRING(Item, CHARINDEX('_', Item) + 1, LEN(Item)) = b.Size
	and SUBSTRING(Item,0,CHARINDEX('_',Item,0)) = b.ItemNumber
	JOIN PurchaseOrderItem c WITH (NOLOCK) ON c.PONumber = b.PONumber AND c.ItemNumber = b.ItemNumber AND b.Size = c.ItemSize   
	Join DOT_LocationConsoleMaster d with (NOLOCK) on b.LocationId = d.LocationId
	where d.IsDeleted = 0
	GROUP BY LocationName,CustomerReferenceNumber,a.PoNumber,Item,Size,Qty,a.PalletId,DateCompleted

	UNION 

	--pallet not closed
	select DOT_LocationConsoleMaster.LocationName as PlantNo,palletNotClosed.BatchId as CustRef,palletNotClosed.PONumber as SalesOrder,
	palletNotClosed.ItemNumber as Item,palletNotClosed.Size,sum(palletNotClosed.CasesPacked) as Qty,palletNotClosed.PalletId,
	0,null,	0,0 from(select * from
	(select fgboFullPack.PlantId,fgboFullPack.BatchId,finalPacking.PONumber,CONCAT(finalPacking.ItemNumber,'_',finalPacking.Size) as itemNoSize,finalPacking.ItemNumber,finalPacking.Size,finalPacking.CasesPacked,finalPacking.PalletId from
	(select * from (SELECT sum(fp.CasesPacked) as FGReportedQty,bo2.BthOrderId as FGBO,fp.LocationId as PlantId from finalpacking FP WITH (NOLOCK)      
	join purchaseorderitem POIN WITH (NOLOCK) on POIN.ponumber = FP.ponumber and POIN.Itemnumber = FP.itemnumber and FP.Size = POIN.ItemSize     
	join DOT_FloorD365BO bo2 WITH (NOLOCK) on bo2.BthOrderId = fp.FGBatchOrderNo and bo2.IsDeleted=0 AND bo2.Size = POIN.CustomerSize
	WHERE bo2.ProdStatus IN ('ReportedFinished','StartedUp')
	group by bo2.BthOrderId,fp.LocationId) as a
	inner join (select fgbo.* from DOT_FloorD365BO as fgbo with (nolock) where fgbo.ProdPoolId = 'FG') b on a.FGBO = b.BthOrderId
	where a.FGReportedQty >= b.QtySched) as fgboFullPack
	inner join (select PalletId,FGBatchOrderNo,ItemNumber,Size,PONumber,CasesPacked from finalpacking with (nolock)) finalPacking on fgboFullPack.FGBO = finalPacking.FGBatchOrderNo) palletList
	where palletList.itemNoSize NOT IN (select item from EWN_CompletedPalletLog with (nolock))) palletNotClosed
	inner join DOT_LocationConsoleMaster with (nolock) on palletNotClosed.PlantId = DOT_LocationConsoleMaster.LocationId 
	GROUP BY LocationName,BatchId,PONumber,ItemNumber,Size,PalletId
	) TmpUnion
	WHERE PlantNo IN (SELECT PlantNo FROM @TempPN)
	ORDER BY PlantNo
END

END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_ON2GSummaryBatchCardReport]...';


GO
-- ==================================================================================================================================================      
-- Name: USP_DOT_ON2GSummaryBatchCardReport    
-- Purpose: Summary Batch Card Report for ON2G Batch    
-- ==================================================================================================================================================      
-- Change History      
-- Date   Author   Comments      
-- -----  ------   ------------------------------------------------------------    
-- 2022/01/05   Amir    SP created. Split From USP_DOT_OnlineBatchSummaryBatchCardReport     
-- ==================================================================================================================================================     
-- exec USP_DOT_ON2GSummaryBatchCardReport '2210605283,2210605145,2210605001,2210605292,2210605426', '', '', '2021-01-01','2021-10-01','','',''  
-- exec USP_DOT_ON2GSummaryBatchCardReport '2211290123', '', '', '','','','',''  
-- exec USP_DOT_ON2GSummaryBatchCardReport '', '', 'ANSL 301/20', '','','','',''  
-- exec USP_DOT_ON2GSummaryBatchCardReport '', '', 'MEDU 806/21', '','','','',''  
-- exec USP_DOT_ON2GSummaryBatchCardReport '', '', '', '2021-12-01','2021-12-31 23:59:59','','',''  
-- exec USP_DOT_ON2GSummaryBatchCardReport @SerialNumber=N'',@D365BatchNumber=N'MUNA 152/21_6½_02',@CustReferenceNumber=N'',@PlantNo=N'',@Warehouse=N'',@FunctionIdentifier=N'',@PostingDateTimeFrom=N'',@PostingDateTimeTo=N''  
-- exec USP_DOT_ON2GSummaryBatchCardReport @SerialNumber=N'',@D365BatchNumber=N'',@CustReferenceNumber=N'MEDU 1992/21',@PlantNo=N'',@Warehouse=N'',@FunctionIdentifier=N'',@PostingDateTimeFrom=N'',@PostingDateTimeTo=N''  
-- ==================================================================================================================================================  
  
CREATE OR ALTER  PROCEDURE [dbo].[USP_DOT_ON2GSummaryBatchCardReport]    
(  
@SerialNumber NVARCHAR(4000),  
@D365BatchNumber NVARCHAR(4000),  
@CustReferenceNumber NVARCHAR(4000),  
@PostingDateTimeFrom NVARCHAR(100),  
@PostingDateTimeTo NVARCHAR(100),  
@PlantNo NVARCHAR(4000),  
@Warehouse NVARCHAR(4000),  
@FunctionIdentifier NVARCHAR(4000)  
)  
  
AS  
BEGIN    
 -- SET NOCOUNT ON added to prevent extra result sets from      
 -- interfering with SELECT statements.      
 SET NOCOUNT ON;  
   
    
IF OBJECT_ID('tempdb..#FunctionIdentifiers') IS NOT NULL    
DROP TABLE #FunctionIdentifiers   
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL    
DROP TABLE #SerialNumbers   
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL    
DROP TABLE #D365BatchNumbers   
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL    
DROP TABLE #CustReferenceNumbers  
IF OBJECT_ID('tempdb..#tmpFinal') IS NOT NULL    
DROP TABLE #tmpFinal   
  
CREATE TABLE #FunctionIdentifiers (Identifier NVARCHAR(20) COLLATE DATABASE_DEFAULT)  
CREATE TABLE #SerialNumbers (SerialNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)  
CREATE TABLE #D365BatchNumbers (D365BatchNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)  
CREATE TABLE #CustReferenceNumbers (CustReferenceNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)  
CREATE TABLE #tmpFinal (FunctionIdentifier NVARCHAR(10),   
      PostingDateTime DATETIME2,   
      SerialNumber NVARCHAR(50),   
      D365BatchNumber NVARCHAR(50),   
      BatchOrderNumber NVARCHAR(50),   
      MovementJournalNumber NVARCHAR(50),   
      TransferJournalNumber NVARCHAR(50),  
      PickingListJournalNumber NVARCHAR(50),   
      RouteCardJournalNumber NVARCHAR(50),   
      RAFJournalNumber NVARCHAR(50),    
      ItemNumber NVARCHAR(100),   
      Size NVARCHAR(10),   
      Warehouse NVARCHAR(10),   
      Location NVARCHAR(10),  
      TransitionQuantity DECIMAL (10, 4) DEFAULT 0.0000,   
      ReservedQuantity DECIMAL (10, 4),  
      PlantNo NVARCHAR(10),
	  CreationTime DATETIME2)  
  
IF (LEN(@SerialNumber) > 0)   
BEGIN  
 INSERT INTO #SerialNumbers   
 select * from dbo.SplitString(NULLIF(@SerialNumber, ','), ',')  
END  
ELSE IF (LEN(@D365BatchNumber) > 0)   
BEGIN  
 INSERT INTO #D365BatchNumbers   
 select * from dbo.SplitString(NULLIF(@D365BatchNumber, ''), ',')  
  
 INSERT INTO #SerialNumbers  
 select   
 case when isnull(a.BatchNumber,'')='' then isnull(b.BatchNumber,'')  
    else isnull(a.BatchNumber,'') end   
    --*  
 from DOT_FloorAxIntParentTable a with(nolock)   
 left join DOT_FGJournalTable b with(nolock) on a.Id=b.ParentRefRecId and b.IsDeleted=0  
 where   
  D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '') or   
  a.BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '')  
  
 and a.IsDeleted = 0  and IsMigratedFromAX6 = 0     
END  
Else IF (LEN(@CustReferenceNumber) > 0)   
BEGIN  
 INSERT INTO #CustReferenceNumbers   
 select * from dbo.SplitString(NULLIF(@CustReferenceNumber, ','), ',')  
  
 INSERT INTO #SerialNumbers  
 select BatchNumber from dbo.UFN_DOT_GetSNFromCustRefForSummaryBatchCardReport(@CustReferenceNumber)  
END  
  
DECLARE @TempPN TABLE (PlantNo VARCHAR(10))  
  
IF (LEN(@PlantNo) > 0)   
BEGIN  
 INSERT INTO @TempPN VALUES (@PlantNo)  
END  
  
ELSE  
BEGIN  
 INSERT INTO @TempPN select LocationName from LocationMaster  
END  
  
IF(LEN(@FunctionIdentifier) > 0)  
BEGIN  
 INSERT INTO #FunctionIdentifiers  
 select * from dbo.SplitString(NULLIF(@FunctionIdentifier, ','), ',')  
END  
ELSE  
BEGIN  
-- INSERT INTO #FunctionIdentifiers   
-- SELECT ('HBC')  
  
-- INSERT INTO #FunctionIdentifiers   
-- SELECT ('SRBC')  
  
 INSERT INTO #FunctionIdentifiers   
 SELECT ('ON2G')  
END  
  
DECLARE @StartPostingDateTime DateTime = '2019-03-01'  
DECLARE @EndPostingDateTime DateTime = DATEADD(DAY,1,GetDate())  
DECLARE @SerialNoCount int  
SELECT @SerialNoCount = Count(1) from #SerialNumbers  
  
--details: online/surgical batch only, online 2G and offline batch excluded  
IF (@SerialNoCount > 0)  
BEGIN  
 INSERT INTO #tmpFinal (FunctionIdentifier,PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,    
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity,PlantNo,CreationTime)  
  
 select a.FunctionIdentifier, b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber, ISNULL(b.BatchOrderNumber,'') as BatchOrderNumber,   
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and   
 FunctionIdentifier = a.FunctionIdentifier)) as MovementJournalNumber, '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and   
 FunctionIdentifier = a.FunctionIdentifier)) as PickingListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and   
 FunctionIdentifier = a.FunctionIdentifier)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and   
 FunctionIdentifier = a.FunctionIdentifier)) as RAFJournalNumber, --for consolidation batch  
 b.ItemNumber, b.Configuration as Size,  
 ISNULL(NULLIF(b.Warehouse,''),a.PlantNo+'-PROD') as Warehouse, b.Location, CONVERT(DECIMAL (10, 4),b.RAFGoodQty) as TransitionQuantity, 0 as ReservedQuantity,a.PlantNo,a.CreationTime  
  
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId  
 join #FunctionIdentifiers f on f.Identifier=a.FunctionIdentifier  
 where a.BatchNumber IN (Select Distinct SerialNumber from #SerialNumbers where SerialNumber <> '')  
 and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0   
 and a.FunctionIdentifier = 'ON2G'  
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end  
 and PlantNo in (SELECT * FROM @TempPN)  
END  
ELSE  
BEGIN  
 INSERT INTO #tmpFinal (FunctionIdentifier,PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,    
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity,PlantNo,CreationTime)  
  
 select a.FunctionIdentifier, b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber, ISNULL(b.BatchOrderNumber,'') as BatchOrderNumber,   
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and   
 FunctionIdentifier = a.FunctionIdentifier)) as MovementJournalNumber, '' as TransferJournalNumber,   
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and   
 FunctionIdentifier = a.FunctionIdentifier)) as PickingListJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and   
 FunctionIdentifier = a.FunctionIdentifier)) as RouteCardJournalNumber, --for consolidation batch  
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and   
 FunctionIdentifier = a.FunctionIdentifier)) as RAFJournalNumber, --for consolidation batch  
 b.ItemNumber, b.Configuration as Size,  
 ISNULL(NULLIF(b.Warehouse,''),a.PlantNo+'-PROD') as Warehouse, b.Location, CONVERT(DECIMAL (10, 4),b.RAFGoodQty) as TransitionQuantity, 0 as ReservedQuantity, a.PlantNo,a.CreationTime  
  
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId  
 join #FunctionIdentifiers f on f.Identifier=a.FunctionIdentifier  
 where a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0   
 and a.FunctionIdentifier = 'ON2G'  
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end  
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end  
 and PlantNo in (SELECT * FROM @TempPN)  
END  
 
	
insert into #tmpFinal   
SELECT FunctionIdentifier, PostingDateTime , SerialNumber,   
   D365BatchNumber, BatchOrderNumber, MovementJournalNumber,   
   TransferJournalNumber,PickingListJournalNumber, RouteCardJournalNumber,   
   RAFJournalNumber,ItemNumber, Size,   
   Warehouse, Location,TransitionQuantity *-1 ,   
   ReservedQuantity ,PlantNo,CreationTime   
   FROM #tmpFinal with(nolock)  
  
--add adjustment quantity
insert into #tmpFinal
SELECT top 1 'Adjusted' as FunctionIdentifier, case when b.LastModificationTime is null then b.CreationTime else b.LastModificationTime end , b.BatchCardNum as SerialNumber,   
   a.D365BatchNumber, '', a.JournalId,   
   '','', '','',
   a.ItemNumber, '',a.Warehouse, a.Location, 0,   
   b.Quantity ,''  ,null
FROM DOT_InventAdjustmentSumTable a join DOT_InventAdjustmentSumTableDetails b on a.InventTransId = b.InventTransId 
where 
	(a.D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers)and a.BatchNumber <> 'OpeningUpload') or
	(b.BatchCardNum in (select SerialNumber from #SerialNumbers) and a.BatchNumber <> 'OpeningUpload')
	
  
 SELECT 
 FunctionIdentifier,PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,    
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,  
 ItemNumber, Size, Warehouse, Location, ReservedQuantity,PlantNo,
 -- hide qty if not complete posting without journal id come back from d365
  case when ISNULL(#tmpFinal.PickingListJournalNumber,'')='' and ISNULL(#tmpFinal.RAFJournalNumber,'')='' then 0.0 else #tmpFinal.TransitionQuantity end as TransitionQuantity,CreationTime
 FROM #tmpFinal with(nolock)  
 WHERE Warehouse LIKE (case when LEN(@Warehouse) > 0 then @Warehouse  else '%' end)  
  
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL    
DROP TABLE #SerialNumbers   
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL    
DROP TABLE #D365BatchNumbers   
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL    
DROP TABLE #CustReferenceNumbers  
IF OBJECT_ID('tempdb..#tmpFinal') IS NOT NULL    
DROP TABLE #tmpFinal   
  
END

GO
PRINT N'Update complete.';


GO
