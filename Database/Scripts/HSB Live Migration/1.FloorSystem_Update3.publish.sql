/*
Deployment script for FloorSystem

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

--GO
--SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

--SET NUMERIC_ROUNDABORT OFF;


--GO
--:setvar DatabaseName "FloorSystem"
--:setvar DefaultFilePrefix "FloorSystem"
--:setvar DefaultDataPath "D:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
--:setvar DefaultLogPath "D:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

--GO
--:on error exit
--GO
--/*
--Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
--To re-enable the script after enabling SQLCMD mode, execute the following:
--SET NOEXEC OFF; 
--*/
--:setvar __IsSqlCmdEnabled "True"
--GO
--IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
--    BEGIN
--        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
--        SET NOEXEC ON;
--    END


--GO
--USE [$(DatabaseName)];


GO
PRINT N'Creating Sequence [dbo].[DOT_Online2GGloveSeq]...';


GO
CREATE SEQUENCE [dbo].[DOT_Online2GGloveSeq]
    AS BIGINT
    START WITH 1
    INCREMENT BY 1
    MINVALUE 0
    MAXVALUE 99999999999;


GO


GO
PRINT N'Creating Sequence [dbo].[sequence]...';


GO
CREATE SEQUENCE [dbo].[sequence]
    AS INT
    START WITH 1
    INCREMENT BY 1;


GO
PRINT N'Altering View [dbo].[VW_AX_AVABRANDLINE_SALESLINE]...';


GO
ALTER VIEW dbo.VW_AX_AVABRANDLINE_SALESLINE  
AS  
SELECT *  
FROM  
(  
 SELECT ROW_NUMBER() OVER(PARTITION BY l1.ITEMID, l1.CUSTOMERSIZE, l1.IsDeleted ORDER BY l1.LastModificationTime DESC ) AS RowNum,   
 l1.ITEMID, l1.CUSTOMERSIZE,  
 STUFF((  
  SELECT N',' + l2.HARTALEGACOMMONSIZE  
  FROM DOT_FSBrandLines l2  
  WHERE l2.ITEMID = l1.ITEMID   
  AND l2.CUSTOMERSIZE = l1.CUSTOMERSIZE  
  AND l2.IsDeleted = l1.IsDeleted  
  FOR XML PATH ('')), 1, 1, '') AS HARTALEGACOMMONSIZE,  
 l1.NETWEIGHT, l1.GROSSWEIGHT, l1.GLOVESINNERBOXNO, l1.INNERBOXINCASENO,  
 l1.PRINTINGSIZE, l1.INNERPRODUCTCODE, l1.OUTERPRODUCTCODE, l1.REFERENCE1, l1.REFERENCE2, l1.SIZECODE, l1.BARCODE,l1.BARCODEOUTERBOX  
 FROM DOT_FSBrandLines l1  
 WHERE l1.IsDeleted = 0  
) tbl WHERE tbl.RowNum = 1
GO
PRINT N'Altering View [dbo].[VW_AXSOline]...';


GO
-- =================================================================            
-- Author:  <Azrul Amin>            
-- Modify date: <27-Feb-2018>            
-- Description: <View for Sales Order Integrate to Floor System>           
          
-- Author:  <Pang Yik Siu>            
-- Modify date: <14-Mar-2020>            
-- Description: <Add Customer Size>            
           
-- =================================================================            
ALTER VIEW [dbo].[VW_AXSOline]      
AS           
SELECT           
SL.INVENTTRANSID,          
im.Name as ItemName,          
im.ITEMTYPE,          
SL.Salesid ,ST.PurchOrderFormNum,ST.CustomerRef ,ST.ShippingDateConfirmed,          
im.ItemId,          
SL.Name,           
SL.configuration as HartalegaCommonSize, --bl.HartalegaCommonSize,       
SL.CustomerSize as CustomerSize,          
isnull(SL.NetWeight,0) as NetWeight,           
isnull(SL.GrossWeight,0) as GrossWeight,          
SL.GlovesInnerboxNo as NumberGlovesInnerbox,          
SL.InnerboxinCaseNo as NumberInnerBoxInOuter,          
SL.InnerLabelSet,           
SL.OuterLabelSetNo as OuterLabelSet,          
SL.PreshipmentPlan as PreshipmentSamplingPlan,           
SL.PalletCapacity,          
SL.GLOVECODE,          
SL.AlternateGloveCode1,           
SL.AlternateGloveCode2,           
SL.AlternateGloveCode3,          
SL.LINENUM,          
SL.CONFIGURATION,          
SL.CONFIGURATIONNAME,           
SL.ManufacturingDateOn as ManufacturingDateBasis,          
SL.LotVerification as InnerVerification,          
SL.GCLabel  as OuterVerification,          
SL.DOTCUSTOMERLOTID as CUSTOMERLOTID,          
SL.InnerProductCode,          
SL.InnerDateFormat,          
SL.OuterProductCode,          
SL.OuterDateFormat,          
SL.Expiry,          
SL.SpecialInnerCode,          
SL.SpecialInnerCharacter as SpecialInnerCodeCharacter,          
SL.Reference1,           
SL.Reference2,          
SL.ReceiptDateRequested,          
--ST.DOTManufacturingETD as ShippingDateRequested,-- standard          
ST.DOTCustMfgDate as ShippingDateRequested,-- standard          
SL.SalesQty,-- standard          
ST.SalesStatus,-- standard          
ST.SalesName,-- standard          
ST.DocumentStatus, -- standard          
ST.ShippingDateConfirmed as STShippingDateConfirmed,-- standard          
SL.DOTBaseQty as AvaBaseQty,          
ST.DOTCustMfgDate, -- standard          
ST.DOTCustExpDate -- standard          
-- Max he, can not join batch order table because duplicate record show on PO list          
--,bo.BthOrderId as BatchOrder          
,'StartedUp' as ProdStatus -- facked just for fix UI          
,SL.PrintingSize -- for outer label print, 26 Nov 2018 Max He           
,ST.DOTPODate as HSB_CustPODocumentDate --CR-010: PO date and PO received date in SO header          
,ST.DOTPOReceivedDate as HSB_CustPORecvDate --CR-010: PO date and PO received date in SO header          
,ST.WorkflowStatus as WorkOrderStatus -- P7 SurgicalPackingPlan SP used field        
,SL.InnerDateFormat as INNERLABELSETDATEFORMAT -- P7 SurgicalPackingPlan SP used field        
,SL.OuterDateFormat as OUTERLABELSETDATEFORMAT -- P7 SurgicalPackingPlan SP used field        
,ST.DOTManufacturingETD as ManufacturingDateETD -- P7 SurgicalPackingPlan SP used field        
,SL.BARCODE-- P7 SurgicalPackingPlan SP used field        
,SL.BARCODEOUTERBOX -- P7 SurgicalPackingPlan SP used field        
from DOT_FloorSalesLine SL          
Join  DOT_FloorSales ST on SL.SALESID =  ST.SALESID           
join DOT_FSItemMaster im on im.ItemId = SL.ItemId           
--join DOT_FSBrandHeaders bh on bh.ItemId = SL.ItemId          
--join VW_AX_AVABRANDLINE_SALESLINE bl on bl.ItemId = bh.ItemId and bl.CUSTOMERSIZE = SL.CustomerSize         
where exists          
 (select 1 from DOT_FloorD365BO bo with(nolock)          
  where bo.BatchId = st.CustomerRef and bo.Size = case when im.ItemType = 8 then sl.CustomerSize else SL.CONFIGURATION end           
  and bo.ReworkBatch<>'Yes' and bo.ProdStatus='StartedUp')          
 -- Max He, only show sales order that have StartedUp batch order and not rework order          
and  im.ITEMTYPE in (5,6,8,9) -- <> 'GLove'          
and  ST.SALESSTATUS = 1 -- Open Order'Backorder'          
and  ST.DocumentStatus >= 3          
and  ST.WorkflowStatus = 2 -- for HSB version approve enum value is 2      
and  sl.IsDeleted=0      
/****** start original view ******/      
--select FSL.INVENTTRANSID,      
--FSL.ITEMNAME,      
--FSL.ITEMTYPE,      
--SL.Salesid ,SL.PurchOrderFormNum,ST.CustomerRef ,SL.ShippingDateConfirmed,      
--FSL.ItemId,SL.Name, FSL.HartalegaCommonSize,       
--(isnull(FSL.NETWEIGHT,0)/1000) as NETWEIGHT,       
--(isnull(FSL.GROSSWEIGHT,0)/1000) as GROSSWEIGHT,      
--FSL.NUMBERGLOVESINNERBOX,      
--FSL.NUMBERINNERBOXINOUTER,      
--FSL.INNERLABELSET, FSL.OUTERLABELSET,      
--FSL.PRESHIPMENTSAMPLINGPLAN, FSL.PALLETCAPACITY,      
--FSL.GLOVECODE, FSL.ALTERNATEGLOVECODE1, FSL.ALTERNATEGLOVECODE2, FSL.ALTERNATEGLOVECODE3,FSL.LINENUM,      
--FSL.CONFIGURATION , FSL.CONFIGURATIONNAME, FSL.MANUFACTURINGDATEBASIS, FSL.INNERVERIFICATION,FSL.OUTERVERIFICATION,      
--FSL.CUSTOMERLOTID,FSL.INNERPRODUCTCODE, FSL.OUTERPRODUCTCODE,FSL.EXPIRY,FSL.SPECIALINNERCODE,      
--FSL.SPECIALINNERCODECHARACTER,FSL.REFERENCE1, FSL.REFERENCE2,      
--SL.RECEIPTDATEREQUESTED,ST.AVAManufacturingETD as SHIPPINGDATEREQUESTED,SL.SalesQty,      
--ST.SALESSTATUS, ST.SalesName,ST.DocumentStatus , ST.ShippingDateConfirmed as STShippingDateConfirmed,      
--SL.AvaBaseQty      
--from MicrosoftDynamicsAX.dbo.SalesLine SL      
--Join MicrosoftDynamicsAX.dbo.AVAFLOORSALESLINE FSL on FSL.INVENTTRANSID = SL.INVENTTRANSID      
--Join  MicrosoftDynamicsAX.dbo.SalesTable ST on SL.SALESID =  ST.SALESID      
--where FSL.ITEMTYPE in (5,6,8,9)      
--and ST.SALESSTATUS = 1       
--and ST.DocumentStatus >= 3  and ST.DataAreaID ='hngc'  and SL.DataAreaID='hngc' and FSL.DataAreaID='hngc'      
/****** end original view ******/
GO
PRINT N'Refreshing View [dbo].[VW_AXSOline_eFSSTD]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[VW_AXSOline_eFSSTD]';


GO
PRINT N'Altering View [dbo].[VW_OEE_LineData]...';


GO

-- =============================================
-- Name:			VW_OEE_LineData
-- Purpose: 		View to get OEE data by date
-- =============================================
-- Change History
-- Date    Author   Comments
-- -----   ------   -----------------------------
-- 19/09/2014 	NarendraNath	   View created.
-- 26/06/2018	Max He				Replace DOT_FSQCTypeTable to DOT_FSQCTypeTable
-- =============================================

ALTER VIEW [dbo].[VW_OEE_LineData]
AS

WITH ALLLineDate AS(
SELECT t.datevalue,l.linenumber,lm.LocationName FROM 
 dbo.ufn_DateRangeTable((SELECT min(batchcarddate) FROM Batch),(SELECT MAX(batchcarddate) FROM Batch)) t CROSS JOIN
LineMaster L JOIN LocationMaster LM ON l.LocationId=lm.LocationId
)
, OOEDaily AS(
SELECT b.ShiftId,s.Name,b.LineId,b.Size,CONVERT(date, dbo.Ufn_GetOEEShitdate(s.name,b.BatchCardDate)) QAIDate,b.BatchCardDate,b.SerialNumber,b.BatchNumber,b.LocationId,l.LocationName,q.QCType,
CASE  qc.DESCRIPTION WHEN  'STRAIGHT PACK' THEN 1 ELSE 0 END AS 'IsStraightPack',
b.BatchWeight,b.TotalPCs,
CASE  qc.DESCRIPTION WHEN  'STRAIGHT PACK' THEN b.TotalPCs ELSE 0 END AS 'Quality',
pl.Speed
FROM Batch b WITH (NOLOCK)  JOIN QAI q WITH (NOLOCK) 
ON b.SerialNumber=q.SerialNumber
JOIN LocationMaster l WITH (NOLOCK)  ON b.LocationId=l.LocationId
JOIN ShiftMaster s WITH (NOLOCK)  ON b.ShiftId=s.ShiftId
LEFT JOIN ProductionLine pl WITH (NOLOCK) ON b.LineId= pl.LineId
JOIN DOT_FSQCTypeTable qc WITH (NOLOCK) ON b.QCType=qc.QCTYPE
				WHERE Q.QAIId=(SELECT MIN(QAIId) FROM qai qa WITH (NOLOCK)   JOIN DOT_FSQCTypeTable a WITH (NOLOCK)   ON
				qa.qctype =a.QCTYPE  WHERE  qa.SerialNumber=q.SerialNumber AND a.[DESCRIPTION] !='RESAMPLE') AND b.QAIDate IS NOT NULL )--AND DATEDIFF(DAY,b.QAIDate,GETDATE())<=2)

SELECT t.datevalue AS Qdate,t.linenumber As LineId,t.LocationName,SUM(ISNULL(TotalPCs,0)) TotalPCs,SUM(ISNULL(Quality,0))  AS Quality FROM 
 ALLLineDate t	LEFT OUTER JOIN  OOEDaily o ON t.DateValue= o.QAIDate AND t.linenumber=o.LineId 
	GROUP BY t.datevalue,t.linenumber,t.LocationName
GO
PRINT N'Refreshing View [dbo].[VW_DailybyLineOEE]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[VW_DailybyLineOEE]';


GO
PRINT N'Refreshing View [dbo].[VW_PlantbyDateOEE]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[VW_PlantbyDateOEE]';


GO
PRINT N'Refreshing View [dbo].[VW_PlantbyMonthOEE]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[VW_PlantbyMonthOEE]';


GO
PRINT N'Refreshing View [dbo].[VW_PlantWidebyDateOEE]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[VW_PlantWidebyDateOEE]';

GO
PRINT N'Creating Function [dbo].[UDF_DOT_GetPlantfromResourceGrp]...';


GO
CREATE FUNCTION dbo.UDF_DOT_GetPlantfromResourceGrp  
(  
  @ResourceGrp VARCHAR(256)  
)  
RETURNS VARCHAR(256)  
AS  
BEGIN  
  DECLARE @LineIdx INT  
  DECLARE @PlantNo VARCHAR(256)  

  IF CHARINDEX('L',@ResourceGrp) > 0  
  BEGIN  
 SET @LineIdx = PATINDEX('%L%', @ResourceGrp)  
  END  

  ELSE IF CHARINDEX('C',@ResourceGrp) > 0  
  BEGIN  
 SET @LineIdx = PATINDEX('%C%', @ResourceGrp)  
  END  

  ELSE  
  BEGIN  
 SET @LineIdx = PATINDEX('%F%', @ResourceGrp)  
  END  

  IF @LineIdx > 0  
 BEGIN  
 SET @LineIdx = @LineIdx - 1  
 END  
  SET @PlantNo = SUBSTRING(@ResourceGrp,1,@LineIdx)  
  RETURN @PlantNo  
END
GO
PRINT N'Creating Function [dbo].[UDF_DOT_GetTierfromResource]...';


GO
CREATE FUNCTION dbo.UDF_DOT_GetTierfromResource
(
  @Resource VARCHAR(256)
)
RETURNS VARCHAR(256)
AS
BEGIN
  DECLARE @Tier VARCHAR(256)
  DECLARE @ResourceLen INT
  SET @ResourceLen = LEN(@Resource)-1
  IF @ResourceLen > 0
  BEGIN
	SET @Tier = SUBSTRING(@Resource,@ResourceLen,1)
  END
  RETURN @Tier
END
GO
PRINT N'Creating Function [dbo].[UDF_DOT_GetTierSidefromResource]...';


GO
CREATE FUNCTION dbo.UDF_DOT_GetTierSidefromResource
(
  @Resource VARCHAR(256)
)
RETURNS VARCHAR(256)
AS
BEGIN
  DECLARE @Tier VARCHAR(256)
  DECLARE @ResourceLen INT
  SET @ResourceLen = LEN(@Resource)-1
  IF @ResourceLen > 0
  BEGIN
	SET @Tier = SUBSTRING(@Resource,@ResourceLen,2)
  END
  RETURN @Tier
END
GO
PRINT N'Creating Function [dbo].[Ufn_DOT_GET_BATCHSEQUENCE]...';


GO
-- =========================================================================    
-- Name:   Ufn_DOT_GET_BATCHSEQUENCE  
-- Purpose:   Function for get staging next sequence based on AXPostingLog    
-- =========================================================================    
-- Change History    
-- Date    Author   Comments    
-- -----   ------   ----------------------------------------    
-- 23/12/2021  Max He    Function creation
-- =========================================================================    

Create   FUNCTION [dbo].[Ufn_DOT_GET_BATCHSEQUENCE]    
(  
  @BATCHNUMBER nvarchar(20)
)   
RETURNS INT             
AS            
BEGIN   
 DECLARE @Sequence INT
 DECLARE @SerialNumber numeric(15, 0)

SET @SerialNumber=case when ISNUMERIC(@BATCHNUMBER)=0 then null else @BATCHNUMBER end;

IF @SerialNumber is not null
begin
 SELECT @Sequence = COUNT(SerialNumber) +1 FROM dbo.AXPostingLog WHERE SerialNumber=@SerialNumber  
end
ELSE
begin
 set @Sequence=0
end
 RETURN @Sequence  
END
GO
PRINT N'Creating Function [dbo].[Ufn_DOT_GET_IsConsolidated]...';


GO
-- =========================================================================    
-- Name:   Ufn_DOT_GET_IsConsolidated  
-- Purpose:   Function for get open batch flag based on AXPostingLog and DOT_LocationConsoleMaster 
-- =========================================================================    
-- Change History    
-- Date    Author   Comments    
-- -----   ------   ----------------------------------------    
-- 23/12/2021  Max He    Function creation
-- =========================================================================    

Create   FUNCTION [dbo].[Ufn_DOT_GET_IsConsolidated]    
(  
 @BATCHNUMBER nvarchar(20),
 @PlantNo NVARCHAR(20)
)   
RETURNS BIT             
AS            
BEGIN   
DECLARE @Sequence INT
DECLARE @IsConsolidated BIT
DECLARE @SerialNumber numeric(15, 0)

SET @SerialNumber=case when isnull(@BATCHNUMBER,'')='' or ISNUMERIC(@BATCHNUMBER)=0 then '0' else @BATCHNUMBER end;

SELECT @Sequence = COUNT(SerialNumber) FROM dbo.AXPostingLog WITH (NOLOCK) WHERE SerialNumber=@SerialNumber  

	IF @Sequence = 0
	BEGIN
		IF EXISTS (SELECT 1 FROM DOT_LocationConsoleMaster WITH (NOLOCK) WHERE LocationName = @PlantNo AND IsConsole = 1)
		BEGIN
			SET @IsConsolidated = 1
		END
		ELSE
		BEGIN
			SET @IsConsolidated = 0
		END
	END
	ELSE
	BEGIN
		IF EXISTS (SELECT 1 FROM AXPostingLog WITH (NOLOCK) WHERE SerialNumber = @SerialNumber AND IsConsolidated = 1)
		BEGIN
			SET @IsConsolidated = 1
		END
		ELSE
		BEGIN
			SET @IsConsolidated = 0
		END
	END
 RETURN @IsConsolidated  
END
GO
PRINT N'Creating Function [dbo].[UFN_DOT_GetBOForSummaryBatchCard]...';


GO

CREATE   FUNCTION dbo.UFN_DOT_GetBOForSummaryBatchCard
(
	-- Add the parameters for the function here
	--select dbo.UFN_DOT_GetBOForSummaryBatchCard('2211290110')
	@SerialNumber NVARCHAR(100)
)
RETURNS NVARCHAR(100)
AS
BEGIN
DECLARE @BatchOrder  NVARCHAR(100)

	select @BatchOrder = b.BatchOrderNumber from DOT_FloorAxIntParentTable a with (nolock)
	join DOT_RafStgTable b with (nolock) on a.id = b.ParentRefRecId
	where a.batchnumber = @SerialNumber and a.Sequence = 1
	Return @BatchOrder
END
GO
PRINT N'Creating Function [dbo].[UFN_DOT_GetD365BatchNoForSummaryBatchCard]...';


GO
CREATE   FUNCTION dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard
(
	-- Add the parameters for the function here
	--select dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard('2211290110')
	@SerialNumber NVARCHAR(100)
)
RETURNS NVARCHAR(100)
AS
BEGIN
DECLARE @D365BatchNumber  NVARCHAR(100)

	select @D365BatchNumber = a.D365BatchNumber from DOT_FloorAxIntParentTable a with (nolock)
	where a.batchnumber = @SerialNumber and a.Sequence = 1
	Return @D365BatchNumber
END
GO
PRINT N'Creating Function [dbo].[Ufn_DOT_GetGloveCategory]...';


GO
  
-- =====================================================  
-- Name:   Ufn_DOT_GetGloveCategory 
-- Purpose:   Function to get Glove Category from ItemId  
-- =====================================================  
-- Change History  
-- Date    Author   Comments  
-- -----   ------   ------------------------------------  
-- 09/04/2018  Azrul Amin    Function ALTER.  
-- =====================================================  
--IF OBJECT_ID('Ufn_DOT_GetGloveCategory') IS NOT NULL
--BEGIN
--	DROP FUNCTION Ufn_DOT_GetGloveCategory
--END  
--GO

CREATE FUNCTION [dbo].[Ufn_DOT_GetGloveCategory]  
(  
@Glovecode NVARCHAR(50)  
)  
RETURNS NVARCHAR(20)          
AS          
BEGIN 
	DECLARE @GloveCategory NVARCHAR(10) 
	SELECT @GloveCategory = g.GloveCategory FROM DOT_FSGloveCode as g WITH(NOLOCK) LEFT JOIN 
								DOT_FSItemMaster as m  WITH (NOLOCK) ON g.ItemRecordId = m.Id 
	WHERE m.ItemId=@Glovecode 

	RETURN @GloveCategory
END
GO
PRINT N'Creating Function [dbo].[UFN_DOT_GetItemNumberForSummaryBatchCard]...';


GO

CREATE   FUNCTION dbo.UFN_DOT_GetItemNumberForSummaryBatchCard
(
	-- Add the parameters for the function here
	--select dbo.UFN_DOT_GetItemNumberForSummaryBatchCard('2211290110')
	@SerialNumber NVARCHAR(100)
)
RETURNS NVARCHAR(100)
AS
BEGIN
DECLARE @ItemNumber  NVARCHAR(100)

	select @ItemNumber = b.ItemNumber from DOT_FloorAxIntParentTable a with (nolock)
	join DOT_RafStgTable b with (nolock) on a.id = b.ParentRefRecId
	where a.batchnumber = @SerialNumber and a.Sequence = 1
	Return @ItemNumber
END
GO
PRINT N'Creating Function [dbo].[UFN_DOT_GetLocationForSummaryBatchCard]...';


GO

CREATE   FUNCTION dbo.UFN_DOT_GetLocationForSummaryBatchCard
(
	-- Add the parameters for the function here
	--select dbo.UFN_DOT_GetLocationForSummaryBatchCard('2211290010',3) -- SPBC-PT
	--select dbo.UFN_DOT_GetLocationForSummaryBatchCard('2211290110',4) -- CBCI-RWK
	--select dbo.UFN_DOT_GetLocationForSummaryBatchCard('2210605001',6) -- SBC
	@SerialNumber NVARCHAR(100),
	@Sequence INT
)
RETURNS NVARCHAR(50)
AS
BEGIN
DECLARE @FunctionIdentifier  NVARCHAR(50)
DECLARE @ParentRefRecId  BIGINT
DECLARE @Location  NVARCHAR(50)

	select @ParentRefRecId = Max(Id) from DOT_FloorAxIntParentTable with (nolock) 
	where batchnumber = @SerialNumber and Sequence < @Sequence and FunctionIdentifier not in ('SBC','SMBP','SGBC','SPPBC')
	and IsDeleted=0

	select @FunctionIdentifier = FunctionIdentifier from DOT_FloorAxIntParentTable with (nolock) where Id = @ParentRefRecId
	and IsDeleted=0

	IF (@FunctionIdentifier = 'SPBC' OR @FunctionIdentifier = 'STPI' OR @FunctionIdentifier = 'STPO')
	BEGIN
		SELECT @Location = Location from DOT_TransferJournal with (nolock)  where ParentRefRecId = @ParentRefRecId
	END
	IF (@FunctionIdentifier = 'CBCI')
	BEGIN
		SET @Location = 'RWK'
	END
	IF (@FunctionIdentifier = 'SOBC' OR @FunctionIdentifier = 'HBC' OR @FunctionIdentifier = 'SRBC')
	BEGIN
		SELECT @Location = Location from DOT_RafStgTable with (nolock)  where ParentRefRecId = @ParentRefRecId
	END
	IF (@FunctionIdentifier = 'PVTBCA' OR @FunctionIdentifier = 'PWTBCA' OR @FunctionIdentifier = 'PWTBCP' 
		OR @FunctionIdentifier = 'PWTBCQ' OR @FunctionIdentifier = 'PWTBCS')
	BEGIN
		SET @Location = 'QAI'
	END
	Return @Location
END
GO
PRINT N'Creating Function [dbo].[Ufn_DOT_GetLocationName]...';


GO
    
-- =========================================================    
-- Name:   Ufn_DOT_GetLocationName  
-- Purpose:   Function to get Location Name from Master Data    
-- =========================================================    
-- Change History    
-- Date    Author   Comments    
-- -----   ------   ----------------------------------------    
-- 09/04/2018  Azrul Amin    Function ALTER.    
-- =========================================================    

CREATE FUNCTION [dbo].[Ufn_DOT_GetLocationName]    
(    
@LocationId NVARCHAR(5)    
)    
RETURNS NVARCHAR(10)             
AS            
BEGIN   
 DECLARE @LocationName NVARCHAR(10)   
 SELECT @LocationName = LocationName FROM LocationMaster with (nolock)  
 WHERE LocationId = @LocationId AND IsDeleted <> 1 OR IsDeleted IS NULL  
  
 RETURN @LocationName  
END
GO
PRINT N'Creating Function [dbo].[Ufn_DOT_GetResource]...';


GO
-- ========================================================  
-- Name:   Ufn_DOT_GetResource
-- Purpose:   Function to get Resource Name from ResourceId  
-- ========================================================  
-- Change History  
-- Date    Author   Comments  
-- -----   ------   ---------------------------------------  
-- 25/04/2018  Azrul Amin    Function CREATE.  
-- ========================================================  
--IF OBJECT_ID('Ufn_DOT_GetResource') IS NOT NULL
--BEGIN
--	DROP FUNCTION Ufn_DOT_GetResource
--END  
--GO

CREATE FUNCTION [dbo].[Ufn_DOT_GetResource]  
(  
@ResourceId NVARCHAR(50)  
)  
RETURNS NVARCHAR(20)          
AS          
BEGIN 
	DECLARE @Resource NVARCHAR(10) 
	SELECT @Resource = Resource FROM DOT_FloorD365BOResource  WITH (NOLOCK) 
	WHERE Id = @ResourceId
	RETURN @Resource
END
GO
PRINT N'Creating Function [dbo].[Ufn_GetCurrentShiftByTime]...';


GO

-- =======================================================
-- Name:			Ufn_GetCurrentShiftByTime
-- Purpose: 		Get Current Shift from time
-- =======================================================
-- Change History
-- Date         Author     Comments
-- -----        ------     -----------------------------
-- 03/01/2019 	Azrul	   Function Created.
-- =======================================================
CREATE FUNCTION [dbo].[Ufn_GetCurrentShiftByTime](@shiftType NVARCHAR(2), @shiftTime DATETIME) RETURNS NVARCHAR(1)
AS
BEGIN
	DECLARE @CurrentShift CHAR(1);
	DECLARE @OutTime time(7)	
	SET @OutTime = CONVERT(VARCHAR(16), CAST(@shiftTime AS TIME), 100)
	SET @CurrentShift = (SELECT Name FROM ShiftMaster WHERE @OutTime >= InTime AND @OutTime >= OutTime AND GroupType = @shiftType AND InTime > OutTime AND isDeleted = 0 )
	IF (@CurrentShift is NULL)
	SET @CurrentShift = (SELECT TOP 1 Name FROM ShiftMaster WHERE @OutTime >= InTime AND @OutTime <= OutTime AND GroupType = @shiftType AND InTime < OutTime AND isDeleted = 0 ORDER BY NAME DESC)
	IF (@CurrentShift is NULL)
	SET @CurrentShift = (SELECT Name FROM ShiftMaster WHERE @OutTime <= InTime AND @OutTime <= OutTime AND GroupType = @shiftType AND InTime > OutTime AND isDeleted = 0 )
	RETURN @CurrentShift
END
GO
PRINT N'Creating Function [dbo].[UFN_DOT_GetAllStagingParent]...';


GO

-- =============================================    
-- Change History    
-- Date			Author		Comments    
-- -----		------		-----------------------------    
-- 23/10/2019	Max He		SELECT TOP 100 * FROM UFN_DOT_GetAllStagingParent() a where a.IsDeleted=0 and a.id>100000     
-- 16/03/2021	Max He		add new fields for plant 7 design
-- 13/10/2021   Amir		Add IsConsolidated column
-- =============================================  
    
CREATE   FUNCTION [dbo].[UFN_DOT_GetAllStagingParent]            
(            
)       
RETURNS TABLE
AS            
RETURN   
SELECT * 
FROM (
	SELECT
	a.Id
	,isnull(b.PostingDateTime,isnull(c.PostingDateAndTime,isnull(d.PostingDateTime,
	 isnull(e.PostingDateTime,isnull(f.PostingDateandTime,isnull(g.ScanInDateTime,
	 isnull(g.ScanOutDateTime,a.CreationTime))))))) PostingDateTime
	,a.BatchCardNumber
	,a.BatchNumber
	,a.Sequence
	,a.FunctionIdentifier
	,a.ProcessingStatus
	,a.ErrorMessage
	,a.ReferenceBatchNumber1
	,a.ReferenceBatchNumber2
	,a.ReferenceBatchNumber3
	,a.ReferenceBatchNumber4
	,a.ReferenceBatchNumber5
	,a.ReferenceBatchSequence1
	,a.ReferenceBatchSequence2
	,a.ReferenceBatchSequence3
	,a.ReferenceBatchSequence4
	,a.ReferenceBatchSequence5
	,a.PalletId
	,a.FSIdentifier
	,ISNULL(a.D365BatchNumber, '') as D365BatchNumber

	 /** DOT_FGJournalTable ***/
	,isnull(b.BatchOrderNumber,
			isnull(d.PSIReworkOrderNo,
				isnull(e.BatchOrderNumber,
					isnull(f.ReworkOrder,g.BatchNumber)))) as BatchOrderNumber
	,isnull(b.ItemNumber,
			isnull(d.ReferenceItemNumber,g.ReferenceItemNumber)) as FGItemNo
	,isnull(b.ReferenceItemNumber,
		isnull(c.ItemNumber,
			isnull(d.ItemNumber,
				isnull(e.ItemNumber,
					isnull(f.ItemNumber,g.ItemNumber))))) as ItemNumber
	,isnull(b.Configuration,
		isnull(c.Configuration,
			isnull(d.Configuration,
				isnull(e.Configuration,
					isnull(f.Configuration,g.Configuration))))) as [Configuration]
	,isnull(b.Location,
		isnull(c.Location,
			isnull(d.Location,
				isnull(e.Location,g.Location)))) as [Location]
	,isnull(b.Warehouse,
		isnull(c.Warehouse,
			isnull(d.Warehouse,
				isnull(e.Warehouse,
					isnull(f.Warehouse,g.Warehouse))))) as [Warehouse]
	,isnull(b.SalesOrderNumber,d.SalesOrderNumber) as SalesOrderNumber
	,isnull(b.Quantity,
		isnull(c.Quantity,
				isnull(e.RAFGoodQty,
					isnull(f.Quantity,g.Quantity)))) as Quantity
	,b.CustomerPO
	,b.CustomerReference
	,b.InnerLotNumber
	,b.OuterLotNumber
	,b.CustomerLotNumber
	,case when b.Preshipment=1 then 'PSI' else '' end as IsPSI
	,b.PreshipmentCases
	,isnull(b.PickingListJournal,
			isnull(d.PickListJournalId,e.PickListJournalId)) as PickingJournalId
	,isnull(b.ReportasFinishedJournal,e.RAFJournalId) as RAFJournalId
	,isnull(b.RouteCardJournalId,e.RouteCardJournalId) as RouteCardJournalId
	,isnull(b.RefNumberOfPieces1,d.RefNumberOfPieces1) as RefNumberOfPieces1
	,b.RefItemNumber1
	,isnull(b.RefNumberOfPieces2,d.RefNumberOfPieces2) as RefNumberOfPieces2
	,b.RefItemNumber2
	,isnull(b.RefNumberOfPieces3,d.RefNumberOfPieces3) as RefNumberOfPieces3
	,b.RefItemNumber3
	,b.RefNumberOfPieces4
	,b.RefItemNumber4
	,b.RefNumberOfPieces5
	,b.RefItemNumber5
	,b.IsWTS
	--,b.D365StartPostTime as PostToD365
	--PostToeWArenavi
	--EwarenaviStartPostTime
	--EwarenaviLog

	 /** DOT_MovementJournalChild ***/
	--,c.ItemNumber
	--,c.Configuration as ItemSize
	--,c.Warehouse
	--,c.Location
	--,c.Quantity
	,c.ResourceGroup
	,isnull(c.Shift,e.Shift) as Shift
	,isnull(c.MovementJournalId,e.MovementJournalId) as MovementJournalId

	 /** DOT_PickingList ***/
	--,d.PSIReworkOrderNo as BatchOrderNumber
	--,d.ItemNumber
	--,d.Configuration as ItemSize
	--,d.Location
	,isnull(d.QCType,e.QCType) as QCType
	--,d.SalesOrderNumber
	--,d.TenPcsWt as TenPcsWeight
	,isnull(d.TenPcsWt,e.Weightof10Pcs) as TenPcsWeight
	--,d.ReferenceItemNumber as FGItemNo
	--,d.RefNumberOfPieces1
	--,d.RefNumberOfPieces2
	--,d.RefNumberOfPieces3
	--,d.PickListJournalId as PickingJournalId

	 /** DOT_RafStgTable ***/
	--,e.BatchOrderNumber
	,e.BatchWeight
	--,e.Weightof10Pcs as TenPcsWeight
	--,e.ItemNumber
	--,e.Configuration as ItemSize
	--,e.Location
	,isnull(e.OperationNo,f.OperationNo) as OperationNo
	--,e.QCType
	--,e.RAFGoodQty
	--,e.Shift
	--,e.PickListJournalId as PickingJournalId
	--,e.MovementJournalId
	--,e.RAFJournalId
	--,e.RouteCardJournalId
	,e.HBBatchNumber
	,e.RAFHBSample
	,e.VTBatchNumber
	,e.RAFVTSample
	,e.WTBatchNumber
	,e.RAFWTSample
	,e.SampleWarehouse
	--,e.Warehouse
	--,e.Resource
	,isnull(e.Resource,f.Resource) as Resource
	--,e.RouteCategory
	,isnull(e.RouteCategory,f.RouteCategory) as RouteCategory
	,e.RejectedQuantity
	,e.SecondGradeQuantity
	,e.RejectedSampleQuantity

	 /** DOT_RwkBatchOrderCreationChildTable ***/
	--,f.ReworkOrder as BatchOrderNumber
	--,f.ItemNumber
	--,f.Configuration as ItemSize
	--,f.Quantity
	,f.DeliveryDate
	,f.Pool
	--,f.RouteCategory
	--,f.Warehouse
	--,f.OperationNo
	--,f.Resource

	 /** DOT_TransferJournal ***/
	--,g.ReferenceItemNumber as FGItemNo
	--,g.BatchNumber as BatchOrderNumber
	--,g.ItemNumber
	--,g.Configuration as ItemSize
	--,g.Warehouse
	--,g.Location
	--,g.Quantity
	--PalletNo
	,g.TransferJournalId
	,g.IsOrignalTemppack
	,a.CreationTime
	,a.CreatorUserId
	,a.IsDeleted
	,a.DeleterUserId
	,a.DeletionTime
	,a.LastModifierUserId
	,a.LastModificationTime
	,a.EwarenaviLog
	,a.EwarenaviStartPostTime
	,a.IsEwarenaviPosted
	,a.IsMigratedFromAX6
	,a.PalletSerialNo
	,a.PlantNo
	,a.ProdId
	,a.DataAreaId
	,a.PreshipmentCases as ParentPreshipmentCases
	,a.FGQuantity
	,a.GloveSampleQuantity
	,a.Preshipment
	,a.IsConsolidated
	from DOT_FloorAxIntParentTable a with(nolock)
	left join DOT_FGJournalTable b with(nolock) on a.id = b.ParentRefRecId
	left join DOT_MovementJournalChild c with(nolock) on a.id = c.ParentRefRecId
	left join DOT_PickingList d with(nolock) on a.id = d.ParentRefRecId
	left join DOT_RafStgTable e with(nolock) on a.id = e.ParentRefRecId
	left join DOT_RwkBatchOrderCreationChildTable f with(nolock) on a.id = f.ParentRefRecId
	left join DOT_TransferJournal g with(nolock) on a.id = g.ParentRefRecId
	where a.IsDeleted = 0
) a
GO
PRINT N'Creating Function [dbo].[UFN_DOT_GetAllSummary]...';


GO
-- =============================================
-- Author:		Amir
-- Create date: 23/06/2021
-- Description:	select all record from summary tables
-- =============================================
CREATE FUNCTION [dbo].[UFN_DOT_GetAllSummary]
(	
)
RETURNS TABLE 
AS
RETURN
SELECT * FROM (

SELECT 
      [CreationTime] as ConsolidationDateAndTime
	  ,PostingDateTime
      ,[Id]
      ,[ItemNumber]
      ,ItemSize as Configuration
      ,null as BatchWeight
      ,null as QCType
      ,null as [RAFGoodQty]
      --,null as Shift
      ,null as [Warehouse]
      ,null as [Resource]
      ,null as [RejectedQuantity]
      ,null as [SecondGradeQuantity]
      ,null as [RejectedSampleQuantity]
      ,Null as HBBatchNumber
      ,Null as RAFHBSample
      ,Null as RAFVTSample
      ,Null as RAFWTSample
      ,Null as SampleWarehouse
      ,Null as VTBatchNumber
      ,Null as WTBatchNumber
      ,[PickListJournalId]
      ,[RAFJournalId]
      ,[RouteCardJournalId]
      ,[BatchOrderNumber]
      ,[MovementJournalId]
      ,[Location]
      ,[Quantity]
      ,[BaseQuantity]
      ,null as [RouteCategory]
      ,[OperationNo]
      ,null as [SecondGradeWarehouse]
      ,[CustomerReference]
	  ,D365BatchNumber
	  ,D365Parameter
      ,[ModuleSequence]
      ,[SubSequence]
      ,[ErrorMessage]
      ,[FSIdentifier]
      ,[FunctionIdentifier]
      ,[ProcessingStatus]
      ,Null as ResourceGroup
      ,[SalesOrderNumber]
      --,Null as InternalReferenceNumber
      ,Null as TenPcsWt
      --,Null as OldBatchQty
      --,Null as ReferenceItemNumber
      --,Null as RefNumberOfPieces1
      --,Null as RefNumberOfPieces2
      --,Null as RefNumberOfPieces3
      --,Null as RWKReturnMsg
	  ,Null as isRWKDeleted
      ,Null as OriRWKNum
      ,Null as DeliveryDate
      ,Null as Pool
      --,Null as ReworkOrder
      ,Null as Formula
      ,Null as ScanInDateTime
      ,Null as ScanOutDateTime
      ,Null as TransferJournalId
      ,Null as IsOrignalTemppack
      ,Null as FGBatchOrderNumber
      ,[GloveSampleQuantity]
      ,[BatchNumber]
      ,[GloveSize]
      ,[ItemSize]
      ,[Preshipment]
      ,[PreshipmentCases]
	  ,[OriginalPlantNo]
      ,[PlantNo]
	  ,null as SampleCPDConsumptionWeight
	  ,RecordCount
	  ,0 as ParentSrc
  FROM [DOT_FGSumTable] with (nolock) WHERE IsDeleted = 0

UNION

Select
	CreationTime as ConsolidationDateAndTime,
	PostingDateTime,
	Id,
	ItemNumber,
	Configuration,
	Null as BatchWeight,
	Null as QCType,
	Null as RAFGoodQty,
	--Shift,
	Warehouse,
	Null as Resource,
	Null as RejectedQuantity,
	Null as SecondGradeQuantity,
	Null as RejectedSampleQuantity,
	Null as HBBatchNumber,
	Null as RAFHBSample,
	Null as RAFVTSample,
	Null as RAFWTSample,
	Null as SampleWarehouse,
	Null as VTBatchNumber,
	Null as WTBatchNumber,
	Null as PickListJournalId,
	Null as RAFJournalId,
	Null as RouteCardJournalId,
	Null as BatchOrderNumber,
	MovementJournalId,
	Location,
	Quantity,		
    Null as BaseQuantity,
	Null as RouteCategory,
	Null as OperationNo,
	Null as SecondGradeWarehouse,
	Null as CustomerReference,
	D365BatchNumber,
	D365Parameter,
	ModuleSequence,
	SubSequence,
	ErrorMessage,
	FSIdentifier,
	FunctionIdentifier,
	ProcessingStatus, 
	ResourceGroup,
	Null as SalesOrderNumber,
	--Null as InternalReferenceNumber,
	Null as TenPcsWt,
	--Null as OldBatchQty,
	--Null as ReferenceItemNumber,
	--Null as RefNumberOfPieces1,
	--Null as RefNumberOfPieces2,
	--Null as RefNumberOfPieces3,
	--Null as RWKReturnMsg,
	Null as isRWKDeleted,
	Null as OriRWKNum,
	Null as DeliveryDate,
	Null as Pool,
	--Null as ReworkOrder,
	Null as Formula,
	Null as ScanInDateTime,
	Null as ScanOutDateTime,
	Null as TransferJournalId,
	Null as IsOrignalTemppack,
	Null as FGBatchOrderNumber   
	,null as GloveSampleQuantity
    ,null as BatchNumber
    ,null as GloveSize
    ,null as ItemSize
    ,null as Preshipment
    ,null as PreshipmentCases
	,[OriginalPlantNo]
    ,[PlantNo]
	,null as SampleCPDConsumptionWeight
	,null as RecordCount
	,1 as ParentSrc
from DOT_MovementSumTable  with (nolock) WHERE IsDeleted = 0
UNION
SELECT
	CreationTime as ConsolidationDateAndTime,
	PostingDateTime,
	Id,
	ItemNumber,
	Configuration,
	Null as BatchWeight,
	QCType,
	Null as RAFGoodQty,
	--Null as  Shift,
	Warehouse,
	Null as Resource,
	Null as RejectedQuantity,
	Null as SecondGradeQuantity,
	Null as RejectedSampleQuantity,
	Null as HBBatchNumber,
	Null as RAFHBSample,
	Null as RAFVTSample,
	Null as RAFWTSample,
	Null as SampleWarehouse,
	Null as VTBatchNumber,
	Null as WTBatchNumber,
	PickListJournalId,
	Null as RAFJournalId,
	Null as RouteCardJournalId,
	PSIReworkOrderNo as BatchOrderNumber,
	Null as  MovementJournalId,
	Location,
	Null as Quantity,
    Null as BaseQuantity,
	Null as RouteCategory,
	Null as OperationNo,
	Null as SecondGradeWarehouse,
	Null as CustomerReference,
	D365BatchNumber,
	D365Parameter,
	ModuleSequence,
	SubSequence,
	ErrorMessage,
	FSIdentifier,
	FunctionIdentifier,
	ProcessingStatus,
	Null as ResourceGroup,
	SalesOrderNumber,
	--InternalReferenceNumber,
	TenPcsWt,
	--OldBatchQty,
	--ReferenceItemNumber,
	--RefNumberOfPieces1,
	--RefNumberOfPieces2,
	--RefNumberOfPieces3,
	--Null as RWKReturnMsg,
	Null as isRWKDeleted,
	Null as OriRWKNum,
	Null as DeliveryDate,
	Null as Pool,
	--Null as ReworkOrder,
	Null as Formula,
	Null as ScanInDateTime,
	Null as ScanOutDateTime,
	Null as TransferJournalId,
	Null as IsOrignalTemppack,
	Null as FGBatchOrderNumber	
	,null as GloveSampleQuantity
    ,null as BatchNumber
    ,null as GloveSize
    ,null as ItemSize
    ,null as Preshipment
    ,null as PreshipmentCases
	,[OriginalPlantNo]
    ,[PlantNo]
	,null as SampleCPDConsumptionWeight
	,null as RecordCount
	,2 as ParentSrc
FROM DOT_PickingSumTable with (nolock) WHERE IsDeleted = 0
UNION
SELECT
	CreationTime as ConsolidationDateAndTime,
	PostingDateTime,
	Id,
	ItemNumber,
	ItemSize as Configuration,
	BatchWeight,
	Null as QCType,
	RAFGoodQty,
	--Null as  Shift,
	Warehouse,
	Null as Resource,
	Null as RejectedQuantity,
	Null as SecondGradeQuantity,
	Null as RejectedSampleQuantity,
	Null as HBBatchNumber,
	RAFHBSample,
	RAFVTSample,
	RAFWTSample,
	SampleWarehouse,
	VTBatchNumber,
	WTBatchNumber,
	PickListJournalId,
	RAFJournalId,
	RouteCardJournalId,
	BatchOrderNumber,
	MovementJournalId,
	Location,
	Null as Quantity,
    Null as BaseQuantity,
	Null as RouteCategory,
	Null as OperationNo,
	Null as SecondGradeWarehouse,
	Null as CustomerReference,
	D365BatchNumber,
	D365Parameter,
	ModuleSequence,
	SubSequence,
	ErrorMessage,
	FSIdentifier,
	FunctionIdentifier,
	ProcessingStatus,
	Null as ResourceGroup,
	Null as SalesOrderNumber,
	--Null as InternalReferenceNumber,
	Null as TenPcsWt,
	--Null as OldBatchQty,
	--Null as ReferenceItemNumber,
	--Null as RefNumberOfPieces1,
	--Null as RefNumberOfPieces2,
	--Null as RefNumberOfPieces3,
	--Null as RWKReturnMsg,
	Null as isRWKDeleted,
	Null as OriRWKNum,
	Null as DeliveryDate,
	Null as Pool,
	--Null as ReworkOrder,
	Null as Formula,
	Null as ScanInDateTime,
	Null as ScanOutDateTime,
	Null as TransferJournalId,
	Null as IsOrignalTemppack,
	Null as FGBatchOrderNumber
	,null as GloveSampleQuantity
    ,null as BatchNumber
    ,null as GloveSize
    ,ItemSize
    ,null as Preshipment
    ,null as PreshipmentCases
	,[OriginalPlantNo]
    ,[PlantNo]
	,SampleCPDConsumptionWeight
	,RecordCount
	,3 as ParentSrc
FROM DOT_RafSumTable with (nolock) WHERE IsDeleted = 0
UNION
SELECT
	CreationTime as ConsolidationDateAndTime,
	PostingDateTime,
	Id,
	ItemNumber,
	Configuration,
	BatchWeight,
	QCType,
	RAFGoodQty,
	--Null as  Shift,
	Warehouse,
	Resource,
	RejectedQuantity,
	SecondGradeQuantity,
	RejectedSampleQuantity,
	HBBatchNumber,
	RAFHBSample,
	RAFVTSample,
	RAFWTSample,
	SampleWarehouse,
	VTBatchNumber,
	WTBatchNumber,
	PickListJournalId,
	RAFJournalId,
	RouteCardJournalId,
	ReworkOrder as BatchOrderNumber,
	MovementJournalId,
	Location,
	Quantity,
    Null as BaseQuantity,
	RouteCategory,
	OperationNo,
	SecondGradeWarehouse,
	BatchNumber as CustomerReference,
	D365BatchNumber,
	D365Parameter,
	ModuleSequence,
	SubSequence,
	ErrorMessage,
	FSIdentifier,
	FunctionIdentifier,
	ProcessingStatus,
	Null as ResourceGroup,
	Null as SalesOrderNumber,
	--Null as InternalReferenceNumber,
	Weightof10Pcs as TenPcsWt,
	--Null as OldBatchQty,
	--Null as ReferenceItemNumber,
	--Null as RefNumberOfPieces1,
	--Null as RefNumberOfPieces2,
	--Null as RefNumberOfPieces3,
	--RWKReturnMsg, -- 
	isRWKDeleted, --
	OriRWKNum,
	DeliveryDate,
	Pool,
	Null as Formula,
	Null as ScanInDateTime,
	Null as ScanOutDateTime,
	Null as TransferJournalId,
	Null as IsOrignalTemppack,
	Null as FGBatchOrderNumber,
	null as GloveSampleQuantity,
    BatchNumber
    ,null as GloveSize
    ,null as ItemSize
    ,null as Preshipment
    ,null as PreshipmentCases
	,[OriginalPlantNo]
    ,[PlantNo]
	,null as SampleCPDConsumptionWeight
	,null as RecordCount
	,4 as ParentSrc
FROM DOT_RwkcrSumTable with (nolock) WHERE IsDeleted = 0
UNION
SELECT
	CreationTime as ConsolidationDateAndTime,
	PostingDateTime,
	Id,
	ItemNumber,
	Configuration,
	Null as BatchWeight,
	Null as QCType,
	Null as RAFGoodQty,
	--Null as  Shift,
	Warehouse,
	Null as Resource,
	Null as RejectedQuantity,
	Null as SecondGradeQuantity,
	Null as RejectedSampleQuantity,
	Null as HBBatchNumber,
	Null as RAFHBSample,
	Null as RAFVTSample,
	Null as RAFWTSample,
	Null as SampleWarehouse,
	Null as VTBatchNumber,
	Null as WTBatchNumber,
	Null as PickListJournalId,
	RAFJournalId,
	Null as RouteCardJournalId,
	BatchOrderNumber,
	MovementJournalId,
	Location,
	Quantity,
    Null as BaseQuantity,
	Null as RouteCategory,
	Null as OperationNo,
	Null as SecondGradeWarehouse,
	BatchNumber as CustomerReference,
	D365BatchNumber,
	D365Parameter,
	ModuleSequence,
	SubSequence,
	ErrorMessage,
	FSIdentifier,
	FunctionIdentifier,
	ProcessingStatus,
	Null as ResourceGroup,
	Null as SalesOrderNumber,
	--Null as InternalReferenceNumber,
	Null as TenPcsWt,
	--Null as OldBatchQty,
	--ReferenceItemNumber,
	--Null as RefNumberOfPieces1,
	--Null as RefNumberOfPieces2,
	--Null as RefNumberOfPieces3,
	--Null as RWKReturnMsg,
	Null as isRWKDeleted,
	Null as OriRWKNum,
	Null as DeliveryDate,
	Null as Pool,
	--Null as ReworkOrder,
	Formula,
	PostingDateTime as ScanInDateTime,
	ScanOutDateTime,
	TransferJournalId,
	IsOrignalTemppack,
	FGBatchOrderNumber
	,null as GloveSampleQuantity
    ,BatchNumber
    ,null as GloveSize
    ,null as ItemSize
    ,null as Preshipment
    ,null as PreshipmentCases
	,[OriginalPlantNo]
    ,[PlantNo]
	,null as SampleCPDConsumptionWeight
	,null as RecordCount
	,5 as ParentSrc
FROM DOT_TransferSumTable with (nolock) WHERE IsDeleted = 0
UNION
SELECT
	CreationTime as ConsolidationDateAndTime,
	PostingDateTime,
	Id,
	ChangedItemNumber as ItemNumber,
	ItemSize as Configuration,
	BatchWeight,
	Null as QCType,
	RAFGoodQty,
	--Null as  Shift,
	Warehouse,
	Null as Resource,
	Null as RejectedQuantity,
	Null as SecondGradeQuantity,
	Null as RejectedSampleQuantity,
	Null as HBBatchNumber,
	RAFHBSample,
	RAFVTSample,
	RAFWTSample,
	SampleWarehouse,
	VTBatchNumber,
	WTBatchNumber,
	PickListJournalId,
	RAFJournalId,
	RouteCardJournalId,
	BatchOrderNumber,
	MovementJournalId,
	Location,
	Null as Quantity,
    Null as BaseQuantity,
	Null as RouteCategory,
	Null as OperationNo,
	Null as SecondGradeWarehouse,
	BatchNumber as CustomerReference,
	D365BatchNumber,
	D365Parameter,
	ModuleSequence,
	SubSequence,
	ErrorMessage,
	FSIdentifier,
	FunctionIdentifier,
	ProcessingStatus,
	Null as ResourceGroup,
	Null as SalesOrderNumber,
	--Null as InternalReferenceNumber,
	Null as TenPcsWt,
	--Null as OldBatchQty,
	--Null as ReferenceItemNumber,
	--Null as RefNumberOfPieces1,
	--Null as RefNumberOfPieces2,
	--Null as RefNumberOfPieces3,
	--Null as RWKReturnMsg,
	Null as isRWKDeleted,
	Null as OriRWKNum,
	Null as DeliveryDate,
	Null as Pool,
	--Null as ReworkOrder,
	Null as Formula,
	Null as ScanInDateTime,
	Null as ScanOutDateTime,
	Null as TransferJournalId,
	Null as IsOrignalTemppack,
	Null as FGBatchOrderNumber
	,null as GloveSampleQuantity
    ,BatchNumber
    ,null as GloveSize
    ,ItemSize
    ,null as Preshipment
    ,null as PreshipmentCases
	,[OriginalPlantNo]
    ,[PlantNo]
	,0 as SampleCPDConsumptionWeight
	,RecordCount
	,6 as ParentSrc
FROM DOT_ChangeGloveSumTable with (nolock) WHERE IsDeleted = 0
) a
GO
PRINT N'Creating Function [dbo].[UFN_DOT_GetFinalPackNotConsolidatedStaging]...';


GO
-- ==========================================================================
-- Change History    
-- Date			Author		Comments    
-- -----		------		-----------------------------       
-- 06/08/2021	Max He		Get Final Pack not completed and not yet mark detail staging 
--							use for consolidation cut-off job and manual consolidation screen
-- ==========================================================================
--select * from dbo.UFN_DOT_GetFinalPackNotConsolidatedStaging('2021-07-30 00:00:00.000','2021-08-05 23:59:59.999','','','','SBC')
--select * from dbo.UFN_DOT_GetFinalPackNotConsolidatedStaging('2021-08-06 00:00:00.000','2021-08-06 23:59:59.999','','HNBON000373100','','')
--select * from dbo.UFN_DOT_GetFinalPackNotConsolidatedStaging('2021-07-06 00:00:00.000','2021-08-06 13:42:15.999','','','','SBC')
--select * from dbo.UFN_DOT_GetFinalPackNotConsolidatedStaging('2019-04-01 00:00:00.000','2021-08-08 13:02:27.778','','HNBON000362512','','')
CREATE FUNCTION [dbo].[UFN_DOT_GetFinalPackNotConsolidatedStaging]            
(         
--declare  
  @CutOffTimeFrom  varchar(100)='2019-04-01 00:00:00.000',
  @CutOffTimeTo  varchar(100)='2021-08-07 02:38:27.778',
  @PlantNo NVARCHAR(500)='',
  @BatchOrderNumber NVARCHAR(100) = '', 
  @CustomerRef NVARCHAR(100) = '',
  @FunctionId NVARCHAR(100) = ''
)       
RETURNS TABLE
AS            
RETURN   
SELECT * 
--into #tmpFPStagingDetail
FROM (
		select b.ParentRefRecId,b.BatchOrderNumber,b.PostingDateTime,a.FunctionIdentifier
		,case when (a.BatchNumber IS NULL) OR (LEN(a.BatchNumber) = 0) then b.BatchNumber else a.BatchNumber end as BatchNumber,a.Sequence
		,a.ReferenceBatchNumber1,a.ReferenceBatchSequence1,a.ReferenceBatchNumber2,a.ReferenceBatchSequence2,a.ReferenceBatchNumber3
		,a.ReferenceBatchSequence3,a.ReferenceBatchNumber4,a.ReferenceBatchSequence4,a.ReferenceBatchNumber5,a.ReferenceBatchSequence5
		
		from DOT_FloorAxIntParentTable a with(nolock)
			join (select bb.ParentRefRecId,bb.BatchOrderNumber,bb.PostingDateTime,bb.BatchNumber
					from DOT_FGJournalTable bb with(nolock) 
					where bb.IsDeleted = 0 
					and bb.PostingDateTime > = @CutOffTimeFrom 
					and bb.PostingDateTime < = @CutOffTimeTo
					and bb.BatchOrderNumber = case when (@BatchOrderNumber IS NULL) OR (LEN(@BatchOrderNumber) = 0) then bb.BatchOrderNumber else @BatchOrderNumber end
					and bb.CustomerReference = case when (@CustomerRef IS NULL) OR (LEN(@CustomerRef) = 0) then bb.CustomerReference else @CustomerRef end) b 
			on a.id=b.ParentRefRecId
		where 
		a.PlantNo in (case when (@PlantNo IS NULL) OR (LEN(@PlantNo) = 0) then a.PlantNo else @PlantNo end)
		and a.FunctionIdentifier = case when (@FunctionId IS NULL) OR (LEN(@FunctionId) = 0) then a.FunctionIdentifier else @FunctionId end
		and a.ProcessingStatus <>3 -- not complete 
		and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0 
		and a.AutoConsoleMarking = 0 and a.IsConsolidated = 1 
	
) aa
GO
PRINT N'Altering Function [dbo].[ufn_GetBatchSummaryTable]...';


GO
    
-- =======================================================    
-- Name:   ufn_GetBatchSummaryTable    
-- Purpose:   Gets balance pcs for a batch    
-- =======================================================    
-- Change History    
-- Date         Author     Comments    
-- -----        ------     -----------------------------    
-- 31/05/2019  Kamil    Create.    
-- 29/08/2019  Kamil    Fix PT's TotalPCs rounding issue    
-- 09/12/2019  yiksiu	Add GloveTransfer module (PSI glove)
-- 28/08/2020  Azman    SPP Enhancement   
-- 21/12/2020  Azrul    NGC merged with BB SPP       
-- =======================================================    
ALTER FUNCTION [dbo].[ufn_GetBatchSummaryTable](@SerialNumber NUMERIC)     
    
RETURNS @TempSummaryTable TABLE    
(    
 ID INT IDENTITY(1, 1)    
 ,ProcessInd NVARCHAR(10)    
 ,BalancePcs DECIMAL(18, 3)    
 ,PackedPcs DECIMAL(18, 3)    
 ,RejectPcs DECIMAL(18, 3)    
 ,GloveTransferPcs DECIMAL(18, 3)
 ,SumPackedPcs DECIMAL(18, 3)
 ,SumRejectPcs DECIMAL(18, 3)
 ,SumGloveTransferPcs DECIMAL(18, 3)
 ,ProcessDate DATETIME    
)    
    
AS    
BEGIN    
    
 DECLARE @TempBatchProcesses TABLE(    
  ProcessInd NVARCHAR(10)    
  ,Pcs DECIMAL(18, 3)    
  ,ProcessDate DATETIME    
  ,ItemId NVARCHAR(80)    
  ,BatchStatus NVARCHAR(30)    
  )    
    
 DECLARE @TempProcessingTable TABLE(    
  ID INT IDENTITY(1, 1)    
  ,ProcessInd NVARCHAR(10)    
  ,Pcs DECIMAL(18, 3)    
  ,ProcessDate DATETIME    
  ,ItemId NVARCHAR(80)    
  ,BatchStatus NVARCHAR(30)    
  )    
    
 --inser pn info    
 INSERT INTO @TempBatchProcesses    
 SELECT 'PN'    
  ,TotalPCs    
  ,BatchCardDate    
  ,NULL    
  ,NULL    
 FROM Batch WITH(NOLOCK)    
 WHERE SerialNumber = @SerialNumber    
    
 --insert qc info    
 INSERT INTO @TempBatchProcesses    
 SELECT 'QC'    
  ,(InnerBoxCount * PackingSize)    
  ,BatchEndTime    
  ,NULL    
  ,BatchStatus    
 FROM QCYieldAndPacking WITH(NOLOCK)    
 WHERE SerialNumber = @SerialNumber    
 AND BatchEndTime IS NOT NULL    
    
 --insert pt info    
 INSERT INTO @TempBatchProcesses    
 SELECT 'PT'    
  ,ROUND((BatchWeight*10000)/TenPcsWeight,-1)--(BatchWeight/TenPcsWeight) * 10000 -- yiksiu: PT rounding issue    
  ,LastModifiedOn    
  ,NULL    
  ,NULL    
 FROM PTScanBatchCard WITH(NOLOCK)    
 WHERE SerialNumber = @SerialNumber    
 AND LastModifiedOn IS NOT NULL    
    
 --if exists then "use 3 batch card to change with 1 lot number" is not already applied yet for the data    
 IF EXISTS(SELECT InternalLotNumber FROM FPChangeBatchCard WITH(NOLOCK) WHERE NewSerialNumber = @SerialNumber)    
 BEGIN    
  --insert fp info excluding from fp change batch card    
  INSERT INTO @TempBatchProcesses    
  SELECT 'FP'    
   ,(c.InnerBoxCapacity * a.BoxesPacked)    
   ,PackDate    
   ,b.ItemNumber    
   ,NULL    
  FROM FinalPackingBatchInfo a WITH(NOLOCK)    
  INNER JOIN FinalPacking b WITH(NOLOCK) ON a.InternalLotNumber = b.InternalLotNumber    
  INNER JOIN PurchaseOrderItem c WITH(NOLOCK) ON b.PONumber = c.PONumber    
   AND b.Size = c.ItemSize    
   AND b.ItemNumber = c.ItemNumber    
  WHERE a.SerialNumber = @SerialNumber    
  AND a.InternalLotNumber     
  NOT IN (SELECT InternalLotNumber FROM FPChangeBatchCard WITH(NOLOCK) WHERE NewSerialNumber = @SerialNumber)    
    
  --insert fp info from fp change batch card     
  INSERT INTO @TempBatchProcesses    
  SELECT 'FP'    
   ,(c.InnerBoxCapacity * a.BoxesPacked)    
   ,d.LastModifiedOn    
   ,b.ItemNumber    
   ,NULL    
  FROM FinalPackingBatchInfo a WITH(NOLOCK)    
  INNER JOIN FinalPacking b WITH(NOLOCK) ON a.InternalLotNumber = b.InternalLotNumber    
  INNER JOIN PurchaseOrderItem c WITH(NOLOCK) ON b.PONumber = c.PONumber    
  INNER JOIN FPChangeBatchCard d WITH(NOLOCK) ON d.ChangeBatchCardId =    
 (SELECT TOP 1 ChangeBatchCardId FROM FPChangeBatchCard WITH(NOLOCK) WHERE NewSerialNumber = a.SerialNumber AND InternalLotNumber = a.InternalLotNumber)    
  AND b.Size = c.ItemSize    
  AND b.ItemNumber = c.ItemNumber    
  WHERE a.SerialNumber = @SerialNumber
    
 END    
 ELSE    
 BEGIN    
  --insert fp info excluding from fp change batch card    
  INSERT INTO @TempBatchProcesses    
  SELECT 'FP'    
   ,CASE WHEN a.BoxesPacked = 0 THEN a.Pcs ELSE (c.InnerBoxCapacity * a.BoxesPacked) END
   ,PackDate       
   ,b.InternalLotNumber    
   ,NULL    
  FROM FinalPackingBatchInfo a WITH(NOLOCK)    
  INNER JOIN FinalPacking b WITH(NOLOCK) ON a.InternalLotNumber = b.InternalLotNumber    
  INNER JOIN PurchaseOrderItem c WITH(NOLOCK) ON b.PONumber = c.PONumber    
   AND b.Size = c.ItemSize    
   AND b.ItemNumber = c.ItemNumber    
  WHERE a.SerialNumber = @SerialNumber    
  AND a.InternalLotNumber     
  NOT IN (SELECT InternalLotNumber FROM FPChangeBatchCardLine a WITH(NOLOCK) INNER JOIN    
  FPChangeBatchCard b WITH(NOLOCK) ON a.ChangeBatchCardId = b.ChangeBatchCardId WHERE a.NewSerialNumber = @SerialNumber)    
    
  --insert fp info from fp change batch card     
  INSERT INTO @TempBatchProcesses    
  SELECT 'FP'     
   ,(e.InnerBoxCapacity * c.BoxesPacked)    
   ,b.LastModifiedOn    
   ,d.ItemNumber
   ,NULL    
  FROM FPChangeBatchCardLine a WITH(NOLOCK)    
  INNER JOIN FPChangeBatchCard b WITH(NOLOCK) ON a.ChangeBatchCardId = b.ChangeBatchCardId     
  INNER JOIN FinalPackingBatchInfo c WITH(NOLOCK) ON a.NewSerialNumber = c.SerialNumber AND b.InternalLotNumber = c.InternalLotNumber    
  INNER JOIN FinalPacking d WITH(NOLOCK) ON d.InternalLotNumber = c.InternalLotNumber    
  INNER JOIN PurchaseOrderItem e WITH(NOLOCK) ON d.PONumber = e.PONumber    
    AND d.Size = e.ItemSize    
    AND d.ItemNumber = e.ItemNumber    
  WHERE a.NewSerialNumber = @SerialNumber    
 END    

  -- insert Glove Transfer (Add GloveTransfer module (PSI glove))
  INSERT INTO @TempBatchProcesses
  SELECT 'GT'
    ,a.AssignedQuantity
    ,a.ModifiedDate
    ,NULL
    ,NULL
  FROM GloveTransferRequestAssignment a (NOLOCK)
  JOIN GloveTransferRequestDetail b (NOLOCK) ON a.GloveTransferRequestDetailId = b.GloveTransferRequestDetailId 
  JOIN GloveTransferRequest c (NOLOCK) ON b.GloveTransferRequestId = c.GloveTransferRequestId
  WHERE a.SerialNumber = @SerialNumber
    AND c.GloveTransferAssignmentStatus = 1 -- Confirmed the register list. before sent to PSI personal. PSI personal will confirm again once received (GloveTransferReceiptStatus)
    -- // Approved > Register serialNo > Confirmed  -- SerilaNo always in approved status
    --AND c.GloveTransferRequestStatus = 2 -- glove request always approved
   
 --Azman 27082020 Surgical Packing Plan Start    
    
 INSERT INTO @TempBatchProcesses    
 select 'SPP', A.ReservedQty, A.CreatedDate, NULL, NULL from SurgicalPackingPlanDetails (nolock) A    
 INNER JOIN SurgicalPackingPlan (nolock) B ON A.SurgicalPackingPlanId = B.SurgicalPackingPlanId    
 WHERE B.PlanStatus = 1        
 AND A.SerialNumber = @SerialNumber    
    
 --Azman 27082020 Surgical Packing Plan End   
    
 --insert id based on process date    
 INSERT INTO @TempProcessingTable    
 SELECT ProcessInd, Pcs, ProcessDate, ItemId, BatchStatus FROM @TempBatchProcesses ORDER BY ProcessDate ASC    
    
 DECLARE @Iteration INT    
 DECLARE @IterationMax INT    
 DECLARE @ProcessInd NVARCHAR(10)    
 DECLARE @Pcs DECIMAL(18, 3)    
 DECLARE @PrevPcs DECIMAL(18, 3)    
 DECLARE @ProcessDate DATETIME    
 DECLARE @BalancePcs DECIMAL(18, 3)    
 DECLARE @PrevBalancePcs DECIMAL(18, 3)    
 DECLARE @PNProcessDate DATETIME    
 DECLARE @ItemId NVARCHAR(80)    
 DECLARE @SumPackedPcs DECIMAL(18, 3)    
 DECLARE @SumRejectPcs DECIMAL(18, 3)    
 DECLARE @SumGloveTransferPcs DECIMAL(18, 3)
 DECLARE @BatchStatus NVARCHAR(30)    
 DECLARE @PrevBatchStatus NVARCHAR(30)    
 DECLARE @RejectPcs DECIMAL(18, 3)    
      
 SELECT @BalancePcs = Pcs, @PNProcessDate = ProcessDate FROM @TempProcessingTable WHERE ProcessInd = 'PN'    
    
 SELECT @IterationMax = COUNT(ID) FROM @TempProcessingTable    
    
 --for pn/start pcs    
 INSERT INTO @TempSummaryTable    
 VALUES ('PN',@BalancePcs,0,0,0,0,0,0,@PNProcessDate)    
    
 SET @Iteration = 1    
     
 WHILE (@Iteration) <= (@IterationMax)      
 BEGIN    
  --select current processing data    
  SELECT @ProcessInd = ProcessInd    
   ,@Pcs = Pcs    
   ,@ProcessDate = ProcessDate    
   ,@ItemId = ItemId    
   ,@BatchStatus = BatchStatus    
  FROM @TempProcessingTable    
  WHERE ID = @Iteration    
      
  SELECT @PrevBalancePcs = BalancePcs    
  FROM @TempSummaryTable    
  WHERE ID = @Iteration - 1    
    
  SELECT @PrevBatchStatus = BatchStatus, @PrevPcs = Pcs    
  FROM @TempProcessingTable    
  WHERE ID = @Iteration - 1    
    
  SELECT @SumPackedPcs = SUM(PackedPcs), @SumRejectPcs = SUM(RejectPcs), @SumGloveTransferPcs = SUM(GloveTransferPcs)    
  FROM @TempSummaryTable    
      
  IF (@BalancePcs > 0)    
  BEGIN    
   IF (@ProcessInd = 'FP' )    
   BEGIN    
    --if it is surgical, pcs is divided by 2    
    --IF EXISTS(SELECT 1 FROM DOT_FSItemMaster WHERE ITEMID = @ItemId AND ItemType = 8)    
    IF EXISTS(SELECT 1 FROM SurgicalPackingPlan WITH(NOLOCK) WHERE InternalLotNo = @ItemId AND PlanStatus IN (2,3))    
    BEGIN    
     SET @Pcs = @Pcs    
     SET @ProcessInd = @ProcessInd + '(S)'    
    END    
 --NGC D365 version START  
    ELSE IF EXISTS(SELECT 1 FROM FinalPacking A WITH(NOLOCK) INNER JOIN DOT_FSBrandLines B WITH(NOLOCK) ON A.ItemNumber = B.ITEMID 
	INNER JOIN DOT_FSItemMaster C ON B.ITEMID = C.ITEMID WHERE A.InternalLotNumber = @ItemId AND C.ITEMTYPE = 8)    
 --NGC D365 version END  
    BEGIN    
     SET @Pcs = @Pcs / 2    
     SET @ProcessInd = @ProcessInd + '(S)'    
    END    
    
    SET @BalancePcs = @PrevBalancePcs - @Pcs    
    
    INSERT INTO @TempSummaryTable    
    VALUES (@ProcessInd,@BalancePcs,@Pcs,0,0,@SumPackedPcs+@Pcs,@SumRejectPcs,@SumGloveTransferPcs,@ProcessDate)    
   END    
   ELSE IF (@ProcessInd = 'QC' OR @ProcessInd = 'PT')    
   BEGIN    
    --if previous status is split batch, add prev pcs to current pcs    
    IF (@PrevBatchStatus = 'Split Batch')    
    BEGIN    
     SET @Pcs = @Pcs + @PrevPcs    
    END    
    
    --if split batch or qc type changed, there is no rejection     
    IF (@BatchStatus = 'Split Batch') OR (@BatchStatus = 'QC Type Changed')    
    BEGIN    
     SET @BalancePcs = @PrevBalancePcs      
     SET @RejectPcs = 0    
    
     IF (@BatchStatus = 'Split Batch')    
      SET @ProcessInd = @ProcessInd + '(SB)'    
     ELSE    
      SET @ProcessInd = @ProcessInd + '(TC)'    
    
     INSERT INTO @TempSummaryTable    
     VALUES (@ProcessInd,@BalancePcs,0,@RejectPcs,0,@SumPackedPcs,@SumRejectPcs,@SumGloveTransferPcs,@ProcessDate)    
    END    
    ELSE    
    BEGIN    
     --check if latest pcs is greater than prev balance pcs. if greater, take prev balance pcs as default    
     IF (@Pcs > @PrevBalancePcs)    
     BEGIN    
      SET @BalancePcs = @PrevBalancePcs    
    
      INSERT INTO @TempSummaryTable    
      VALUES (@ProcessInd,@BalancePcs,0,0,0,@SumPackedPcs,@SumRejectPcs,@SumGloveTransferPcs,@ProcessDate)    
     END    
     ELSE    
     BEGIN    
      --PT is excluded temporarily until PT reverse calculation bugfix is implemented in NGC    
      --please remove this checking, only take the if condition only    
      IF (@ProcessInd = 'QC')    
      BEGIN           
       SET @BalancePcs = @Pcs    
       SET @RejectPcs = (@PrevBalancePcs - @Pcs)    
      END  
      ELSE    
      BEGIN    
       SET @BalancePcs = @PrevBalancePcs    
       SET @RejectPcs = 0    
      END    
    
      INSERT INTO @TempSummaryTable    
      VALUES (@ProcessInd,@BalancePcs,0,@RejectPcs,0,@SumPackedPcs,@SumRejectPcs+@RejectPcs,@SumGloveTransferPcs,@ProcessDate)    
     END    
    END    
   END
   ELSE IF (@ProcessInd = 'GT')
   BEGIN 
    SET @BalancePcs = @PrevBalancePcs - @Pcs

    INSERT INTO @TempSummaryTable
    VALUES (@ProcessInd,@BalancePcs,0,0,@Pcs,@SumPackedPcs,@SumRejectPcs,@SumGloveTransferPcs+@Pcs,@ProcessDate)
   END    
   ELSE IF (@ProcessInd = 'SPP') -- Added by Azman (SPP)    
   BEGIN     
   SET @BalancePcs = @PrevBalancePcs - @Pcs    
    
   INSERT INTO @TempSummaryTable    
   VALUES (@ProcessInd,@BalancePcs,@Pcs,0,0,0,0,0,@ProcessDate)    
   END 
  END    
    
  SET @Iteration = @Iteration + 1    
 END    
    
 RETURN    
END

GO
PRINT N'Creating View [dbo].[View_DOT_GloveRelQcType]...';


GO

-- =======================================================
-- Name:			USP_GET_TotalPcsForQCPackingYield
-- Purpose: 		Get Total Pcs for Scan Out Batch
-- =======================================================
-- Change History
-- Date         Author     Comments
-- -----        ------     -----------------------------
-- 21/02/2019 	Max			for simplify joining in the all exsisting store-prod.
-- =======================================================
CREATE VIEW [dbo].[View_DOT_GloveRelQcType]
AS 
SELECT im.ItemId AS GLOVECODE,qctype.QCType, ex.*
FROM DOT_FSItemMaster im WITH(NOLOCK)
JOIN DOT_FSGloveCode glove WITH(NOLOCK) ON im.Id=glove.ItemRecordId
JOIN DOT_GLOVERELQCTYPE ex WITH(NOLOCK) ON glove.AvaGlovecodeTable_Id=ex.GloveRefRecId
JOIN DOT_FSQCTypeTable qctype WITH(NOLOCK) ON ex.QCTypeId=qctype.Id
GO
PRINT N'Creating View [dbo].[VW_AXSOline_CRS]...';


GO

-- =================================================================            
-- Author:  <Azrul Amin>            
-- Modify date: <27-Feb-2018>            
-- Description: <View for Sales Order Integrate to Floor System>           
          
-- Author:  <Pang Yik Siu>            
-- Modify date: <14-Mar-2020>            
-- Description: <Add Customer Size>       

-- Author:  <Maizatul Mustapa>            
-- Modify date: <3-Mar-2022>            
-- Description: <recreate from VW_AXSOline for crs report>        
           
-- =================================================================            
CREATE VIEW [dbo].[VW_AXSOline_CRS]      
AS           
SELECT           
SL.INVENTTRANSID,          
im.Name as ItemName,          
im.ITEMTYPE,          
SL.Salesid ,ST.PurchOrderFormNum,ST.CustomerRef ,ST.ShippingDateConfirmed,          
im.ItemId,          
SL.Name,           
SL.configuration as HartalegaCommonSize, --bl.HartalegaCommonSize,       
SL.CustomerSize as CustomerSize,          
isnull(SL.NetWeight,0) as NetWeight,           
isnull(SL.GrossWeight,0) as GrossWeight,          
SL.GlovesInnerboxNo as NumberGlovesInnerbox,          
SL.InnerboxinCaseNo as NumberInnerBoxInOuter,          
SL.InnerLabelSet,           
SL.OuterLabelSetNo as OuterLabelSet,          
SL.PreshipmentPlan as PreshipmentSamplingPlan,           
SL.PalletCapacity,          
SL.GLOVECODE,          
SL.AlternateGloveCode1,           
SL.AlternateGloveCode2,           
SL.AlternateGloveCode3,          
SL.LINENUM,          
SL.CONFIGURATION,          
SL.CONFIGURATIONNAME,           
SL.ManufacturingDateOn as ManufacturingDateBasis,          
SL.LotVerification as InnerVerification,          
SL.GCLabel  as OuterVerification,          
SL.DOTCUSTOMERLOTID as CUSTOMERLOTID,          
SL.InnerProductCode,          
SL.InnerDateFormat,          
SL.OuterProductCode,          
SL.OuterDateFormat,          
SL.Expiry,          
SL.SpecialInnerCode,          
SL.SpecialInnerCharacter as SpecialInnerCodeCharacter,          
SL.Reference1,           
SL.Reference2,          
SL.ReceiptDateRequested,          
--ST.DOTManufacturingETD as ShippingDateRequested,-- standard          
ST.DOTCustMfgDate as ShippingDateRequested,-- standard          
SL.SalesQty,-- standard          
ST.SalesStatus,-- standard          
ST.SalesName,-- standard          
ST.DocumentStatus, -- standard          
ST.ShippingDateConfirmed as STShippingDateConfirmed,-- standard          
SL.DOTBaseQty as AvaBaseQty,          
ST.DOTCustMfgDate, -- standard          
ST.DOTCustExpDate -- standard          
-- Max he, can not join batch order table because duplicate record show on PO list          
--,bo.BthOrderId as BatchOrder          
,'StartedUp' as ProdStatus -- facked just for fix UI          
,SL.PrintingSize -- for outer label print, 26 Nov 2018 Max He           
,ST.DOTPODate as HSB_CustPODocumentDate --CR-010: PO date and PO received date in SO header          
,ST.DOTPOReceivedDate as HSB_CustPORecvDate --CR-010: PO date and PO received date in SO header          
,ST.WorkflowStatus as WorkOrderStatus -- P7 SurgicalPackingPlan SP used field        
,SL.InnerDateFormat as INNERLABELSETDATEFORMAT -- P7 SurgicalPackingPlan SP used field        
,SL.OuterDateFormat as OUTERLABELSETDATEFORMAT -- P7 SurgicalPackingPlan SP used field        
,ST.DOTManufacturingETD as ManufacturingDateETD -- P7 SurgicalPackingPlan SP used field        
,SL.BARCODE-- P7 SurgicalPackingPlan SP used field        
,SL.BARCODEOUTERBOX -- P7 SurgicalPackingPlan SP used field        
,ST.WorkOrderType
from DOT_FloorSalesLine SL          
Join  DOT_FloorSales ST on SL.SALESID =  ST.SALESID           
join DOT_FSItemMaster im on im.ItemId = SL.ItemId           
--join DOT_FSBrandHeaders bh on bh.ItemId = SL.ItemId          
--join VW_AX_AVABRANDLINE_SALESLINE bl on bl.ItemId = bh.ItemId and bl.CUSTOMERSIZE = SL.CustomerSize         
where exists          
 (select 1 from DOT_FloorD365BO bo with(nolock)          
  where bo.BatchId = st.CustomerRef and bo.Size = case when im.ItemType = 8 then sl.CustomerSize else SL.CONFIGURATION end           
  and bo.ReworkBatch<>'Yes' and bo.ProdStatus='StartedUp')          
 -- Max He, only show sales order that have StartedUp batch order and not rework order          
and  im.ITEMTYPE in (5,6,8,9) -- <> 'GLove'          
and  ST.SALESSTATUS = 1 -- Open Order'Backorder'          
and  ST.DocumentStatus >= 3          
and  ST.WorkflowStatus = 2 -- for HSB version approve enum value is 2      
and  sl.IsDeleted=0      
/****** start original view ******/      
--select FSL.INVENTTRANSID,      
--FSL.ITEMNAME,      
--FSL.ITEMTYPE,      
--SL.Salesid ,SL.PurchOrderFormNum,ST.CustomerRef ,SL.ShippingDateConfirmed,      
--FSL.ItemId,SL.Name, FSL.HartalegaCommonSize,       
--(isnull(FSL.NETWEIGHT,0)/1000) as NETWEIGHT,       
--(isnull(FSL.GROSSWEIGHT,0)/1000) as GROSSWEIGHT,      
--FSL.NUMBERGLOVESINNERBOX,      
--FSL.NUMBERINNERBOXINOUTER,      
--FSL.INNERLABELSET, FSL.OUTERLABELSET,      
--FSL.PRESHIPMENTSAMPLINGPLAN, FSL.PALLETCAPACITY,      
--FSL.GLOVECODE, FSL.ALTERNATEGLOVECODE1, FSL.ALTERNATEGLOVECODE2, FSL.ALTERNATEGLOVECODE3,FSL.LINENUM,      
--FSL.CONFIGURATION , FSL.CONFIGURATIONNAME, FSL.MANUFACTURINGDATEBASIS, FSL.INNERVERIFICATION,FSL.OUTERVERIFICATION,      
--FSL.CUSTOMERLOTID,FSL.INNERPRODUCTCODE, FSL.OUTERPRODUCTCODE,FSL.EXPIRY,FSL.SPECIALINNERCODE,      
--FSL.SPECIALINNERCODECHARACTER,FSL.REFERENCE1, FSL.REFERENCE2,      
--SL.RECEIPTDATEREQUESTED,ST.AVAManufacturingETD as SHIPPINGDATEREQUESTED,SL.SalesQty,      
--ST.SALESSTATUS, ST.SalesName,ST.DocumentStatus , ST.ShippingDateConfirmed as STShippingDateConfirmed,      
--SL.AvaBaseQty      
--from MicrosoftDynamicsAX.dbo.SalesLine SL      
--Join MicrosoftDynamicsAX.dbo.AVAFLOORSALESLINE FSL on FSL.INVENTTRANSID = SL.INVENTTRANSID      
--Join  MicrosoftDynamicsAX.dbo.SalesTable ST on SL.SALESID =  ST.SALESID      
--where FSL.ITEMTYPE in (5,6,8,9)      
--and ST.SALESSTATUS = 1       
--and ST.DocumentStatus >= 3  and ST.DataAreaID ='hngc'  and SL.DataAreaID='hngc' and FSL.DataAreaID='hngc'      
/****** end original view ******/
GO
PRINT N'Creating View [dbo].[VW_RPT_AXSOline]...';


GO
-- =================================================================            
-- Author:  <Azrul Amin>            
-- Modify date: <27-Feb-2018>            
-- Description: <View for Sales Order Integrate to Floor System for Reports>            
        
-- Author:  <Pang Yik Siu>          
-- Modify date: <14-Mar-2020>          
-- Description: <Add Customer Size>         
    
-- Author:  <Pang Yik Siu>      
-- Modify date: <09-Dec-2020>      
-- Description: itrf: 20201126045557226989 Work Order Status Report on Salesline Soft Deleted Enhancement    
-- =================================================================               
CREATE VIEW [dbo].[VW_RPT_AXSOline]          
AS           
SELECT           
SL.INVENTTRANSID,          
im.Name as ItemName,          
im.ITEMTYPE,          
SL.Salesid ,ST.PurchOrderFormNum,ST.CustomerRef ,ST.ShippingDateConfirmed,          
im.ItemId,          
SL.Name,               
SL.configuration as HartalegaCommonSize,       --   bl.HartalegaCommonSize,  
SL.CustomerSize as CustomerSize,        
isnull(SL.NetWeight,0) as NetWeight,           
isnull(SL.GrossWeight,0) as GrossWeight,          
SL.GlovesInnerboxNo as NumberGlovesInnerbox,          
SL.InnerboxinCaseNo as NumberInnerBoxInOuter,          
SL.InnerLabelSet,           
SL.OuterLabelSetNo as OuterLabelSet,          
SL.PreshipmentPlan as PreshipmentSamplingPlan,           
SL.PalletCapacity,          
SL.GLOVECODE,          
SL.AlternateGloveCode1,           
SL.AlternateGloveCode2,           
SL.AlternateGloveCode3,          
SL.LINENUM,          
SL.CONFIGURATION,          
SL.CONFIGURATIONNAME,           
SL.ManufacturingDateOn as ManufacturingDateBasis,          
SL.LotVerification as InnerVerification,          
SL.GCLabel  as OuterVerification,          
SL.DOTCUSTOMERLOTID as CUSTOMERLOTID,          
SL.InnerProductCode,          
SL.InnerDateFormat,          
SL.OuterProductCode,          
SL.OuterDateFormat,          
SL.Expiry,          
SL.SpecialInnerCode,          
SL.SpecialInnerCharacter as SpecialInnerCodeCharacter,          
SL.Reference1,           
SL.Reference2,          
SL.ReceiptDateRequested,          
--ST.DOTManufacturingETD as ShippingDateRequested,-- standard          
ST.DOTCustMfgDate as ShippingDateRequested,-- standard          
SL.SalesQty,-- standard          
ST.SalesStatus,-- standard          
ST.SalesName,-- standard          
ST.DocumentStatus, -- standard          
ST.ShippingDateConfirmed as STShippingDateConfirmed,-- standard          
SL.DOTBaseQty as AvaBaseQty,          
ST.DOTCustMfgDate, -- standard          
ST.DOTCustExpDate -- standard          
-- Max he, can not join batch order table because duplicate record show on PO list          
--,bo.BthOrderId as BatchOrder          
,'StartedUp' as ProdStatus -- facked just for fix UI          
,SL.PrintingSize -- for outer label print, 26 Nov 2018 Max He           
from DOT_FloorSalesLine SL          
Join  DOT_FloorSales ST on SL.SALESID =  ST.SALESID          
join DOT_FSItemMaster im on im.ItemId = SL.ItemId          
--join DOT_FSBrandHeaders bh on bh.ItemId = SL.ItemId              
--join VW_AX_AVABRANDLINE_SALESLINE bl on bl.ItemId = bh.ItemId and bl.CUSTOMERSIZE = SL.CustomerSize             
where           
  im.ITEMTYPE in (5,6,8,9) -- <> 'GLove'          
and  ST.SALESSTATUS = 1 -- Open Order'Backorder'          
and  ST.DocumentStatus >= 3          
and  ST.WorkflowStatus = 2 -- for HSB version approve enum value is 2      
and  SL.IsDeleted = 0 -- itrf: 20201126045557226989    
          
/****** start original view ******/          
--select FSL.INVENTTRANSID,          
--FSL.ITEMNAME,          
--FSL.ITEMTYPE,          
--SL.Salesid ,SL.PurchOrderFormNum,ST.CustomerRef ,SL.ShippingDateConfirmed,          
--FSL.ItemId,SL.Name, FSL.HartalegaCommonSize,           
--(isnull(FSL.NETWEIGHT,0)/1000) as NETWEIGHT,           
--(isnull(FSL.GROSSWEIGHT,0)/1000) as GROSSWEIGHT,          
--FSL.NUMBERGLOVESINNERBOX,          
--FSL.NUMBERINNERBOXINOUTER,          
--FSL.INNERLABELSET, FSL.OUTERLABELSET,          
--FSL.PRESHIPMENTSAMPLINGPLAN, FSL.PALLETCAPACITY,          
--FSL.GLOVECODE, FSL.ALTERNATEGLOVECODE1, FSL.ALTERNATEGLOVECODE2, FSL.ALTERNATEGLOVECODE3,FSL.LINENUM,          
--FSL.CONFIGURATION , FSL.CONFIGURATIONNAME, FSL.MANUFACTURINGDATEBASIS, FSL.INNERVERIFICATION,FSL.OUTERVERIFICATION,          
--FSL.CUSTOMERLOTID,FSL.INNERPRODUCTCODE, FSL.OUTERPRODUCTCODE,FSL.EXPIRY,FSL.SPECIALINNERCODE,          
--FSL.SPECIALINNERCODECHARACTER,FSL.REFERENCE1, FSL.REFERENCE2,          
--SL.RECEIPTDATEREQUESTED,ST.AVAManufacturingETD as SHIPPINGDATEREQUESTED,SL.SalesQty,          
--ST.SALESSTATUS, ST.SalesName,ST.DocumentStatus , ST.ShippingDateConfirmed as STShippingDateConfirmed,          
--SL.AvaBaseQty          
--from MicrosoftDynamicsAX.dbo.SalesLine SL          
--Join MicrosoftDynamicsAX.dbo.AVAFLOORSALESLINE FSL on FSL.INVENTTRANSID = SL.INVENTTRANSID          
--Join  MicrosoftDynamicsAX.dbo.SalesTable ST on SL.SALESID =  ST.SALESID          
--where FSL.ITEMTYPE in (5,6,8,9)          
--and ST.SALESSTATUS = 1           
--and ST.DocumentStatus >= 3  and ST.DataAreaID ='hngc'  and SL.DataAreaID='hngc' and FSL.DataAreaID='hngc'          
/****** end original view ******/
GO
PRINT N'Creating Function [dbo].[GetQCTypeDesc]...';


GO
CREATE FUNCTION dbo.GetQCTypeDesc
(
	-- Add the parameters for the function here
	@QCType NVARCHAR(50)
)
RETURNS NVARCHAR(50)
AS
BEGIN
DECLARE @QcTypeDesc  NVARCHAR(50)
	SELECT @QcTypeDesc = Description FROM DOT_FSQCTypeTable WHERE QCType = @QCType
	Return @QcTypeDesc
END
GO
PRINT N'Creating Function [dbo].[UDF_DOT_Get_FP_Staging_Consolidation_Seq]...';


GO
-- ==================================================================================  
-- Name:   UDF_DOT_Get_FP_Staging_Consolidation_Seq
-- Purpose:  Get Final Pack Staging Record Consolidation Sequence
-- ==================================================================================  
-- Change History  
-- Date			Author   Comments  
-- -----		------   ------------------------------------------------------------
-- 2021/08/05	Max    Function created.  
-- 2021/08/09   Max    To separate the consolidation for FG packing process (SBC/SMBP/SGBC) to different consolidated batch for Straight Pack and Non-Straight Pack 
--						So that the SP one can be completed first, as it does not depend on other staging process like RWKCR/SOBC/SPBC/TempPack/CBCI
-- ==================================================================================  
-- Select dbo.UDF_DOT_Get_FP_Staging_Consolidation_Seq('SMBP','',0,'2211290116',4,'2211290124',7,NULL,0,NULL,0,NULL,0) as Seq
-- Select dbo.UDF_DOT_Get_FP_Staging_Consolidation_Seq('SMBP','',0,'2201276832',5,'2201243454',6,'2201145065',7,'2201278576',4,NULL,0) as Seq
CREATE FUNCTION [dbo].[UDF_DOT_Get_FP_Staging_Consolidation_Seq]
(
--declare
	@FunctionIdentifier NVARCHAR(256)='SMBP',
	@BatchNumber NVARCHAR(256)='',
	@Sequence int=0,
	@ReferenceBatchNumber1 NVARCHAR(256),--='2210096880',
	@ReferenceBatchSequence1 int=6,
	@ReferenceBatchNumber2 NVARCHAR(256),--='2210413056',
	@ReferenceBatchSequence2 int=6,
	@ReferenceBatchNumber3 NVARCHAR(256),--='2201010987',
	@ReferenceBatchSequence3 int=6,
	@ReferenceBatchNumber4 NVARCHAR(256),
	@ReferenceBatchSequence4 int,
	@ReferenceBatchNumber5 NVARCHAR(256),
	@ReferenceBatchSequence5 int
)
RETURNS NVARCHAR(256)
AS
BEGIN
  DECLARE @ReturnValue NVARCHAR(256),@LastSequence int,@CurrentSequence int
  DECLARE @PerviousFunctionIdentifier NVARCHAR(256)
  IF @FunctionIdentifier = 'SBC'
  BEGIN
	select top 1 @PerviousFunctionIdentifier = a.FunctionIdentifier,@LastSequence=a.Sequence
	from DOT_FloorAxIntParentTable a with(nolock)
	where a.FunctionIdentifier not in ('SBC','SGBC','SMBP','SPPBC') and a.BatchNumber=@BatchNumber and a.Sequence<@Sequence 
	order by Sequence desc;

	if @PerviousFunctionIdentifier = 'HBC'
	BEGIN
		set @ReturnValue = '1';
	END
	else
	BEGIN
		set @CurrentSequence = @LastSequence;
		set @ReturnValue = cast(@BatchNumber + cast(iSNULL(@LastSequence,0) as nvarchar(50)) as NVARCHAR(256));
	END
  END
  ELSE IF @FunctionIdentifier = 'SMBP'
  BEGIN
	select top 1 @PerviousFunctionIdentifier = a.FunctionIdentifier,@LastSequence=a.Sequence
	from DOT_FloorAxIntParentTable a with(nolock)
	where a.FunctionIdentifier not in ('SBC','SGBC','SMBP','SPPBC') and a.BatchNumber=@ReferenceBatchNumber1 and a.Sequence<@ReferenceBatchSequence1 
	order by Sequence desc;
	--print '@ReferenceBatchSequence1=' 
	--print @ReferenceBatchSequence1
	if @PerviousFunctionIdentifier = 'HBC'
	BEGIN
		set @ReturnValue = '1';
	END
	else
	BEGIN
		set @CurrentSequence = @LastSequence;
		set @ReturnValue = cast(@ReferenceBatchNumber1 + cast(iSNULL(@LastSequence,0) as nvarchar(50)) as NVARCHAR(256));
	END
	-- check Reference Batch 2
	if @ReferenceBatchNumber2 is not null
	BEGIN
		select top 1 @PerviousFunctionIdentifier = a.FunctionIdentifier,@LastSequence=a.Sequence
		from DOT_FloorAxIntParentTable a with(nolock)
		where a.FunctionIdentifier not in ('SBC','SGBC','SMBP','SPPBC') and a.BatchNumber=@ReferenceBatchNumber2 and a.Sequence<@ReferenceBatchSequence2 
		order by Sequence desc;
		--print '@ReferenceBatchSequence2=' 
		--print  @ReferenceBatchSequence2
		if @PerviousFunctionIdentifier = 'HBC' and  @ReturnValue='1'
		BEGIN
			set @ReturnValue = '1';
		END
		else
		BEGIN
			if @LastSequence> @CurrentSequence
			BEGIN
				--print @ReferenceBatchNumber2
				set @CurrentSequence = @LastSequence;
				set @ReturnValue = cast(@ReferenceBatchNumber2 + cast(iSNULL(@LastSequence,0) as nvarchar(50)) as NVARCHAR(256));
			END
		END
	END
	-- check Reference Batch 3
	if @ReferenceBatchNumber3 is not null
	BEGIN
		select top 1 @PerviousFunctionIdentifier = a.FunctionIdentifier 
		from DOT_FloorAxIntParentTable a with(nolock)
		where a.FunctionIdentifier not in ('SBC','SGBC','SMBP','SPPBC') and a.BatchNumber=@ReferenceBatchNumber3 and a.Sequence<@ReferenceBatchSequence3 
		order by Sequence desc;
		--print '@ReferenceBatchSequence3=' 
		--print @ReferenceBatchSequence3
		if @PerviousFunctionIdentifier = 'HBC' and  @ReturnValue='1'
		BEGIN
			set @ReturnValue = '1';
		END
		else
		BEGIN
			if @LastSequence> @CurrentSequence
			BEGIN
				set @CurrentSequence = @LastSequence;
				set @ReturnValue = cast(@ReferenceBatchNumber3 + cast(iSNULL(@LastSequence,0) as nvarchar(50)) as NVARCHAR(256));
			END
		END
	END
	-- check Reference Batch 4
	if @ReferenceBatchNumber4 is not null
	BEGIN
		select top 1 @PerviousFunctionIdentifier = a.FunctionIdentifier 
		from DOT_FloorAxIntParentTable a with(nolock)
		where a.FunctionIdentifier not in ('SBC','SGBC','SMBP','SPPBC') and a.BatchNumber=@ReferenceBatchNumber4 and a.Sequence<@ReferenceBatchSequence4 
		order by Sequence desc;
		--print '@ReferenceBatchSequence4='
		--print @ReferenceBatchSequence4
		if @PerviousFunctionIdentifier = 'HBC' and  @ReturnValue='1'
		BEGIN
			set @ReturnValue = '1';
		END
		else
		BEGIN
			if @LastSequence> @CurrentSequence
			BEGIN
				set @CurrentSequence = @LastSequence;
				set @ReturnValue = cast(@ReferenceBatchNumber4 + cast(iSNULL(@LastSequence,0) as nvarchar(50)) as NVARCHAR(256));
			END
		END
	END
	-- check Reference Batch 5
	if @ReferenceBatchNumber5 is not null
	BEGIN
		select top 1 @PerviousFunctionIdentifier = a.FunctionIdentifier 
		from DOT_FloorAxIntParentTable a with(nolock)
		where a.FunctionIdentifier not in ('SBC','SGBC','SMBP','SPPBC') and a.BatchNumber=@ReferenceBatchNumber5 and a.Sequence<@ReferenceBatchSequence5 
		order by Sequence desc;
		--print '@ReferenceBatchSequence5='
		--print @ReferenceBatchSequence5
		if @PerviousFunctionIdentifier = 'HBC' and  @ReturnValue='1'
		BEGIN
			set @ReturnValue = '1';
		END
		else
		BEGIN
			if @LastSequence> @CurrentSequence
			BEGIN
				set @CurrentSequence = @LastSequence;
				set @ReturnValue = cast(@ReferenceBatchNumber5 + cast(iSNULL(@LastSequence,0) as nvarchar(50)) as NVARCHAR(256));
			END
		END
	END
  END
  ELSE -- IF @FunctionIdentifier = 'SPPBC' Or @FunctionIdentifier = 'SGBC'
  BEGIN
		set @ReturnValue = '1';
  END

  -- debug
  --select @ReturnValue

  RETURN @ReturnValue
END
GO
PRINT N'Creating Function [dbo].[UDF_DOT_GetLinefromResourceGrp]...';


GO
CREATE FUNCTION dbo.UDF_DOT_GetLinefromResourceGrp
(
  @ResourceGrp VARCHAR(256)
)
RETURNS VARCHAR(256)
AS
BEGIN
  DECLARE @LineIdx INT
  DECLARE @Line VARCHAR(256)
  SET @LineIdx = PATINDEX('%L%', @ResourceGrp)
  IF @LineIdx > 0
  BEGIN
	SET @Line = SUBSTRING(@ResourceGrp,@LineIdx,4)
  END
  RETURN @Line
END


GO
PRINT N'Creating View [dbo].[View_DOT_BOGloveTypeSize]...';


GO
---- =================================================================  
---- Author:  <Azrul Amin>  
---- Create date: <27-Mar-2018>  
---- Description: View to get tier side and golve sizes in to rows 
---- =================================================================  
CREATE VIEW [dbo].[View_DOT_BOGloveTypeSize]    
AS 
	SELECT 
	 res.Id as ResourceId
	,res.Resource
	,dbo.UDF_DOT_GetLinefromResourceGrp(res.ResourceGrp) as LineId
	,dbo.UDF_DOT_GetTierSidefromResource(res.Resource) as TierSide
	,bo.BthOrderId
	,bo.ItemId as GloveType
	,bo.Size as GloveSize
	,0 as IsAlternate
	,0 as IsPrintByFormer
	,1 as IsOnline
	,dbo.UDF_DOT_GetTierfromResource(res.Resource) as Tier
	FROM 
		DOT_FloorD365BO AS bo WITH (NOLOCK) JOIN 
		DOT_FloorD365BOResource AS res WITH (NOLOCK) ON bo.BthOrderId = res.BatchOrderId and res.IsDeleted=0
	WHERE bo.ProdPoolId = 'Glove' 
	AND bo.ProdStatus = 'StartedUp'
	AND bo.IsDeleted=0


GO
PRINT N'Creating Function [dbo].[UFN_DOT_GetSNFromCustRefForSummaryBatchCardReport]...';


GO
-- ==========================================================================  
-- Change History      
-- Date   Author  Comments      
-- -----  ------  -----------------------------         
-- 26/10/2021 Azrul  Get Serial Number related for SummaryBatchCardReport 
-- select distinct BatchNumber from dbo.UFN_DOT_GetSNFromCustRefForSummaryBatchCardReport('ANSL 301/20')
-- select distinct BatchNumber from dbo.UFN_DOT_GetSNFromCustRefForSummaryBatchCardReport('MEDU 806/21')
-- ==========================================================================  
CREATE   FUNCTION [dbo].[UFN_DOT_GetSNFromCustRefForSummaryBatchCardReport]              
(           
	@CustReferenceNumber NVARCHAR(4000)
)

RETURNS @SerialNumbers TABLE    
(     
	BatchNumber NVARCHAR(20)  
)   
    
AS    
BEGIN    
	DECLARE @SNRelatedCustReferenceNumbers TABLE 
	(
		FunctionIdentifier NVARCHAR(10), 
		BatchNumber NVARCHAR(20),
		ReferenceBatchNumber1 NVARCHAR(20),
		ReferenceBatchNumber2 NVARCHAR(20),
		ReferenceBatchNumber3 NVARCHAR(20),
		ReferenceBatchNumber4 NVARCHAR(20),
		ReferenceBatchNumber5 NVARCHAR(20)
	)

	DECLARE @CustReferenceNumbers TABLE (CustReferenceNumber NVARCHAR(4000))

	INSERT INTO @CustReferenceNumbers 
	select * from dbo.SplitString(NULLIF(@CustReferenceNumber, ','), ',')

	--Find related SN for SBC/SGBC in header, SPPBC in details and SMBP in Ref1-5
	INSERT INTO @SNRelatedCustReferenceNumbers 
	SELECT * FROM (  
		select a.FunctionIdentifier,  
		case when (a.BatchNumber IS NULL) OR (LEN(a.BatchNumber) = 0) then b.BatchNumber else a.BatchNumber end as BatchNumber, 
		a.ReferenceBatchNumber1,a.ReferenceBatchNumber2,a.ReferenceBatchNumber3,a.ReferenceBatchNumber4 ,a.ReferenceBatchNumber5   
    
		from DOT_FloorAxIntParentTable a with(nolock)  
		join (select bb.ParentRefRecId,bb.BatchOrderNumber,bb.PostingDateTime,bb.BatchNumber  
			from DOT_FGJournalTable bb with(nolock)   
			where bb.IsDeleted = 0   
			and bb.CustomerReference in (select CustReferenceNumber from @CustReferenceNumbers where CustReferenceNumber <> '')) b   
		on a.id=b.ParentRefRecId  
		where   
		a.FunctionIdentifier IN ('SBC','SGBC','SPPBC','SMBP')
		and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0   
		)aa

		--SBC/SPPBC
		INSERT INTO @SerialNumbers
		select BatchNumber from @SNRelatedCustReferenceNumbers where FunctionIdentifier IN ('SBC','SGBC','SPPBC')
		-- SMBP
		-- ReferenceBatchNumber1
		INSERT INTO @SerialNumbers
		select ReferenceBatchNumber1 from @SNRelatedCustReferenceNumbers where LEN(ISNULL(ReferenceBatchNumber1,'')) > 0 and  FunctionIdentifier IN ('SMBP')
		-- ReferenceBatchNumber2
		INSERT INTO @SerialNumbers 
		select ReferenceBatchNumber2 from @SNRelatedCustReferenceNumbers where LEN(ISNULL(ReferenceBatchNumber2,'')) > 0 and  FunctionIdentifier IN ('SMBP')
		-- ReferenceBatchNumber3
		INSERT INTO @SerialNumbers 
		select ReferenceBatchNumber3 from @SNRelatedCustReferenceNumbers where LEN(ISNULL(ReferenceBatchNumber3,'')) > 0 and  FunctionIdentifier IN ('SMBP')
		-- ReferenceBatchNumber4
		INSERT INTO @SerialNumbers
		select ReferenceBatchNumber4 from @SNRelatedCustReferenceNumbers where LEN(ISNULL(ReferenceBatchNumber4,'')) > 0 and  FunctionIdentifier IN ('SMBP')
		-- ReferenceBatchNumber5
		INSERT INTO @SerialNumbers
		select ReferenceBatchNumber5 from @SNRelatedCustReferenceNumbers where LEN(ISNULL(ReferenceBatchNumber5,'')) > 0 and  FunctionIdentifier IN ('SMBP')

	RETURN
END
GO
PRINT N'Creating Function [dbo].[Ufn_DOT_GloveQtyToTable]...';


GO
-- ===================================================================  
-- Name:   Ufn_DOT_GloveQtyToTable 
-- Purpose:   to Get comma separated values into Table valued function  
-- ===================================================================  
-- Change History  
-- Date    Author   Comments  
-- -----   ------   --------------------------------------------------  
-- 25/04/2018  Azrul Amin    Fn ALTERd.  
-- ===================================================================  
--IF OBJECT_ID('Ufn_DOT_GloveQtyToTable') IS NOT NULL
--BEGIN
--	DROP FUNCTION Ufn_DOT_GloveQtyToTable
--END  
--GO
CREATE FUNCTION [dbo].[Ufn_DOT_GloveQtyToTable] ( @str1 VARCHAR(max),@str2 VARCHAR(max),@str3 VARCHAR(max) 
)  
RETURNS @Table TABLE (ResourceId  varchar(MAX),PackingSize varchar(MAX),InnerBox varchar(MAX)
)
AS  
BEGIN  
	
DECLARE @RowCount TINYINT
DECLARE @i        TINYINT = 0

SET @RowCount =  len(@str1) - len(replace(@str1, ',', ''))

WHILE(@i<=@RowCount)
	BEGIN
		INSERT INTO @Table
		SELECT  LEFT(@str1,CHARINDEX(',',@str1+',',0)-1) AS ResourceId
			   ,LEFT(@str2,CHARINDEX(',',@str2+',',0)-1) AS PackingSize
			   ,LEFT(@str3,CHARINDEX(',',@str3+',',0)-1) AS InnerBox

		SET @str1 = STUFF(@str1,1,CHARINDEX(',',@str1,0),'')
		SET @str2 = STUFF(@str2,1,CHARINDEX(',',@str2,0),'')
		SET @str3 = STUFF(@str3,1,CHARINDEX(',',@str3,0),'')

		SET @i = @i + 1
	END

RETURN
END
GO
PRINT N'Creating Function [dbo].[Ufn_DOT_GetD365BatchSummaryBalance]...';


GO

    
-- =======================================================    
-- Name:   Ufn_DOT_GetD365BatchSummaryBalance    
-- Purpose:   Gets balance pcs for a summarized batch    
-- =======================================================    
-- Change History    
-- Date         Author     Comments    
-- -----        ------     -----------------------------    
-- 12/10/2021   Amir       Create.        
-- =======================================================    
CREATE   FUNCTION [dbo].[Ufn_DOT_GetD365BatchSummaryBalance](@D365BatchNumber nvarchar(200))     
    
RETURNS DECIMAL(18, 3)  
    
AS    
BEGIN    
 --DECLARE @D365BatchNumber nvarchar(200) = '202107260003'
 DECLARE @Iteration bigint
 DECLARE @IterationMax bigint

 DECLARE @TempBatchNoList TABLE(    
  BatchNumber NUMERIC,
  RowNo bigint
  )    

  INSERT INTO @TempBatchNoList 
  SELECT distinct BatchNumber as BatchNumber, ROW_NUMBER() OVER (order by BatchNumber) as RowNo from UFN_DOT_GetAllStagingParent() where
            D365BatchNumber =@D365BatchNumber group by BatchNumber
 
 --debug
 --select * from @TempBatchNoList

 SET @Iteration = 1    
 SET @IterationMax = (select top 1 max(RowNo) from @TempBatchNoList)

 --SELECT @IterationMax
 DECLARE @TotalBalancePcs DECIMAL(18, 3) = 0
 DECLARE @BalancePcs DECIMAL(18, 3)
 DECLARE @BatchNumber numeric

 WHILE (@Iteration) <= (@IterationMax)      
 BEGIN    
  SET @BatchNumber = (SELECT BatchNumber from @TempBatchNoList where RowNo = @Iteration)
  SET @BalancePcs = (SELECT TOP 1 BalancePcs as Quantity FROM dbo.ufn_GetBatchSummaryTable(@BatchNumber) ORDER BY ProcessDate DESC)
  
  --SELECT @BalancePcs
  SET @TotalBalancePcs = @TotalBalancePcs + @BalancePcs
    
  SET @Iteration = @Iteration + 1    
 END    
    
 --SELECT @TotalBalancePcs
 RETURN @TotalBalancePcs
END
GO
PRINT N'Altering Procedure [dbo].[usp_Batch_SerialNo_Get]...';


GO
  
  
-- =============================================  
-- Name:   [dbo].[usp_Batch_SerialNo_Get]  
-- Purpose:   <Fetches BatchNumber,Glove type and Size from the batch table>  
-- =============================================  
-- Change History  
-- Date   Author    Comments  
-- -----  ------    -----------------------------  
-- 24/06/2014  Kishan Dubal  SP created.  
-- 16/07/2014  Kishan Dubal  Changes after review by Narendra Gurram  
-- 03/01/2019  Azrul    Populate QCType info for checkings  
-- 06/01/2019  Max     add BatchType info for further checking  
-- 23/07/2020 Pang    Add QCTYPE for further checking  
-- =============================================  
ALTER PROCEDURE [dbo].[usp_Batch_SerialNo_Get]  
(  
@serialNo NUMERIC  
)  
AS  
BEGIN  
 SET NOCOUNT ON;  
 SELECT b.BatchNumber, b.GloveType, b.Size, b.QCType, qc.[Description],b.BatchType  
 FROM Batch b with(nolock)  
 Left Outer Join DOT_FSQCTypeTable qc with(nolock) on b.qctype = qc.qctype  
 WHERE SerialNumber = @serialNo   
 AND BatchType IS NOT NULL AND BatchNumber IS NOT NULL  
END
GO
PRINT N'Altering Procedure [dbo].[USP_DOT_OnlineBatchSummaryBatchCardReport]...';


GO
-- ==================================================================================================================================================        
-- Name: USP_DOT_OnlineBatchSummaryBatchCardReport      
-- Purpose: Summary Batch Card Report for Surgical Batch      
-- ==================================================================================================================================================        
-- Change History        
-- Date   Author   Comments        
-- -----  ------   ------------------------------------------------------------      
-- 2021/10/26   Azrul    SP created.        
-- 2022/01/05   Amir  Exclude ON2G , Split to another SP USP_DOT_ON2GSummaryBatchCardReport    
-- ==================================================================================================================================================       
-- exec USP_DOT_OnlineBatchSummaryBatchCardReport '2210605283,2210605145,2210605001,2210605292,2210605426', '', '', '2021-01-01','2021-10-01','','',''    
-- exec USP_DOT_OnlineBatchSummaryBatchCardReport '2211290123', '', '', '','','','',''    
-- exec USP_DOT_OnlineBatchSummaryBatchCardReport '', '', 'ANSL 301/20', '','','','',''    
-- exec USP_DOT_OnlineBatchSummaryBatchCardReport '', '', 'MEDU 806/21', '','','','',''    
-- exec USP_DOT_OnlineBatchSummaryBatchCardReport '', '', '', '2021-08-31','2021-08-31 23:59:59','','',''    
-- exec USP_DOT_OnlineBatchSummaryBatchCardReport @SerialNumber=N'',@D365BatchNumber=N'MUNA 152/21_6½_02',@CustReferenceNumber=N'',@PlantNo=N'',@Warehouse=N'',@FunctionIdentifier=N'',@PostingDateTimeFrom=N'',@PostingDateTimeTo=N''    
-- exec USP_DOT_OnlineBatchSummaryBatchCardReport @SerialNumber=N'',@D365BatchNumber=N'',@CustReferenceNumber=N'MEDU 1992/21',@PlantNo=N'',@Warehouse=N'',@FunctionIdentifier=N'',@PostingDateTimeFrom=N'',@PostingDateTimeTo=N''    
-- ==================================================================================================================================================    
    
ALTER   PROCEDURE [dbo].[USP_DOT_OnlineBatchSummaryBatchCardReport]      
(    
@SerialNumber NVARCHAR(4000),    
@D365BatchNumber NVARCHAR(4000),    
@CustReferenceNumber NVARCHAR(4000),    
@PostingDateTimeFrom NVARCHAR(100),    
@PostingDateTimeTo NVARCHAR(100),    
@PlantNo NVARCHAR(4000),    
@Warehouse NVARCHAR(4000),    
@FunctionIdentifier NVARCHAR(4000)    
)    
    
AS    
BEGIN      
 -- SET NOCOUNT ON added to prevent extra result sets from        
 -- interfering with SELECT statements.        
 SET NOCOUNT ON;    
 
IF OBJECT_ID('tempdb..#FunctionIdentifiers') IS NOT NULL        
DROP TABLE #FunctionIdentifiers       
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL        
DROP TABLE #SerialNumbers       
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL        
DROP TABLE #D365BatchNumbers       
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL        
DROP TABLE #CustReferenceNumbers      
IF OBJECT_ID('tempdb..#tmpFinal') IS NOT NULL        
DROP TABLE #tmpFinal       
      
CREATE TABLE #FunctionIdentifiers (Identifier NVARCHAR(20))      
CREATE TABLE #SerialNumbers (SerialNumber NVARCHAR(4000))      
CREATE TABLE #D365BatchNumbers (D365BatchNumber NVARCHAR(4000))      
CREATE TABLE #CustReferenceNumbers (CustReferenceNumber NVARCHAR(4000))      
CREATE TABLE #tmpFinal (FunctionIdentifier NVARCHAR(10),       
      PostingDateTime DATETIME2,       
      SerialNumber NVARCHAR(50),       
      D365BatchNumber NVARCHAR(50),       
      BatchOrderNumber NVARCHAR(50),       
      MovementJournalNumber NVARCHAR(50),       
      TransferJournalNumber NVARCHAR(50),      
      PickingListJournalNumber NVARCHAR(50),       
      RouteCardJournalNumber NVARCHAR(50),       
      RAFJournalNumber NVARCHAR(50),        
      ItemNumber NVARCHAR(100),       
      Size NVARCHAR(10),       
      Warehouse NVARCHAR(10),       
      Location NVARCHAR(10),      
      TransitionQuantity DECIMAL (18, 4) DEFAULT 0.0000,       
      ReservedQuantity DECIMAL (18, 4),      
      PlantNo NVARCHAR(10),    
   CreationTime DATETIME2)      
      
IF (LEN(@SerialNumber) > 0)       
BEGIN      
 INSERT INTO #SerialNumbers       
 select * from dbo.SplitString(NULLIF(@SerialNumber, ','), ',')      
END      
ELSE IF (LEN(@D365BatchNumber) > 0)       
BEGIN      
 INSERT INTO #D365BatchNumbers       
 select * from dbo.SplitString(NULLIF(@D365BatchNumber, ''), ',')      
      
 INSERT INTO #SerialNumbers      
 select       
 case when isnull(a.BatchNumber,'')='' then isnull(b.BatchNumber,'')      
    else isnull(a.BatchNumber,'') end       
    --*      
 from DOT_FloorAxIntParentTable a with(nolock)       
 left join DOT_FGJournalTable b with(nolock) on a.Id=b.ParentRefRecId and b.IsDeleted=0      
 where       
  D365BatchNumber collate SQL_Latin1_General_CP1_CI_AS in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '') or       
  a.BatchNumber collate SQL_Latin1_General_CP1_CI_AS in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '')      
      
 and a.IsDeleted = 0  --and IsMigratedFromAX6 = 0         
END      
Else IF (LEN(@CustReferenceNumber) > 0)       
BEGIN      
 INSERT INTO #CustReferenceNumbers       
 select * from dbo.SplitString(NULLIF(@CustReferenceNumber, ','), ',')      
      
 INSERT INTO #SerialNumbers      
 select BatchNumber from dbo.UFN_DOT_GetSNFromCustRefForSummaryBatchCardReport(@CustReferenceNumber)      
END      
      
DECLARE @TempPN TABLE (PlantNo VARCHAR(10))      
      
IF (LEN(@PlantNo) > 0)       
BEGIN      
 INSERT INTO @TempPN VALUES (@PlantNo)      
END      
      
ELSE      
BEGIN      
 INSERT INTO @TempPN select LocationName from LocationMaster      
END      
      
IF(LEN(@FunctionIdentifier) > 0)      
BEGIN      
 INSERT INTO #FunctionIdentifiers      
 select * from dbo.SplitString(NULLIF(@FunctionIdentifier, ','), ',')      
END      
ELSE      
BEGIN      
 INSERT INTO #FunctionIdentifiers       
 SELECT ('HBC')      
      
 INSERT INTO #FunctionIdentifiers       
 SELECT ('SRBC')      
      
 --INSERT INTO #FunctionIdentifiers       
 --SELECT ('ON2G')      
END      
      
DECLARE @StartPostingDateTime DateTime = '2019-03-01'      
DECLARE @EndPostingDateTime DateTime = DATEADD(DAY,1,GetDate())      
DECLARE @SerialNoCount int      
SELECT @SerialNoCount = Count(1) from #SerialNumbers      
      
--details: online/surgical batch only, online 2G and offline batch excluded      
IF (@SerialNoCount > 0)      
BEGIN      
 INSERT INTO #tmpFinal (FunctionIdentifier,PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,        
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,      
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity,PlantNo,CreationTime)      
      
 select a.FunctionIdentifier, b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber, ISNULL(b.BatchOrderNumber,'') as BatchOrderNumber,       
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and       
 FunctionIdentifier = a.FunctionIdentifier)) as MovementJournalNumber, '' as TransferJournalNumber,       
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and       
 FunctionIdentifier = a.FunctionIdentifier)) as PickingListJournalNumber, --for consolidation batch      
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and       
 FunctionIdentifier = a.FunctionIdentifier)) as RouteCardJournalNumber, --for consolidation batch      
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and       
 FunctionIdentifier = a.FunctionIdentifier)) as RAFJournalNumber, --for consolidation batch      
 b.ItemNumber, b.Configuration as Size,      
 ISNULL(NULLIF(b.Warehouse,''),a.PlantNo+'-PROD') as Warehouse, b.Location, CONVERT(DECIMAL (18, 4),b.RAFGoodQty) as TransitionQuantity, 0 as ReservedQuantity,a.PlantNo,a.CreationTime      
      
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId      
join #FunctionIdentifiers f on f.Identifier collate SQL_Latin1_General_CP1_CI_AS =a.FunctionIdentifier collate SQL_Latin1_General_CP1_CI_AS     
 where a.BatchNumber collate SQL_Latin1_General_CP1_CI_AS IN (Select Distinct SerialNumber from #SerialNumbers where SerialNumber <> '')      
 and a.FunctionIdentifier collate SQL_Latin1_General_CP1_CI_AS <> 'ON2G'      
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0       
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end      
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end      
 and PlantNo in (SELECT * FROM @TempPN)      
 and a.ReferenceBatchNumber1 is null -- filter out resample records    
END      
ELSE      
BEGIN      
 INSERT INTO #tmpFinal (FunctionIdentifier,PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,        
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,      
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity,PlantNo,CreationTime)      
      
 select a.FunctionIdentifier, b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber, ISNULL(b.BatchOrderNumber,'') as BatchOrderNumber,       
 ISNULL(NULLIF(b.MovementJournalId,''), (select MovementJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and       
 FunctionIdentifier = a.FunctionIdentifier)) as MovementJournalNumber, '' as TransferJournalNumber,       
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and       
 FunctionIdentifier = a.FunctionIdentifier)) as PickingListJournalNumber, --for consolidation batch      
 ISNULL(NULLIF(b.RouteCardJournalId,''), (select RouteCardJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and       
 FunctionIdentifier = a.FunctionIdentifier)) as RouteCardJournalNumber, --for consolidation batch      
 ISNULL(NULLIF(b.RAFJournalId,''), (select RAFJournalId from DOT_RafSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and       
 FunctionIdentifier = a.FunctionIdentifier)) as RAFJournalNumber, --for consolidation batch      
 b.ItemNumber, b.Configuration as Size,      
 ISNULL(NULLIF(b.Warehouse,''),a.PlantNo+'-PROD') as Warehouse, b.Location, CONVERT(DECIMAL (18, 4),b.RAFGoodQty) as TransitionQuantity, 0 as ReservedQuantity, a.PlantNo,a.CreationTime      
      
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_RafStgTable b with(nolock) on a.id = b.ParentRefRecId      
 join #FunctionIdentifiers f on f.Identifier collate SQL_Latin1_General_CP1_CI_AS =a.FunctionIdentifier collate SQL_Latin1_General_CP1_CI_AS     
 where a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0       
 and a.FunctionIdentifier <> 'ON2G'      
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end      
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end      
 and PlantNo in (SELECT * FROM @TempPN)      
 and a.ReferenceBatchNumber1 is null -- filter out resample records    
END      
 SELECT     
 FunctionIdentifier,PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,        
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,      
 ItemNumber, Size, Warehouse, Location, ReservedQuantity,PlantNo,    
 -- hide qty if not complete posting without journal id come back from d365    
  case when ISNULL(#tmpFinal.PickingListJournalNumber,'')='' and ISNULL(#tmpFinal.RAFJournalNumber,'')='' then 0.0 else #tmpFinal.TransitionQuantity end as TransitionQuantity,CreationTime    
 FROM #tmpFinal       
 WHERE Warehouse LIKE (case when LEN(@Warehouse) > 0 then @Warehouse  else '%' end)      
      
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL        
  DROP TABLE #SerialNumbers       
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL        
  DROP TABLE #D365BatchNumbers       
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL        
  DROP TABLE #CustReferenceNumbers      
IF OBJECT_ID('tempdb..#tmpFinal') IS NOT NULL      
  DROP TABLE #tmpFinal       
           
    
END
GO
PRINT N'Altering Procedure [dbo].[USP_DOT_PickingListSummaryBatchCardReport_test]...';


GO

-- ==================================================================================================================================================        
-- Name: USP_DOT_PickingListSummaryBatchCardReport      
-- Purpose: Summary Batch Card Report for Change Batch Card Inner    
-- ==================================================================================================================================================        
-- Change History        
-- Date   Author   Comments        
-- -----  ------   ------------------------------------------------------------      
-- 2021/10/26   Azrul    SP created.        
-- ==================================================================================================================================================       
-- exec USP_DOT_PickingListSummaryBatchCardReport '2211289819,2211290110,2210559670', '', '', '2021-01-01','2021-10-01','','',''    
-- exec USP_DOT_PickingListSummaryBatchCardReport '2211289819,2211290110,2210559670', '', '', '','','','',''    
-- exec USP_DOT_PickingListSummaryBatchCardReport '', '', 'ANSL 301/20', '','','','',''    
-- exec USP_DOT_PickingListSummaryBatchCardReport '', '', 'MEDU 806/21', '','','','',''    
-- exec USP_DOT_PickingListSummaryBatchCardReport '', '', '', '2021-07-01','2021-07-31','','',''    
-- exec USP_DOT_PickingListSummaryBatchCardReport_test '2201141299' , '' , '' , '', '', '', '', ''
-- exec USP_DOT_PickingListSummaryBatchCardReport '2210616934' , '' , '' , '', '', '', '', ''
-- ==================================================================================================================================================    
    
ALTER    PROCEDURE [dbo].[USP_DOT_PickingListSummaryBatchCardReport_test]      
(
@SerialNumber NVARCHAR(4000),    
@D365BatchNumber NVARCHAR(4000),    
@CustReferenceNumber NVARCHAR(4000),    
@PostingDateTimeFrom NVARCHAR(100),    
@PostingDateTimeTo NVARCHAR(100),    
@PlantNo NVARCHAR(4000),    
@Warehouse NVARCHAR(4000),    
@FunctionIdentifier NVARCHAR(4000)    
)    
    
AS    
BEGIN      
 -- SET NOCOUNT ON added to prevent extra result sets from        
 -- interfering with SELECT statements.        
 SET NOCOUNT ON;    
     
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL      
DROP TABLE #SerialNumbers     
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL      
DROP TABLE #D365BatchNumbers     
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL      
DROP TABLE #CustReferenceNumbers    
IF OBJECT_ID('tempdb..#TmpUnion') IS NOT NULL      
DROP TABLE #TmpUnion    
    
CREATE TABLE #SerialNumbers (SerialNumber NVARCHAR(4000))    
CREATE TABLE #D365BatchNumbers (D365BatchNumber NVARCHAR(4000))    
CREATE TABLE #CustReferenceNumbers (CustReferenceNumber NVARCHAR(4000))    
CREATE TABLE #tmpUnion (PostingDateTime DATETIME2,     
      SerialNumber NVARCHAR(50),     
      D365BatchNumber NVARCHAR(50),     
      BatchOrderNumber NVARCHAR(50),     
      MovementJournalNumber NVARCHAR(50),     
      TransferJournalNumber NVARCHAR(50),     
      PickingListJournalNumber NVARCHAR(50),     
      RouteCardJournalNumber NVARCHAR(50),     
      RAFJournalNumber NVARCHAR(50),     
      ItemNumber NVARCHAR(100),     
      Size NVARCHAR(10),     
      Warehouse NVARCHAR(10),     
      Location NVARCHAR(10),     
      TransitionQuantity DECIMAL (10, 4) DEFAULT 0000,     
      ReservedQuantity DECIMAL (10, 4),     
      BaseQuantity DECIMAL DEFAULT 0,     
      Sequence INT,     
      FunctionIdentifier NVARCHAR(50),    
      PlantNo NVARCHAR(10),    
      ReferenceBatchNumber1 NVARCHAR(50) DEFAULT NULL,     
      ReferenceBatchNumber2 NVARCHAR(50) DEFAULT NULL,     
      ReferenceBatchNumber3 NVARCHAR(50) DEFAULT NULL,     
      ReferenceBatchNumber4 NVARCHAR(50) DEFAULT NULL,     
      ReferenceBatchNumber5 NVARCHAR(50) DEFAULT NULL,    
      ReferenceBatchSequence1 INT DEFAULT 0,     
      ReferenceBatchSequence2 INT DEFAULT 0,     
      ReferenceBatchSequence3 INT DEFAULT 0,     
      ReferenceBatchSequence4 INT DEFAULT 0,     
      ReferenceBatchSequence5 INT DEFAULT 0,    
      RefNumberOfPieces1 DECIMAL DEFAULT 0,     
      RefNumberOfPieces2 DECIMAL DEFAULT 0,     
      RefNumberOfPieces3 DECIMAL DEFAULT 0,     
      RefNumberOfPieces4 DECIMAL DEFAULT 0,     
      RefNumberOfPieces5 DECIMAL DEFAULT 0,    
      RefItemNumber1 NVARCHAR(50) DEFAULT NULL,     
      RefItemNumber2 NVARCHAR(50) DEFAULT NULL,     
      RefItemNumber3 NVARCHAR(50) DEFAULT NULL,     
      RefItemNumber4 NVARCHAR(50) DEFAULT NULL,     
      RefItemNumber5 NVARCHAR(50) DEFAULT NULL,
	  CreationTime DATETIME2)    
    
IF (LEN(@SerialNumber) > 0)     
BEGIN    
 INSERT INTO #SerialNumbers     
 select * from dbo.SplitString(NULLIF(@SerialNumber, ','), ',')    
END    
ELSE IF (LEN(@D365BatchNumber) > 0)     
BEGIN    
 INSERT INTO #D365BatchNumbers     
 select * from dbo.SplitString(NULLIF(@D365BatchNumber, ''), ',')    
    
 INSERT INTO #SerialNumbers    
 select Distinct  
 case when isnull(a.BatchNumber,'')='' then isnull(b.BatchNumber,'')  
    else isnull(a.BatchNumber,'') end   
    --*  
 from DOT_FloorAxIntParentTable a with(nolock)   
 left join DOT_FGJournalTable b with(nolock) on a.Id=b.ParentRefRecId and b.IsDeleted=0  
 where   
  D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '') or   
  a.BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '')  
  
 and a.IsDeleted = 0  and IsMigratedFromAX6 = 0              
END    
Else IF (LEN(@CustReferenceNumber) > 0)     
BEGIN    
 INSERT INTO #CustReferenceNumbers     
 select * from dbo.SplitString(NULLIF(@CustReferenceNumber, ','), ',')    
    
 INSERT INTO #SerialNumbers    
 select Distinct BatchNumber from dbo.UFN_DOT_GetSNFromCustRefForSummaryBatchCardReport(@CustReferenceNumber)    
END    
    
DECLARE @TempPN TABLE (PlantNo VARCHAR(10))    
    
IF (LEN(@PlantNo) > 0)     
BEGIN    
 INSERT INTO @TempPN VALUES (@PlantNo)    
END    
    
ELSE    
BEGIN    
 INSERT INTO @TempPN select LocationName from LocationMaster    
END    
    
DECLARE @StartPostingDateTime DateTime = '2019-03-01'    
DECLARE @EndPostingDateTime DateTime = DATEADD(DAY,1,GetDate())    
DECLARE @SerialNoCount int    
SELECT @SerialNoCount = Count(1) from #SerialNumbers    
    
IF (@SerialNoCount > 0)    
BEGIN    
 --details: picking list    
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,    
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,    
 ReferenceBatchNumber1, ReferenceBatchNumber2, ReferenceBatchNumber3, ReferenceBatchSequence1, ReferenceBatchSequence2, ReferenceBatchSequence3,    
 RefNumberOfPieces1, RefNumberOfPieces2, RefNumberOfPieces3,CreationTime)    
    
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber, b.PSIReworkOrderNo as BatchOrderNumber,     
 '' as MovementJournalNumber, '' as TransferJournalNumber, ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_PickingSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and     
 FunctionIdentifier = a.FunctionIdentifier)) as PickListJournalNumber,      
 '' as RouteCardJournalNumber, '' as RAFJournalNumber, b.ItemNumber, b.Configuration as Size,    
 b.Warehouse, 'RWK' as Location,     
 b.OldBatchQty as TransitionQuantity,     
 NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,    
 a.ReferenceBatchNumber1, a.ReferenceBatchNumber2, a.ReferenceBatchNumber3,    
 a.ReferenceBatchSequence1, a.ReferenceBatchSequence2, a.ReferenceBatchSequence3,    
 b.RefNumberOfPieces1, b.RefNumberOfPieces2, b.RefNumberOfPieces3,a.CreationTime    
     
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_PickingList b with(nolock) on a.id = b.ParentRefRecId    
 where a.FunctionIdentifier in (case when LEN(@FunctionIdentifier) > 0 then @FunctionIdentifier else 'CBCI' end)    
 and a.BatchNumber IN (Select Distinct SerialNumber from #SerialNumbers where SerialNumber <> '')    
 and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0     
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end    
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end     
 and a.PlantNo in (SELECT * FROM @TempPN)   
 
 --details: picking list change glove 1(negative qty)    
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,    
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,    
 ReferenceBatchNumber1, ReferenceBatchNumber2, ReferenceBatchNumber3, ReferenceBatchSequence1, ReferenceBatchSequence2, ReferenceBatchSequence3,    
 RefNumberOfPieces1, RefNumberOfPieces2, RefNumberOfPieces3,CreationTime)    
    
 select b.PostingDateTime, a.ReferenceBatchNumber1, a.D365BatchNumber, b.PSIReworkOrderNo as BatchOrderNumber,     
 '' as MovementJournalNumber, '' as TransferJournalNumber, ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_PickingSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and     
 FunctionIdentifier = a.FunctionIdentifier)) as PickListJournalNumber,      
 '' as RouteCardJournalNumber, '' as RAFJournalNumber, b.ItemNumber, b.Configuration as Size,    
 dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber1,ReferenceBatchSequence1) ,    
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber1,ReferenceBatchSequence1) ,     
 b.RefNumberOfPieces1 * -1 as TransitionQuantity,     
 NULL as ReservedQuantity, a.Sequence + 1, a.FunctionIdentifier, a.PlantNo,    
 a.ReferenceBatchNumber1, a.ReferenceBatchNumber2, a.ReferenceBatchNumber3,    
 a.ReferenceBatchSequence1, a.ReferenceBatchSequence2, a.ReferenceBatchSequence3,    
 b.RefNumberOfPieces1, b.RefNumberOfPieces2, b.RefNumberOfPieces3,a.CreationTime    
     
 from DOT_FloorAxIntParentTable a with(nolock) 
 join DOT_PickingList b with(nolock) on a.id = b.ParentRefRecId 
 join #SerialNumbers sn on a.ReferenceBatchNumber1 = sn.SerialNumber
 where a.FunctionIdentifier in (case when LEN(@FunctionIdentifier) > 0 then @FunctionIdentifier else 'CBCI' end)    
 and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0     
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end    
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end     
 and a.PlantNo in (SELECT * FROM @TempPN)  
 and a.ReferenceBatchNumber1 is not null
 and a.ReferenceBatchNumber1 <>'RESAMPLE'


  --details: picking list change glove 2(negative qty)    
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,    
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,    
 ReferenceBatchNumber1, ReferenceBatchNumber2, ReferenceBatchNumber3, ReferenceBatchSequence1, ReferenceBatchSequence2, ReferenceBatchSequence3,    
 RefNumberOfPieces1, RefNumberOfPieces2, RefNumberOfPieces3,CreationTime)    
    
 select b.PostingDateTime, a.ReferenceBatchNumber2, a.D365BatchNumber, b.PSIReworkOrderNo as BatchOrderNumber,     
 '' as MovementJournalNumber, '' as TransferJournalNumber, ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_PickingSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and     
 FunctionIdentifier = a.FunctionIdentifier)) as PickListJournalNumber,      
 '' as RouteCardJournalNumber, '' as RAFJournalNumber, b.ItemNumber, b.Configuration as Size,    
 dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber2,ReferenceBatchSequence2) ,    
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber2,ReferenceBatchSequence2) ,     
 b.RefNumberOfPieces2 * -1 as TransitionQuantity,     
 NULL as ReservedQuantity, a.Sequence + 1, a.FunctionIdentifier, a.PlantNo,    
 a.ReferenceBatchNumber1, a.ReferenceBatchNumber2, a.ReferenceBatchNumber3,    
 a.ReferenceBatchSequence1, a.ReferenceBatchSequence2, a.ReferenceBatchSequence3,    
 b.RefNumberOfPieces1, b.RefNumberOfPieces2, b.RefNumberOfPieces3,a.CreationTime    
     
 from DOT_FloorAxIntParentTable a with(nolock) 
 join DOT_PickingList b with(nolock) on a.id = b.ParentRefRecId 
 join #SerialNumbers sn on a.ReferenceBatchNumber2 = sn.SerialNumber
 where a.FunctionIdentifier in (case when LEN(@FunctionIdentifier) > 0 then @FunctionIdentifier else 'CBCI' end)    
 and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0     
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end    
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end     
 and a.PlantNo in (SELECT * FROM @TempPN)  
 and a.ReferenceBatchNumber2 is not null 

  --details: picking list change glove 3(negative qty)    
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,    
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,    
 ReferenceBatchNumber1, ReferenceBatchNumber2, ReferenceBatchNumber3, ReferenceBatchSequence1, ReferenceBatchSequence2, ReferenceBatchSequence3,    
 RefNumberOfPieces1, RefNumberOfPieces2, RefNumberOfPieces3,CreationTime)    
    
 select b.PostingDateTime, a.ReferenceBatchNumber3, a.D365BatchNumber, b.PSIReworkOrderNo as BatchOrderNumber,     
 '' as MovementJournalNumber, '' as TransferJournalNumber, ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_PickingSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and     
 FunctionIdentifier = a.FunctionIdentifier)) as PickListJournalNumber,      
 '' as RouteCardJournalNumber, '' as RAFJournalNumber, b.ItemNumber, b.Configuration as Size,    
 dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber3,ReferenceBatchSequence3) ,    
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber3,ReferenceBatchSequence3) ,     
 b.RefNumberOfPieces3 * -1 as TransitionQuantity,     
 NULL as ReservedQuantity, a.Sequence + 1, a.FunctionIdentifier, a.PlantNo,    
 a.ReferenceBatchNumber1, a.ReferenceBatchNumber2, a.ReferenceBatchNumber3,    
 a.ReferenceBatchSequence1, a.ReferenceBatchSequence2, a.ReferenceBatchSequence3,    
 b.RefNumberOfPieces1, b.RefNumberOfPieces2, b.RefNumberOfPieces3,a.CreationTime    
     
 from DOT_FloorAxIntParentTable a with(nolock) 
 join DOT_PickingList b with(nolock) on a.id = b.ParentRefRecId 
 join #SerialNumbers sn on a.ReferenceBatchNumber3 = sn.SerialNumber
 where a.FunctionIdentifier in (case when LEN(@FunctionIdentifier) > 0 then @FunctionIdentifier else 'CBCI' end)    
 and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0     
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end    
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end     
 and a.PlantNo in (SELECT * FROM @TempPN) 
 and a.ReferenceBatchNumber3 is not null  

END    
ELSE    
BEGIN    
 --details: picking list    
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
 TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,    
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,    
 ReferenceBatchNumber1, ReferenceBatchNumber2, ReferenceBatchNumber3, ReferenceBatchSequence1, ReferenceBatchSequence2, ReferenceBatchSequence3,    
 RefNumberOfPieces1, RefNumberOfPieces2, RefNumberOfPieces3,CreationTime)    
    
 select b.PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber, b.PSIReworkOrderNo as BatchOrderNumber,     
 '' as MovementJournalNumber, '' as TransferJournalNumber,     
 ISNULL(NULLIF(b.PickListJournalId,''), (select PickListJournalId from DOT_PickingSumTable with(nolock) where D365BatchNumber = a.D365BatchNumber and     
 FunctionIdentifier = a.FunctionIdentifier)) as PickListJournalNumber,     
 '' as RouteCardJournalNumber, '' as RAFJournalNumber, b.ItemNumber, b.Configuration as Size,    
 b.Warehouse, 'RWK' as Location,     
 b.OldBatchQty as TransitionQuantity,     
 NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,    
 a.ReferenceBatchNumber1, a.ReferenceBatchNumber2, a.ReferenceBatchNumber3,    
 a.ReferenceBatchSequence1, a.ReferenceBatchSequence2, a.ReferenceBatchSequence3,    
 b.RefNumberOfPieces1, b.RefNumberOfPieces2, b.RefNumberOfPieces3,a.CreationTime    
     
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_PickingList b with(nolock) on a.id = b.ParentRefRecId    
 where a.FunctionIdentifier in (case when LEN(@FunctionIdentifier) > 0 then @FunctionIdentifier else 'CBCI' end)    
 and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0     
 and b.PostingDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end    
 and b.PostingDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end     
 and a.PlantNo in (SELECT * FROM @TempPN)   
     
--details: picking list change SN 1    
INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,    
ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,CreationTime)    
    
select PostingDateTime, ReferenceBatchNumber1 as SerialNumber,     
dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard(ReferenceBatchNumber1) as D365BatchNumber,     
dbo.UFN_DOT_GetBOForSummaryBatchCard(ReferenceBatchNumber1) as BatchOrderNumber,     
MovementJournalNumber, TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size,    
dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber1,ReferenceBatchSequence1) as Warehouse,    
dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber1,ReferenceBatchSequence1) as Location,     
RefNumberOfPieces1 * -1 as TransitionQuantity, ReservedQuantity, Sequence + 1 as Sequence, FunctionIdentifier, PlantNo,CreationTime    
from #tmpUnion where ReferenceBatchNumber1 is not null    
    
--details: picking list change SN 2    
INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,    
ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,CreationTime)    
    
select PostingDateTime, ReferenceBatchNumber2 as SerialNumber,     
dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard(ReferenceBatchNumber2) as D365BatchNumber,     
dbo.UFN_DOT_GetBOForSummaryBatchCard(ReferenceBatchNumber2) as BatchOrderNumber,     
MovementJournalNumber, TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size,    
dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber2,ReferenceBatchSequence2) as Warehouse,    
dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber2,ReferenceBatchSequence2) as Location,     
RefNumberOfPieces2 * -1 as TransitionQuantity, ReservedQuantity, Sequence + 1 as Sequence, FunctionIdentifier,PlantNo,CreationTime    
from #tmpUnion where ReferenceBatchNumber2 is not null    
    
--details: picking list change SN 3    
INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,    
ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,CreationTime)    
    
select PostingDateTime, ReferenceBatchNumber3 as SerialNumber,     
dbo.UFN_DOT_GetD365BatchNoForSummaryBatchCard(ReferenceBatchNumber3) as D365BatchNumber,     
dbo.UFN_DOT_GetBOForSummaryBatchCard(ReferenceBatchNumber3) as BatchOrderNumber,     
MovementJournalNumber, TransferJournalNumber, PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size,    
dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(ReferenceBatchNumber3,ReferenceBatchSequence3) as Warehouse,    
dbo.UFN_DOT_GetLocationForSummaryBatchCard(ReferenceBatchNumber3,ReferenceBatchSequence3) as Location,     
RefNumberOfPieces3 * -1 as TransitionQuantity, ReservedQuantity, Sequence + 1 as Sequence, FunctionIdentifier, PlantNo,CreationTime    
from #tmpUnion where ReferenceBatchNumber3 is not null   

END    
 
--add adjustment quantity
--insert into #tmpUnion
--SELECT 
--	CASE WHEN a.BatchNumber = 'OpeningUpload' then a.BatchNumber 
--	ELSE 'Adjusted' END as FunctionIdentifier,
--	case when b.LastModificationTime is null then b.CreationTime else b.LastModificationTime end ,
--	b.BatchCardNum as SerialNumber,   
--   a.D365BatchNumber, '', a.JournalId,   
--   '','', '',   
--   '',a.ItemNumber, '',   
--   a.Warehouse, a.Location, 0,   
--   b.Quantity ,''  
--FROM DOT_InventAdjustmentSumTable a right join DOT_InventAdjustmentSumTableDetails b on a.InventTransId = b.InventTransId 
--where 
--	a.D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers) or 
--	b.BatchCardNum in (select SerialNumber from #SerialNumbers)
	
Select a.PlantNo, a.FunctionIdentifier, a.PostingDateTime, a.SerialNumber, a.D365BatchNumber, a.BatchOrderNumber, a.MovementJournalNumber,     
a.TransferJournalNumber, a.PickingListJournalNumber as PickingListJournalNumber, a.RouteCardJournalNumber, a.RAFJournalNumber, a.ItemNumber, a.Size, a.Warehouse,a.Location,    
 -- hide qty if not complete posting without journal id come back from d365
case when ISNULL(a.PickingListJournalNumber,'')='' then 0.0 else CONVERT(DECIMAL (10, 4),a.TransitionQuantity) end as TransitionQuantity, 
CONVERT(DECIMAL (10, 4),a.ReservedQuantity) as ReservedQuantity,CreationTime    
from #tmpUnion a    
WHERE Warehouse LIKE (case when LEN(@Warehouse) > 0 then @Warehouse  else '%' end)    
    
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL      
DROP TABLE #SerialNumbers     
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL      
DROP TABLE #D365BatchNumbers     
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL      
DROP TABLE #CustReferenceNumbers    
IF OBJECT_ID('tempdb..#TmpUnion') IS NOT NULL      
DROP TABLE #TmpUnion    
    
END
GO
PRINT N'Altering Procedure [dbo].[USP_DOT_ReworkSummaryBatchCardReport]...';


GO
-- ==================================================================================================================================================        
-- Name: USP_DOT_ReworkSummaryBatchCardReport      
-- Purpose: Summary Batch Card Report for Rework Order (RWKCR/RWKDEL)    
-- ==================================================================================================================================================        
-- Change History        
-- Date   Author   Comments        
-- -----  ------   ------------------------------------------------------------      
-- 2021/10/26   Azrul    SP created.        
-- ==================================================================================================================================================       
-- exec USP_DOT_ReworkSummaryBatchCardReport '2211289819,2211290110,2210559670', '', '', '2021-01-01','2021-10-01','','',''    
-- exec USP_DOT_ReworkSummaryBatchCardReport '2211290123', '', '', '','','','',''    
-- exec USP_DOT_ReworkSummaryBatchCardReport '2211290124', '', '', '','','','',''    
-- exec USP_DOT_ReworkSummaryBatchCardReport '2211290126', '', '', '','','','',''    
-- exec USP_DOT_ReworkSummaryBatchCardReport '2211290110', '', '', '','','','',''    
-- exec USP_DOT_ReworkSummaryBatchCardReport '', '', 'ANSL 301/20', '','','','',''    
-- exec USP_DOT_ReworkSummaryBatchCardReport '', '', 'MEDU 806/21', '','','','',''    
-- exec USP_DOT_ReworkSummaryBatchCardReport '', '', '', '2021-08-01','2021-08-02','','',''    
-- exec USP_DOT_ReworkSummaryBatchCardReport '2211010114', '', '', '','','','',''    
-- ==================================================================================================================================================    
    
ALTER   PROCEDURE [dbo].[USP_DOT_ReworkSummaryBatchCardReport]      
(    
@SerialNumber NVARCHAR(4000),    
@D365BatchNumber NVARCHAR(4000),    
@CustReferenceNumber NVARCHAR(4000),    
@PostingDateTimeFrom NVARCHAR(100),    
@PostingDateTimeTo NVARCHAR(100),    
@PlantNo NVARCHAR(4000),    
@Warehouse NVARCHAR(4000),    
@FunctionIdentifier NVARCHAR(4000)    
)    
    
AS    
BEGIN      
 -- SET NOCOUNT ON added to prevent extra result sets from        
 -- interfering with SELECT statements.        
 SET NOCOUNT ON;    
    
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL      
DROP TABLE #SerialNumbers     
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL      
DROP TABLE #D365BatchNumbers     
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL      
DROP TABLE #CustReferenceNumbers    
IF OBJECT_ID('tempdb..#TmpUnion') IS NOT NULL      
DROP TABLE #TmpUnion    
    
CREATE TABLE #SerialNumbers (SerialNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)    
CREATE TABLE #D365BatchNumbers (D365BatchNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)    
CREATE TABLE #CustReferenceNumbers (CustReferenceNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)    
CREATE TABLE #tmpUnion (PostingDateTime DATETIME2,     
      SerialNumber NVARCHAR(50),     
      D365BatchNumber NVARCHAR(50),     
      BatchOrderNumber NVARCHAR(50),     
      MovementJournalNumber NVARCHAR(50),     
      TransferJournalNumber NVARCHAR(50),     
      PickListJournalNumber NVARCHAR(50),     
      RouteCardJournalNumber NVARCHAR(50),     
      RAFJournalNumber NVARCHAR(50),     
      ItemNumber NVARCHAR(100),     
      Size NVARCHAR(10),     
      Warehouse NVARCHAR(10),     
      Location NVARCHAR(10),     
      TransitionQuantity DECIMAL (10, 4) DEFAULT 0.0000,     
      ReservedQuantity DECIMAL (10, 4),     
      BaseQuantity DECIMAL DEFAULT 0,     
      Sequence INT,     
      FunctionIdentifier NVARCHAR(50),    
      PlantNo NVARCHAR(10),    
      ReferenceBatchNumber1 NVARCHAR(50) DEFAULT NULL,     
      ReferenceBatchNumber2 NVARCHAR(50) DEFAULT NULL,     
      ReferenceBatchNumber3 NVARCHAR(50) DEFAULT NULL,     
      ReferenceBatchNumber4 NVARCHAR(50) DEFAULT NULL,     
      ReferenceBatchNumber5 NVARCHAR(50) DEFAULT NULL,    
      ReferenceBatchSequence1 INT DEFAULT 0,     
      ReferenceBatchSequence2 INT DEFAULT 0,     
      ReferenceBatchSequence3 INT DEFAULT 0,     
      ReferenceBatchSequence4 INT DEFAULT 0,     
      ReferenceBatchSequence5 INT DEFAULT 0,    
      RefNumberOfPieces1 DECIMAL DEFAULT 0,     
      RefNumberOfPieces2 DECIMAL DEFAULT 0,     
      RefNumberOfPieces3 DECIMAL DEFAULT 0,     
      RefNumberOfPieces4 DECIMAL DEFAULT 0,     
      RefNumberOfPieces5 DECIMAL DEFAULT 0,    
      RefItemNumber1 NVARCHAR(50) DEFAULT NULL,     
      RefItemNumber2 NVARCHAR(50) DEFAULT NULL,     
      RefItemNumber3 NVARCHAR(50) DEFAULT NULL,     
      RefItemNumber4 NVARCHAR(50) DEFAULT NULL,     
      RefItemNumber5 NVARCHAR(50) DEFAULT NULL,
	  CreationTime DATETIME2)    
    
IF (LEN(@SerialNumber) > 0)     
BEGIN    
 INSERT INTO #SerialNumbers     
 select * from dbo.SplitString(NULLIF(@SerialNumber, ','), ',')    
END    
ELSE IF (LEN(@D365BatchNumber) > 0)     
BEGIN    
 INSERT INTO #D365BatchNumbers     
 select * from dbo.SplitString(NULLIF(@D365BatchNumber, ''), ',')    
    
 INSERT INTO #SerialNumbers    
 select   
 case when isnull(a.BatchNumber,'')='' then isnull(b.BatchNumber,'')  
    else isnull(a.BatchNumber,'') end   
    --*  
 from DOT_FloorAxIntParentTable a with(nolock)   
 left join DOT_FGJournalTable b with(nolock) on a.Id=b.ParentRefRecId and b.IsDeleted=0  
 where   
  D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '') or   
  a.BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '')  
  
 and a.IsDeleted = 0  --and IsMigratedFromAX6 = 0        
END    
Else IF (LEN(@CustReferenceNumber) > 0)     
BEGIN    
 INSERT INTO #CustReferenceNumbers     
 select * from dbo.SplitString(NULLIF(@CustReferenceNumber, ','), ',')    
    
 INSERT INTO #SerialNumbers    
 select BatchNumber from dbo.UFN_DOT_GetSNFromCustRefForSummaryBatchCardReport(@CustReferenceNumber)    
END    
    
DECLARE @TempPN TABLE (PlantNo VARCHAR(10))    
    
IF (LEN(@PlantNo) > 0)     
BEGIN    
 INSERT INTO @TempPN VALUES (@PlantNo)    
END    
    
ELSE    
BEGIN    
 INSERT INTO @TempPN select LocationName from LocationMaster    
END    
    
DECLARE @StartPostingDateTime DateTime = '2019-03-01'    
DECLARE @EndPostingDateTime DateTime = DATEADD(DAY,1,GetDate())    
DECLARE @SerialNoCount int    
SELECT @SerialNoCount = Count(1) from #SerialNumbers    
    
IF (@SerialNoCount > 0)    
BEGIN    
 --details: rework Reserved    
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,     
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,CreationTime)    
    
 select b.PostingDateandTime as PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,     
 ISNULL(b.ReworkOrder, (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch    
 '' as MovementJournalNumber, '' as TransferJournalNumber,     
 '' as PickListJournalNumber, '' as RouteCardJournalNumber, '' as RAFJournalNumber,    
 b.ItemNumber, b.Configuration as Size,    
 b.Warehouse, ISNULL(dbo.UFN_DOT_GetLocationForSummaryBatchCard(a.BatchNumber,a.Sequence),Replace(b.RouteCategory,'O','')) as Location,     
 NULL as TransitionQuantity, b.Quantity * -1 as ReservedQuantity,     
 a.Sequence, a.FunctionIdentifier, a.PlantNo,a.CreationTime   
 from DOT_FloorAxIntParentTable a with(nolock)     
 join DOT_RwkBatchOrderCreationChildTable b with(nolock) on a.id = b.ParentRefRecId    
 where (a.FunctionIdentifier in (case when LEN(@FunctionIdentifier) > 0 then @FunctionIdentifier else 'RWKCR' end)    
 or a.FunctionIdentifier in (case when LEN(@FunctionIdentifier) > 0 then @FunctionIdentifier else 'RWKDEL' end))    
 and a.BatchNumber IN (Select Distinct SerialNumber from #SerialNumbers where SerialNumber <> '')    
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0     
 and b.PostingDateandTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end    
 and b.PostingDateandTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end    
 and PlantNo in (SELECT * FROM @TempPN)    
END    
ELSE    
BEGIN    
 --details: rework Reserved    
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,     
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,     
 ItemNumber, Size, Warehouse, Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,CreationTime)    
    
 select b.PostingDateandTime as PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber,
 ISNULL(b.ReworkOrder, (select ReworkOrder from DOT_RwkcrSumTable with(nolock) where DetailStagingJSON=a.Id)) as BatchOrderNumber, --for consolidation batch      
 '' as MovementJournalNumber, '' as TransferJournalNumber,     
 '' as PickListJournalNumber, '' as RouteCardJournalNumber, '' as RAFJournalNumber,    
 b.ItemNumber, b.Configuration as Size,    
 b.Warehouse, ISNULL(dbo.UFN_DOT_GetLocationForSummaryBatchCard(a.BatchNumber,a.Sequence),Replace(b.RouteCategory,'O','')) as Location,     
 NULL as TransitionQuantity, b.Quantity * -1 as ReservedQuantity,     
 a.Sequence, a.FunctionIdentifier, a.PlantNo,a.CreationTime    
 from DOT_FloorAxIntParentTable a with(nolock)     
 join DOT_RwkBatchOrderCreationChildTable b with(nolock) on a.id = b.ParentRefRecId    
 where (a.FunctionIdentifier in (case when LEN(@FunctionIdentifier) > 0 then @FunctionIdentifier else 'RWKCR' end)    
 or a.FunctionIdentifier in (case when LEN(@FunctionIdentifier) > 0 then @FunctionIdentifier else 'RWKDEL' end))    
 and a.IsDeleted = 0 -- and a.IsMigratedFromAX6 = 0     
 and b.PostingDateandTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end    
 and b.PostingDateandTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end    
 and PlantNo in (SELECT * FROM @TempPN)    
END    
    
Select a.PlantNo, a.FunctionIdentifier, a.PostingDateTime, a.SerialNumber, a.D365BatchNumber, a.BatchOrderNumber, a.MovementJournalNumber,     
a.TransferJournalNumber, PickListJournalNumber as PickingListJournalNumber, RouteCardJournalNumber, RAFJournalNumber,    
a.ItemNumber, a.Size, a.Warehouse,a.Location,    
CONVERT(DECIMAL (10, 4),a.TransitionQuantity) as TransitionQuantity, 
case when ISNULL(a.BatchOrderNumber,'')='' then 0.0 else CONVERT(DECIMAL (10, 4),a.ReservedQuantity) end as ReservedQuantity,CreationTime      
from #tmpUnion a    
WHERE Warehouse LIKE (case when LEN(@Warehouse) > 0 then @Warehouse  else '%' end)    
    
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL      
DROP TABLE #SerialNumbers     
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL      
DROP TABLE #D365BatchNumbers     
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL      
DROP TABLE #CustReferenceNumbers    
IF OBJECT_ID('tempdb..#TmpUnion') IS NOT NULL      
DROP TABLE #TmpUnion    
    
END
GO
PRINT N'Altering Procedure [dbo].[USP_DOT_TransferSummaryBatchCardReport]...';


GO
-- ==================================================================================================================================================                
-- Name: USP_DOT_TransferSummaryBatchCardReport              
-- Purpose: Summary Batch Card Report For Transfer Batch              
-- ==================================================================================================================================================                
-- Change History                
-- Date   Author   Comments                
-- -----  ------   ------------------------------------------------------------              
-- 2021/10/26   Azrul    SP created.                
-- ==================================================================================================================================================               
-- exec USP_DOT_TransferSummaryBatchCardReport '2210605283,2210605145,2210605001,2210605292,2210605426', '', '', '2021-01-01','2021-10-01','','',''            
-- exec USP_DOT_TransferSummaryBatchCardReport '2210605283,2210605145,2210605001,2210605292,2210605426', '', '', '','','','',''            
-- exec USP_DOT_TransferSummaryBatchCardReport '2210931745', '', '', '','','','',''            
-- exec USP_DOT_TransferSummaryBatchCardReport '', '', 'ANSL 301/20', '','','','',''            
-- exec USP_DOT_TransferSummaryBatchCardReport '', '', 'MEDU 806/21', '','','','',''            
-- exec USP_DOT_TransferSummaryBatchCardReport '', '', '', '2021-08-01','2021-08-02','','',''    
-- exec USP_DOT_TransferSummaryBatchCardReport '', '202112220002', '', '','','','',''        
-- exec USP_DOT_TransferSummaryBatchCardReport '2210980629', '', '', '','','','',''        
-- ==================================================================================================================================================            
            
ALTER   PROCEDURE [dbo].[USP_DOT_TransferSummaryBatchCardReport]  
(            
@SerialNumber NVARCHAR(4000),            
@D365BatchNumber NVARCHAR(4000),            
@CustReferenceNumber NVARCHAR(4000),            
@PostingDateTimeFrom NVARCHAR(100),            
@PostingDateTimeTo NVARCHAR(100),            
@PlantNo NVARCHAR(4000),            
@Warehouse NVARCHAR(4000),            
@FunctionIdentifier NVARCHAR(4000)        
)            
            
AS            
BEGIN              
-- -- SET NOCOUNT ON added to prevent extra result sets from                
-- -- interfering with SELECT statements.                
 SET NOCOUNT ON;            
        
IF OBJECT_ID('tempdb..#FunctionIdentifiers') IS NOT NULL          
DROP TABLE #FunctionIdentifiers              
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL              
DROP TABLE #SerialNumbers             
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL              
DROP TABLE #D365BatchNumbers             
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL              
DROP TABLE #CustReferenceNumbers            
IF OBJECT_ID('tempdb..#tmpUnion') IS NOT NULL              
DROP TABLE #tmpUnion            
        
CREATE TABLE #FunctionIdentifiers (Identifier NVARCHAR(20) COLLATE DATABASE_DEFAULT)            
CREATE TABLE #SerialNumbers (SerialNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)            
CREATE TABLE #D365BatchNumbers (D365BatchNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)            
CREATE TABLE #CustReferenceNumbers (CustReferenceNumber NVARCHAR(4000) COLLATE DATABASE_DEFAULT)            
CREATE TABLE #tmpUnion (PostingDateTime DATETIME2,             
      SerialNumber NVARCHAR(50),             
      D365BatchNumber NVARCHAR(50),             
      BatchOrderNumber NVARCHAR(50),             
      MovementJournalNumber NVARCHAR(100),             
      TransferJournalNumber NVARCHAR(100),             
      PickListJournalNumber NVARCHAR(100),             
      RouteCardJournalNumber NVARCHAR(100),             
      RAFJournalNumber NVARCHAR(100),             
      ItemNumber NVARCHAR(100),             
      Size NVARCHAR(10),             
      Warehouse NVARCHAR(10),             
      Location NVARCHAR(10),             
    TransitionQuantity DECIMAL (10, 4) DEFAULT 0,             
      ReservedQuantity DECIMAL (10, 4),             
      BaseQuantity DECIMAL DEFAULT 0,             
      Sequence INT,             
      FunctionIdentifier NVARCHAR(50),            
      PlantNo NVARCHAR(10),            
      ReferenceBatchNumber1 NVARCHAR(50) DEFAULT NULL,             
      ReferenceBatchNumber2 NVARCHAR(50) DEFAULT NULL,             
      ReferenceBatchNumber3 NVARCHAR(50) DEFAULT NULL,             
      ReferenceBatchNumber4 NVARCHAR(50) DEFAULT NULL,             
      ReferenceBatchNumber5 NVARCHAR(50) DEFAULT NULL,            
      ReferenceBatchSequence1 INT DEFAULT 0,             
      ReferenceBatchSequence2 INT DEFAULT 0,             
      ReferenceBatchSequence3 INT DEFAULT 0,             
      ReferenceBatchSequence4 INT DEFAULT 0,             
      ReferenceBatchSequence5 INT DEFAULT 0,            
      RefNumberOfPieces1 DECIMAL DEFAULT 0,                 
      RefNumberOfPieces2 DECIMAL DEFAULT 0,             
      RefNumberOfPieces3 DECIMAL DEFAULT 0,             
      RefNumberOfPieces4 DECIMAL DEFAULT 0,             
      RefNumberOfPieces5 DECIMAL DEFAULT 0,            
      RefItemNumber1 NVARCHAR(50) DEFAULT NULL,             
      RefItemNumber2 NVARCHAR(50) DEFAULT NULL,             
      RefItemNumber3 NVARCHAR(50) DEFAULT NULL,             
      RefItemNumber4 NVARCHAR(50) DEFAULT NULL,             
      RefItemNumber5 NVARCHAR(50) DEFAULT NULL,
	  CreationTime DATETIME2)            
            
IF (LEN(@SerialNumber) > 0)             
BEGIN            
 INSERT INTO #SerialNumbers             
 select * from dbo.SplitString(NULLIF(@SerialNumber, ','), ',')            
END            
ELSE IF (LEN(@D365BatchNumber) > 0)             
BEGIN            
 INSERT INTO #D365BatchNumbers             
 select * from dbo.SplitString(NULLIF(@D365BatchNumber, ''), ',')            
            
 INSERT INTO #SerialNumbers            
 select           
 case when isnull(a.BatchNumber,'')='' then isnull(b.BatchNumber,'')          
    else isnull(a.BatchNumber,'') end           
    --*          
 from DOT_FloorAxIntParentTable a with(nolock)           
 left join DOT_FGJournalTable b with(nolock) on a.Id=b.ParentRefRecId and b.IsDeleted=0          
 where           
  D365BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '') or           
  a.BatchNumber in (select D365BatchNumber from #D365BatchNumbers where D365BatchNumber <> '')          
          
 and a.IsDeleted = 0  --and IsMigratedFromAX6 = 0                
END            
Else IF (LEN(@CustReferenceNumber) > 0)             
BEGIN            
 INSERT INTO #CustReferenceNumbers             
 select * from dbo.SplitString(NULLIF(@CustReferenceNumber, ','), ',')            
            
 INSERT INTO #SerialNumbers            
 select BatchNumber from dbo.UFN_DOT_GetSNFromCustRefForSummaryBatchCardReport(@CustReferenceNumber)            
END            
            
DECLARE @TempPN TABLE (PlantNo VARCHAR(10))            
            
IF (LEN(@PlantNo) > 0)             
BEGIN            
 INSERT INTO @TempPN VALUES (@PlantNo)            
END            
            
ELSE            
BEGIN            
 INSERT INTO @TempPN select LocationName from LocationMaster            
END            
        
IF(LEN(@FunctionIdentifier) > 0)        
BEGIN        
      INSERT INTO #FunctionIdentifiers        
      select * from dbo.SplitString(NULLIF(@FunctionIdentifier, ','), ',')        
END        
ELSE        
BEGIN        
      INSERT INTO #FunctionIdentifiers         
      SELECT ('SPBC')        
        
   INSERT INTO #FunctionIdentifiers         
      SELECT ('STPI')        
        
   INSERT INTO #FunctionIdentifiers         
      SELECT ('STPO')        
END        
            
DECLARE @StartPostingDateTime DateTime = '2019-03-01'            
DECLARE @EndPostingDateTime DateTime = DATEADD(DAY,1,GetDate())            
DECLARE @SerialNoCount int            
SELECT @SerialNoCount = Count(1) from #SerialNumbers            
            
--details: transfer batch            
IF (@SerialNoCount > 0)            
BEGIN            
 -- Transfer from details            
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,             
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size, Warehouse,             
 Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier, PlantNo,CreationTime)            
            
 select b.ScanInDateTime as PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber, '' as BatchOrderNumber, '' as MovementJournalNumber,             
 ISNULL(NULLIF(b.TransferJournalId,''), (select TransferJournalId from DOT_TransferSumTable with(nolock)             
 where DetailStagingJSON=a.Id))             
 as TransferJournalNumber, --for consolidation batch            
 '' as PickListJournalNumber, '' as RouteCardJournalNumber, '' as RAFJournalNumber,            
 b.ItemNumber, b.Configuration as Size, b.Warehouse, b.Location,             
 Case when ((b.Location = 'PN' or b.Location = 'QC') and a.FunctionIdentifier='STPI') or (b.Location = 'TP' and a.FunctionIdentifier='STPO') Then b.Quantity * -1 else b.Quantity end as TransitionQuantity,             
 NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,a.CreationTime            
            
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_TransferJournal b with(nolock) on a.id = b.ParentRefRecId            
 join #FunctionIdentifiers f on f.Identifier=a.FunctionIdentifier        
 where a.BatchNumber IN (Select Distinct SerialNumber from #SerialNumbers where SerialNumber <> '')            
 and a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0             
 and b.ScanInDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end            
 and b.ScanInDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end            
 and PlantNo in (SELECT * FROM @TempPN)            
             
 -- Transfer to details            
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,             
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size, Warehouse,             
 Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,CreationTime)            
            
 Select PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,             
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size,             
 '' as Warehouse,             
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(SerialNumber, Sequence) as Location,             
 TransitionQuantity * -1, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,CreationTime            
 From #tmpUnion            
            
END            
ELSE            
BEGIN            
 -- Transfer from details            
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,             
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size, Warehouse,             
 Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,CreationTime)            
            
 select b.ScanInDateTime as PostingDateTime, a.BatchNumber as SerialNumber, a.D365BatchNumber, '' as BatchOrderNumber, '' as MovementJournalNumber,             
 ISNULL(NULLIF(b.TransferJournalId,''), (select TransferJournalId from DOT_TransferSumTable with(nolock)             
 where DetailStagingJSON=a.Id)) as TransferJournalNumber, --for consolidation batch           
 '' as PickListJournalNumber, '' as RouteCardJournalNumber, '' as RAFJournalNumber,            
 b.ItemNumber, b.Configuration as Size, b.Warehouse, b.Location,             
 Case when ((b.Location = 'PN' or b.Location = 'QC') and a.FunctionIdentifier='STPI') or (b.Location = 'TP' and a.FunctionIdentifier='STPO') Then b.Quantity * -1 else b.Quantity end as TransitionQuantity,             
 NULL as ReservedQuantity, a.Sequence, a.FunctionIdentifier, a.PlantNo,a.CreationTime            
    
 from DOT_FloorAxIntParentTable a with(nolock) join DOT_TransferJournal b with(nolock) on a.id = b.ParentRefRecId            
 join #FunctionIdentifiers f on f.Identifier=a.FunctionIdentifier        
 where a.IsDeleted = 0 --and a.IsMigratedFromAX6 = 0             
 and b.ScanInDateTime >= case when LEN(@PostingDateTimeFrom) > 0 then @PostingDateTimeFrom else @StartPostingDateTime end            
 and b.ScanInDateTime <= case when LEN(@PostingDateTimeTo) > 0 then @PostingDateTimeTo  else @EndPostingDateTime end            
 and PlantNo in (SELECT * FROM @TempPN)            
            
 -- Transfer to details            
 INSERT INTO #tmpUnion (PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,             
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size, Warehouse,             
 Location, TransitionQuantity, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,CreationTime)            
             
 Select PostingDateTime, SerialNumber, D365BatchNumber, BatchOrderNumber, MovementJournalNumber,             
 TransferJournalNumber, PickListJournalNumber, RouteCardJournalNumber, RAFJournalNumber, ItemNumber, Size,            
 '' as Warehouse,             
 dbo.UFN_DOT_GetLocationForSummaryBatchCard(SerialNumber, Sequence) as Location,             
 TransitionQuantity * -1, ReservedQuantity, Sequence, FunctionIdentifier,PlantNo,CreationTime            
 From #tmpUnion            
END            
            
select * from     
(    
Select a.PlantNo, a.FunctionIdentifier, a.PostingDateTime, a.SerialNumber, a.D365BatchNumber, a.BatchOrderNumber, a.MovementJournalNumber,             
a.TransferJournalNumber, '' as PickingListJournalNumber, '' as RouteCardJournalNumber, '' as RAFJournalNumber,            
a.ItemNumber, a.Size,     
case when isnull(a.Warehouse,'')<>'' and FunctionIdentifier='SPBC' then a.Warehouse   
else case when isnull(@Warehouse,'')<>'' then @Warehouse else dbo.UFN_DOT_GetWarehouseForSummaryBatchCard(SerialNumber, Sequence) end  
end as Warehouse,       
 a.Location,          
-- hide qty if not complete posting without journal id come back from d365      
case when ISNULL(a.TransferJournalNumber,'')='' then 0.0 else CONVERT(DECIMAL (10, 4),a.TransitionQuantity) end as TransitionQuantity, CONVERT(DECIMAL (10, 4),a.ReservedQuantity) as ReservedQuantity,a.CreationTime              
from #tmpUnion a      
) b         
WHERE Warehouse LIKE (case when LEN(@Warehouse) > 0 then @Warehouse  else '%' end)         
    
IF OBJECT_ID('tempdb..#SerialNumbers') IS NOT NULL              
DROP TABLE #SerialNumbers             
IF OBJECT_ID('tempdb..#D365BatchNumbers') IS NOT NULL              
DROP TABLE #D365BatchNumbers             
IF OBJECT_ID('tempdb..#CustReferenceNumbers') IS NOT NULL              
DROP TABLE #CustReferenceNumbers            
IF OBJECT_ID('tempdb..#tmpUnion') IS NOT NULL              
DROP TABLE #tmpUnion            
            
END
GO
PRINT N'Altering Procedure [dbo].[usp_DryerBatch_SerialNo_Get]...';


GO
  
  
-- =============================================  
-- Name:   [dbo].[usp_DryerBatch_SerialNo_Get]  
-- Purpose:   <If serial number entered already exists in the DryerScanBatchCard table   
--     then SerialNumber, StartTime,StopTime, Dryer, DryerProgram and   
--     ReworkCount will be returned from DryerScanBatchCard table>  
-- =============================================  
-- Change History  
-- Date   Author    Comments  
-- -----  ------    -----------------------------  
-- 07/07/2014  Kishan    SP created.  
-- 16/07/2014  Kishan     Changes after review by Narendra  
-- =============================================  
-- 05/04/2018 Azman Kasim  Change Dryer Program  
-- 08/01/2019  Azrul    Get the Dryer program name instead of dryer program id  
ALTER PROCEDURE [dbo].[usp_DryerBatch_SerialNo_Get]  
(  
@serialNo DECIMAL  
)  
AS  
BEGIN  
SET NOCOUNT ON;  
  
 --SELECT TOP 1 SerialNumber,DryerId,DryerProgram,StartDateTime as StartTime,StopDateTime as StopTime,ReworkReason AS ReworkType,  
 --ReworkCount,LastModifiedOn FROM DryerScanBatchCard  
 --WHERE SerialNumber = @serialNo ORDER BY ReworkCount DESC  
  
 --SELECT TOP 100 SerialNumber,DryerId, B.CYCLONEPROCESS as DryerProgram,StartDateTime as StartTime,StopDateTime as StopTime,ReworkReason AS ReworkType,  
 --ReworkCount,LastModifiedOn FROM DryerScanBatchCard A INNER JOIN AX_AVACYCLONEPROCESSTABLE B ON A.DryerProgram = B.AVACYCLONEPROCESSTABLE_ID  
 --WHERE SerialNumber = @serialNo ORDER BY ReworkCount DESC  
  
 -- SELECT TOP 100 SerialNumber,DryerId, B.CYCLONEPROCESS as DryerProgram,StartDateTime as StartTime,StopDateTime as StopTime,ReworkReason AS ReworkType,  
 --ReworkCount,LastModifiedOn FROM DryerScanBatchCard A INNER JOIN DOT_FSCycloneProgram B ON A.DryerProgram = B.Id  
 --WHERE SerialNumber = @serialNo ORDER BY ReworkCount DESC  

  SELECT TOP 1 dsb.SerialNumber,dsb.DryerId,dp.Id as DryerProgramId,dp.CycloneProcess as DryerProgram,dsb.StartDateTime as StartTime,dsb.StopDateTime as StopTime,  
 dsb.ReworkReason AS ReworkType,dsb.ReworkCount,dsb.LastModifiedOn   
 FROM DryerScanBatchCard dsb  
 join DOT_FSCycloneProgram dp on dsb.DryerProgram=dp.Id  
 WHERE SerialNumber = @serialNo ORDER BY ReworkCount DESC  
END
GO
PRINT N'Altering Procedure [dbo].[usp_DryerProgram_GloveType_Get]...';


GO
-- ============================================================    
-- Name:   [dbo].[usp_DryerProgram_GloveType_Get]    
-- Purpose:   <Fetches dryer program based on GloveType>    
-- ============================================================    
-- Change History    
-- Date   Author    Comments    
-- -----  ------    -----------------------------    
-- 09/09/2014  Kishan    SP created    
-- 26/11/2014   Kishan     Added filter for Stopped    
-- 19/01/2021   Aaron Quak     Map to new table  
-- 27/02/2021 Azman  Fix on deleted record on DOT_GloveRelCyclone  
-- 22/11/2021 Azrul  HTLG_HSB_002: Special Glove (Clean Room Product) - Rename DryerProgram. 
-- ============================================================    
ALTER PROCEDURE [dbo].[usp_DryerProgram_GloveType_Get]    
(    
@GloveType NVARCHAR(50)    
)    
AS    
BEGIN    
SET NOCOUNT ON;    
--SELECT cp.AVACYCLONEPROCESSTABLE_ID AS DryerProgramId,cp.CYCLONEPROCESS AS DryerProgramName    
--FROM AX_AVAGLOVERELCYCLONE grc    
--INNER JOIN AX_AVAGLOVECODETABLE gct    
----ON gct.RECID = grc.GLOVEREFRECID    
--ON gct.AVAGLOVECODETABLE_ID = grc.GLOVEREFRECID    
--INNER JOIN AX_AVACYCLONEPROCESSTABLE cp    
--ON grc.CYCLONEPROCESS = cp.CYCLONEPROCESS    
--WHERE gct.GloveCode = @GloveType    
--AND cp.STOPPED <> 1    
  
  
SELECT cp.Id AS DryerProgramId,cp.CYCLONEPROCESS AS DryerProgram --DryerProgramName    
FROM DOT_GloveRelCyclone grc    
INNER JOIN DOT_FSGloveCode gct    
--ON gct.RECID = grc.GLOVEREFRECID    
ON gct.AVAGLOVECODETABLE_ID = grc.GLOVEREFRECID AND grc.IsDeleted <> 1   
INNER JOIN DOT_FSCycloneProgram cp    
ON grc.CycloneProcessId = cp.Id    
INNER JOIN DOT_FSItemMaster D ON  gct.ItemRecordId = D.Id    
WHERE D.ItemId = @GloveType    
AND cp.STOPPED <> 1  and  cp.IsDeleted = 0  
END
GO
PRINT N'Altering Procedure [dbo].[USP_EWN_InsertPalletData]...';


GO
-- =============================================  
-- Name:   [USP_EWN_InsertPalletData]  
-- Purpose:   Insert data to the eWareNavi table  
-- =============================================  
-- Change History  
-- Date   Author    Comments  
-- -----  ------    -----------------------------  
-- 24/01/2017  Cheah Teik Chuan SP created.  
-- 23/09/2020 Chong Kah HOe  Changed SP to match ewarenavi special character limitation  
-- 10/02/2022 Azrul  New column FGCodeAndSize (HartalegaCommonSize) for IOT scan, 
--					 original Item (CustomerSize) field for EWN and lifter scan.
-- =============================================  
  
ALTER PROCEDURE [dbo].[USP_EWN_InsertPalletData]  
(   
 @QAPassed   int,  
 @Item    varchar(20),  
 @PONumber   varchar(20),  
 @Qty    int,  
 @PalletID   varchar(8),  
 @DateComplete  datetime,  
 @DateStockOut  datetime,  
 @FGCodeAndSize   varchar(20)  
)   
AS  
BEGIN   
 SET @Item = Replace(@Item, ' 1/2', '½')   
  
 Insert into EWN_CompletedPallet(QAPassed,Item,PONumber,Qty,PalletId,DateCompleted,DateStockOut,FGCodeAndSize)  
 values (@QAPassed, @Item,@PONumber,@Qty,@PalletID,@DateComplete,@DateStockOut,@FGCodeAndSize)  
  
END
GO
PRINT N'Altering Procedure [dbo].[usp_FP_FinalPacking_Save_MSBC]...';


GO
  
-- =============================================  
-- Author:  Kamil  
-- Create date: 17 July 2019  
-- Description: Increase length @InnerSetLayout and @OuterSetLayout. Add nolock  
  
-- 2019-09-12 Azman Kasim  Add FPStationNo to SP    
-- =============================================  
ALTER  PROCEDURE [dbo].[usp_FP_FinalPacking_Save_MSBC]    
 -- Add the parameters for the stored procedure here    
 (    
  @LocationId int,    
  @WorkStationNumber nvarchar(25),    
  @PrinterName nvarchar(30),    
  @PackDate datetime,    
  @OuterLotNo nvarchar(15),    
  @InternalLotNumber nvarchar(15),    
  @PONumber nvarchar(20),    
  @ItemNumber nvarchar(40),    
  @Size nvarchar(10),    
  @GroupId int,    
  --@SerialNumber numeric(15,0),    
  @BoxesPacked int,    
  @PalletId nvarchar(8),    
  @CasesPacked int,    
  @PreShipmentPalletId nvarchar(8) = null,     
  @PreshipmentCasesPacked int,    
  @OperatorId int = null,    
  @InnerSetLayout nvarchar(30),    
  @OuterSetLayout nvarchar(30),    
  @palletCapacity int,    
  @TotalPcs int,    
  --@isTempPack Bit,    
  @strXML nvarchar(max) = null,    
  @ManufacturingDate datetime,    
  @ExpiryDate datetime,    
  @stationNumber int = null,    
  @InventTransId nvarchar(25) = null,    
  @FPStationNo nvarchar(5) = null,  
  @FGBatchOrderNo nvarchar(20),  
  @Resource nvarchar(20)      
 )    
AS    
BEGIN    
BEGIN TRANSACTION;    
BEGIN TRY    
    
DECLARE @rowsCount int    
DECLARE @PalletCases int    
DECLARE @prePalletCases int    
DECLARE @intRunningNumber int    
DECLARE @idoc int    
    
IF(@PreShipmentPalletId = '')     SET @PreShipmentPalletId = NULL;  
  
 INSERT INTO dbo.FinalPacking     
 (    
 LocationId,WorkStationId,PrinterName,PackDate,OuterLotNo,InternalLotNumber,PONumber,ItemNumber,    
 Size,QCGroupId,BoxesPacked,PalletId,CasesPacked,PreShipmentPalletId,PreshipmentCasesPacked,    
 OperatorId,LastModifiedOn,InnersetLayout,OutersetLayout,ManufacturingDate,ExpiryDate,InventTransId, FPStationNo,FGBatchOrderNo,Resource)    
 VALUES (@LocationId,@WorkStationNumber,@PrinterName,@PackDate,@OuterLotNo,@InternalLotNumber,@PONumber,    
 @ItemNumber,@Size,@GroupId,@BoxesPacked,@PalletId,@CasesPacked,@PreShipmentPalletId,@PreshipmentCasesPacked,    
 @OperatorId,SYSDATETIME(),@InnerSetLayout,@OuterSetLayout, @ManufacturingDate,@ExpiryDate,@InventTransId, @FPStationNo,@FGBatchOrderNo,@Resource)    
    
 IF @strXML is not null    
  BEGIN    
   EXEC sp_xml_preparedocument @idoc OUTPUT, @strXML    
    
   INSERT INTO FinalPackingBatchInfo (SerialNumber,    
   BoxesPacked,    
   CasesPacked,    
   PreshipmentCasesPacked,    
   InternalLotNumber)    
   SELECT  SerialNumber, BoxesPacked, CasesPacked, PreshipmentCasesPacked, @InternalLotNumber as InternalLotNumber    
   FROM OPENXML(@idoc, '/ArrayOfFinalPackingBatchInfoDTO/FinalPackingBatchInfoDTO')    
   WITH (SerialNumber numeric(10,0)    
     ,BoxesPacked int    
     ,CasesPacked int    
     ,PreshipmentCasesPacked int    
     ,PalletId nvarchar(8)    
     ,PreshipmentPalletId nvarchar(8)    
     )    
     EXEC sp_xml_removedocument @idoc    
  END     
         
  IF(@stationNumber is not null)    
  BEGIN    
   SELECT @intRunningNumber = isnull(LastRunningLotNumber,0)+1 from WorkstationRunningNumber where WorkStationId = @stationNumber    
   EXEC usp_FP_WorkStationNumber_Update @stationNumber, @intRunningNumber    
  END    
  Else    
  BEGIN    
   SELECT @intRunningNumber = isnull(LastRunningLotNumber,0)+1 from WorkstationRunningNumber where WorkStationId = @WorkStationNumber         
   EXEC usp_FP_WorkStationNumber_Update @WorkStationNumber, @intRunningNumber    
  END    
    
  --update batch capacity    
  EXEC usp_FP_BatchPackedPcs_Update_MSBC @strXML    
    
  -- Update PurchaseOrderItemCases table with pallet id and internalalLot Number     
  UPDATE dbo.PurchaseOrderItemCases     
  SET  InternalotNumber = @internallotnumber    
  WHERE casenumber in ( select top (@CasesPacked) CaseNumber from PurchaseOrderItemCases      
  where PONumber = @PONumber and ItemNumber = @ItemNumber and Size = @Size and internalotnumber is null order by CaseNumber )    
  and PONumber = @PONumber and ItemNumber = @ItemNumber and Size = @Size    
    
END TRY    
BEGIN CATCH    
    SELECT     
        ERROR_NUMBER() AS ErrorNumber    
        ,ERROR_SEVERITY() AS ErrorSeverity    
        ,ERROR_STATE() AS ErrorState    
        ,ERROR_PROCEDURE() AS ErrorProcedure    
        ,ERROR_LINE() AS ErrorLine    
        ,ERROR_MESSAGE() AS ErrorMessage;    
    IF @@TRANCOUNT > 0    
        ROLLBACK TRANSACTION;    
  throw;    
END CATCH;    
    
IF @@TRANCOUNT > 0    
  COMMIT TRANSACTION;    
    
END
GO
PRINT N'Altering Procedure [dbo].[usp_FP_FinalPacking_SaveSecondGrade]...';


GO
  
  
-- =============================================  
-- Author:  <srikanth Balda>  
-- Create date: <1 Oct 2014>  
-- Description: <Save Second Grade>  
-- =============================================  
  
-- Author:  <Kamil>  
-- Create date: <17 July 2019>  
-- Description: <Increase length @InnerSetLayout and @OuterSetLayout. Add nolock>  
  
-- 2019-09-12 Azman Kasim  Add FPStationNo to SP    
  
-- =============================================  
  
ALTER PROCEDURE [dbo].[usp_FP_FinalPacking_SaveSecondGrade]    
 (    
  @LocationId int,    
  @WorkStationNumber nvarchar(25),    
  @PrinterName nvarchar(30),    
  @PackDate datetime,    
  @OuterLotNo nvarchar(15),    
  @InternalLotNumber nvarchar(15),    
  @PONumber nvarchar(20),    
  @ItemNumber nvarchar(40),    
  @Size nvarchar(10),    
  @GroupId int,    
  @BoxesPacked int,      
  @CasesPacked int,      
  @OperatorId int = null,    
  @InnerSetLayout nvarchar(30),    
  @OuterSetLayout nvarchar(30),    
  @stationNumber int = null,    
  @ManufacturingDate datetime,    
  @ExpiryDate datetime,    
  @SerialNumber nvarchar(max),    
  @InventTransId nvarchar(25),    
  @FPStationNo nvarchar(5) = null,  
  @FGBatchOrderNo nvarchar(20),  
  @Resource nvarchar(20)      
 )    
AS    
BEGIN    
BEGIN TRANSACTION;    
 BEGIN TRY    
 -- SET NOCOUNT ON added to prevent extra result sets from    
 -- interfering with SELECT statements.    
     
 INSERT INTO dbo.FinalPacking     
 (    
  LocationId,WorkStationId,PrinterName,PackDate,OuterLotNo,InternalLotNumber,PONumber,ItemNumber,    
  Size,QCGroupId,BoxesPacked,CasesPacked,    
  OperatorId,LastModifiedOn,InnersetLayout,OutersetLayout, manufacturingdate, expirydate,InventTransId, FPStationNo,FGBatchOrderNo,Resource     
 )    
 VALUES     
 (    
  @LocationId,@WorkStationNumber,@PrinterName,@PackDate,@OuterLotNo,@InternalLotNumber,@PONumber,    
  @ItemNumber,@Size,@GroupId,@BoxesPacked,@CasesPacked,    
  @OperatorId,SYSDATETIME(),@InnerSetLayout,@OuterSetLayout,@ManufacturingDate,@ExpiryDate,@InventTransId, @FPStationNo,@FGBatchOrderNo,@Resource    
 )    
    
 DECLARE @intRunningNumber int    
 IF(@stationNumber is not null)    
 BEGIN    
  SELECT @intRunningNumber = isnull(LastRunningLotNumber,0)+1 from WorkstationRunningNumber where WorkStationId = @stationNumber    
  EXEC usp_FP_WorkStationNumber_Update @stationNumber, @intRunningNumber    
 End    
 Else    
 BEGIN    
  SELECT @intRunningNumber = LastRunningLotNumber from WorkstationRunningNumber where WorkStationId = @WorkStationNumber    
  SET @intRunningNumber = @intRunningNumber+1    
  EXEC usp_FP_WorkStationNumber_Update @WorkStationNumber, @intRunningNumber    
 END    
  -- Update PurchaseOrderItemCases table with pallet id and internalalLot Number     
  UPDATE dbo.PurchaseOrderItemCases     
  SET  InternalotNumber = @internallotnumber    
  WHERE casenumber in ( select top (@CasesPacked) CaseNumber from PurchaseOrderItemCases      
  WHERE PONumber = @PONumber and ItemNumber = @ItemNumber and Size = @Size and internalotnumber is null order by CaseNumber )    
  and PONumber = @PONumber and ItemNumber = @ItemNumber and Size = @Size    
    
 ----- Update isPackingDone in SecondGradesticker    
 UPDATE SecondGradeSticker SET ispacked = 1, internallotnumber = @InternalLotNumber WHERE serialnumber in (SELECT * FROM ufn_CSVToTable(@SerialNumber))    
    
END TRY    
 BEGIN CATCH    
  SELECT     
   ERROR_NUMBER() AS ErrorNumber    
   ,ERROR_SEVERITY() AS ErrorSeverity    
   ,ERROR_STATE() AS ErrorState    
   ,ERROR_PROCEDURE() AS ErrorProcedure    
   ,ERROR_LINE() AS ErrorLine    
   ,ERROR_MESSAGE() AS ErrorMessage;    
  IF @@TRANCOUNT > 0    
   ROLLBACK TRANSACTION;    
   throw;    
 END CATCH;    
    
IF @@TRANCOUNT > 0    
  COMMIT TRANSACTION;    
END
GO
PRINT N'Altering Procedure [dbo].[USP_FP_Get_ChangeBatchCardDetails]...';


GO
  
  
-- ========================================================================================  
-- Name:   USP_FP_Get_ChangeBatchCardDetails  
-- Purpose:   get the change batch card data data for posting to AX.
-- 2021-12-10: HSB SIT Issue: merged GloveType from NGC
-- ========================================================================================  
ALTER PROCEDURE [dbo].[USP_FP_Get_ChangeBatchCardDetails]  
(  
       @internalLotnumber nvarchar(15)  
)  
AS  
BEGIN  
 SET NOCOUNT ON;  
      
 select Top(1)  
fcb.OldSerialNumber,fcb.NewSerialNumber,POI.CustomerSize,fp.PONumber,b.BatchCardDate,b.BatchNumber,lm.LocationName, fp.BoxesPacked*poi.InnerBoxCapacity as 'TotalPieces'  
 ,b.GloveType as ItemNumber  --HSB SIT Issue: merged GloveType from NGC
 from FPChangeBatchCard fcb  
 INNER JOIN finalpacking fp on fp.InternalLotNumber = fcb.InternalLotNumber  
 INNER JOIN PurchaseOrderItem poi  on poi.PONumber = fp.PONumber and POi.ItemNumber = FP.ItemNumber and POi.ItemSize = FP.Size    
 INNER JOIN Batch b on b.SerialNumber = fp.SerialNumber  
 INNER JOIN LocationMaster lm on lm.LocationId = fcb.LocationId  
where fcb.InternalLotNumber = @internalLotnumber order by fcb.LastModifiedOn desc  
    SET NOCOUNT OFF;  
END
GO
PRINT N'Altering Procedure [dbo].[USP_FP_Get_SecondGradeforPosting]...';


GO
-- ========================================================================================  
-- Name:   [USP_FP_Get_SecondGradeforPosting]  
-- Purpose:   get the Second Grade inner and outer data for posting to AX.  
-- ========================================================================================  
ALTER PROCEDURE [dbo].[USP_FP_Get_SecondGradeforPosting]  
(  
       @internalLotnumber nvarchar(15)  
)  
AS  
BEGIN  
 SET NOCOUNT ON;  
      
 select   
FP.internalLotnumber , FP.OuterLotNo, FP.PONumber, FP.itemnumber,FP.PackDate,FP.CasesPacked,FP.PreshipmentCasesPacked,  
FP.manufacturingdate,FP.ExpiryDate,  
POIN.customersize,POIN.ordernumber,POIN.CustomerLotNumber,POIN.CustomerReferenceNumber, bo.BthOrderId AS BatchOrder, r.Resource  
 from finalpacking FP WITH(nolock)  
 join purchaseorderitem POIN WITH(NOLOCK) ON POIN.ponumber = FP.ponumber and POIN.Itemnumber = FP.itemnumber and FP.Size = POIN.ItemSize   
 join DOT_FloorD365BO bo WITH(NOLOCK) ON bo.batchid = POIN.CustomerReferenceNumber and bo.size = fp.Size and bo.ItemId = fp.ItemNumber   
 join DOT_FloorD365BOResource r  WITH (NOLOCK) on r.BatchOrderId = bo.BthOrderId  
 where FP.internallotnumber = @internalLotnumber and bo.ProdStatus = 'StartedUp' and bo.IsDeleted = 0 and r.IsDeleted = 0  
    SET NOCOUNT OFF;  
END
GO
PRINT N'Altering Procedure [dbo].[usp_FP_GetPalletDetailsByPalletId]...';


GO

ALTER PROCEDURE [dbo].[usp_FP_GetPalletDetailsByPalletId]  
-- Add the parameters for the stored procedure here  
 @palletid nvarchar(10)  
AS  
BEGIN  
  
SELECT PM.PoNumber,PM.ItemNumber,PM.ItemSize,PM.IsPreshipment,LM.LocationName,PM.LocationId,PO.CustomerReferenceNumber From PalletMaster PM  
LEFT JOIN LocationMaster LM on LM.LocationId=PM.LocationId  
LEFT JOIN PurchaseOrderItem PO on PM.PoNumber=PO.PoNumber  
 where PalletId=@palletid  
  and not exists (select 1 from DOT_FloorD365BO FGBO with(nolock) where FGBO.BthOrderId like '%'+ pm.PONumber +'%' and FGBO.WarehouseId='MTS-FG') -- filter out MTS pallet by FGBO warehouse
END
GO
PRINT N'Altering Procedure [dbo].[usp_FP_PreshipmetPalletID_get]...';


GO
  
-- =============================================  
-- Author:  Srikanth Balda  
-- Create date: 26 Aug 2014  
-- Description: List of availabel preshipment Palletid  
-- =============================================  
ALTER PROCEDURE [dbo].[usp_FP_PreshipmetPalletID_get]   
(  
 @locationid int  
)   
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
-- Insert statements for procedure here  
select PalletId, IsPreshipment  from [dbo].[PalletMaster] where IsAvailable = 1 and  IsPreshipment = 1 and IsOccupied = 0   
and IsDeleted = 0 -- HSB SIT Issue# 90: Final packing screen > Preshipment pallet id allows to choose soft deleted pallets in database.
and   
(  
Zone is null  
or   
--LocationId=@locationid  
  
 Zone=(Select ZoneName from LocationMaster where locationid=@locationid)  
)  
  
END
GO
PRINT N'Altering Procedure [dbo].[usp_FP_PurchaseOrder_Get]...';


GO
    
-- =============================================    
-- Author: Srikanth Balda    
-- Create date: 4/5/2014    
-- Description: Get Active SOLine Data    
    
-- Author: Pang Yik Siu    
-- Modified date: JAN 2018    
-- Description: Add two columns: InnerLabelSetDateFormat, OuterLabelSetDateFormat    
    
-- Author: Pang Yik Siu    
-- Modified date: Mar 2020      
-- Description: Modify CustomerSize from Configuration to [CustomerSize]      
      
-- Author: Pang Yik Siu      
-- Modified date: 12 Jun 2020      
-- Description: Added 1 column BARCODE for FP VIsion project      
-- =============================================      
      
ALTER PROCEDURE [dbo].[usp_FP_PurchaseOrder_Get]       
 -- Add the parameters for the stored procedure here       
 @PONumber nvarchar(20),   
 @ItemType INT
AS      
BEGIN       
 SET NOCOUNT ON;      
 select SalesId  as PONumber,INVENTTRANSID,      
 PurchOrderFormNum as OrderNumber,      
 InnerVerification as BarcodeVerificationRequired,      
 --CustomerSpecification,      
 PreshipmentSamplingPlan as PreshipmentPlan,      
 a.ItemId as ItemNumber,      
 ItemName as ItemName,      
 ItemType,      
 SalesQty as ItemCases,      
 SalesName as CustomerName,      
 a.InnerLabelSet as InnersetLayout,      
 a.OuterLabelSet as OuterSetLayout,      
 --Configuration as CustomerSize, // Change to VW_AXSOline.CustomerSize      
 a.CustomerSize as CustomerSize,      
 --ConfigurationName as CUstomerSizeDesc, change on 26 Nov 2018      
 a.PrintingSize as CUstomerSizeDesc, -- for outer label printing, 26 Nov 2018 Max He       
 a.GrossWeight,      
 a.NetWeight as NettWeight,      
 NumberInnerBoxInOuter as CaseCapacity,       
 a.PalletCapacity,      
 CustomerLotId as CustomerLotNumber ,      
 Customerref as CustomerReferenceNumber,      
 GloveCode as GloveCode,      
 bo.BthOrderId as BatchOrder,      
 bo.ProdStatus,      
 ManufacturingDateBasis,      
 SalesStatus as POStatus,      
 a.HartalegaCommonSize as ItemSize ,      
 NumberGlovesInnerbox as InnerBoxCapacity,      
 a.InnerProductCode as InnerProductCode,      
 a.OuterProductCode as OuterProductCode,      
 a.Expiry,      
 --BrandName       
 a.Reference1  as ProductReferenceNumber,      
 a.Reference2 ,      
 OuterVerification as GCLabelPrintingRequired,      
 a.AlternateGloveCode1,      
 a.AlternateGloveCode2,      
 a.AlternateGloveCode3,      
 a.SpecialInnerCode,      
 SpecialInnerCodeCharacter,      
 ShippingDateRequested,      
 ReceiptDateRequested,      
 -- Label set Optimization project      
 a.InnerDateFormat as InnerLabelSetDateFormat,      
 a.OuterDateFormat as OuterLabelSetDateFormat,      
 HSB_CustPODocumentDate,      
 HSB_CustPORecvDate,      
 BARCODE,      
 BARCODEOUTERBOX,      
 VisionURL      
 FROM VW_AXSOline as a      
 JOIN DOT_FloorD365BO bo WITH (NOLOCK) on bo.BatchId = CustomerRef and CONFIGURATION = bo.Size and bo.ProdStatus = 'StartedUp' and a.ItemId = bo.ItemId      
 LEFT JOIN (SELECT ItemId, HartalegaCommonSize, VisionURL FROM DOT_FSBrandLines WITH(nolock) WHERE IsDeleted = 0) bl       
  ON  bl.ItemId = a.ItemId and bl.HartalegaCommonSize = a.[CONFIGURATION]      
 WHERE salesId = @ponumber AND a.ItemType = @ItemType and bo.IsDeleted = 0      
 --where PreshipmentPlan is not null and PalletCapacity is not null and ManufacturingOrder = 1 and Postatus = 0      
  
 /*  
 --***** start original SP *****  
 select SalesId  as PONumber,INVENTTRANSID,    
PurchOrderFormNum as OrderNumber,    
INNERVERIFICATION as BarcodeVerificationRequired,    
--CustomerSpecification,    
PRESHIPMENTSAMPLINGPLAN as PreshipmentPlan,    
ItemId as ItemNumber,    
ITEMNAME as ItemName,    
ITEMTYPE,    
SalesQty as ItemCases,    
SalesName as CustomerName,    
INNERLABELSET as InnersetLayout,    
OUTERLABELSET as OuterSetLayout,    
CONFIGURATION as CustomerSize,    
CONFIGURATIONNAME as CUstomerSizeDesc,    
GrossWeight,    
NETWEIGHT as NettWeight,    
NUMBERINNERBOXINOUTER as CaseCapacity,     
PalletCapacity,    
CUSTOMERLOTID as CustomerLotNumber ,    
Customerref as CustomerReferenceNumber,    
GloveCode as GloveCode,    
MANUFACTURINGDATEBASIS,    
SALESSTATUS as POStatus,    
HartalegaCommonSize as ItemSize ,    
NUMBERGLOVESINNERBOX as InnerBoxCapacity,    
INNERPRODUCTCODE as InnerProductCode,    
OUTERPRODUCTCODE as OuterProductCode,    
Expiry,    
--BrandName     
REFERENCE1  as ProductReferenceNumber,REFERENCE2 ,    
OUTERVERIFICATION as GCLabelPrintingRequired,    
AlternateGloveCode1,    
AlternateGloveCode2,    
AlternateGloveCode3,    
SPECIALINNERCODE,    
SPECIALINNERCODECHARACTER,    
SHIPPINGDATEREQUESTED,    
RECEIPTDATEREQUESTED,    
STShippingDateConfirmed,    
ManufacturingDateETD,    
-- Label set Optimization project    
INNERLABELSETDATEFORMAT as InnerLabelSetDateFormat,    
OUTERLABELSETDATEFORMAT as OuterLabelSetDateFormat,    
-- HSB_CustPODocumentDate and HSB_CustPORecvDate (29Jan2019)    
HSB_CustPODocumentDate as HSB_CustPODocumentDate,    
HSB_CustPORecvDate as HSB_CustPORecvDate    
FROM VW_AXSOline WHERE salesId = @ponumber AND ItemType = @ItemType    
  
*/     
  
END
GO
PRINT N'Altering Procedure [dbo].[usp_FP_SELECT_FirstGradePOList]...';


GO
-- =============================================  
-- Author:  Srikanth Balda  
-- Create date: 20 Sep 2014  
-- Description: Get Active First Grade PO list  
-- 07/05/2018  Azrul Amin    SP altered.    
-- =====================================================================    
--IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_FP_SELECT_FirstGradePOList]') AND type in (N'P', N'PC'))  
--DROP PROCEDURE [dbo].[usp_FP_SELECT_FirstGradePOList]  
--GO  
ALTER PROCEDURE [dbo].[usp_FP_SELECT_FirstGradePOList]  
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
    -- Insert statements for procedure here  
  SELECT SalesId, ItemType, CustomerRef, ProdStatus  
  FROM VW_AXSOline with(nolock)   
  WHERE   
  itemtype = 5 -- =FG  
  AND PreshipmentSamplingPlan in ('1','2','3','4','5','6')  
  AND PalletCapacity > 0  
  GROUP By salesid, ItemType, CustomerRef, ProdStatus  
END  
  
--original sp  
    -- Insert statements for procedure here  
 --select A.SalesId,A.ItemType,A.customerref  from VW_AXSOline A with(nolock)   
 --INNER JOIN SalesTable st with(nolock) ON A.SalesId = st.SalesId  
 --where itemtype = 5 and PRESHIPMENTSAMPLINGPLAN in ('1','2','3','4','5','6') and PalletCapacity > 0  
 --and A.WorkOrderStatus = 2 -- to get Active and Approved SO  
 --AND st.WorkOrderType NOT IN ('3') -- exclude Actual MTS  
GO
PRINT N'Altering Procedure [dbo].[usp_FP_SELECT_SecondGradePOList]...';


GO
    
-- =============================================    
-- Author:  Srikanth Balda    
-- Create date: 20 Sep 2014    
-- Description: Get Active First Grade PO list
-- =============================================    
ALTER PROCEDURE [dbo].[usp_FP_SELECT_SecondGradePOList]    
 @Location nvarchar(20)    
AS    
BEGIN    
 -- SET NOCOUNT ON added to prevent extra result sets from    
 -- interfering with SELECT statements.    
 SET NOCOUNT ON;    
    -- Insert statements for procedure here    
 select SalesId,ItemType,customerref from VW_AXSOline with(nolock)     
 -- filter based on PlantNo. #Max    
 join DOT_FloorD365BO bo WITH (NOLOCK) on bo.BatchId = CustomerRef and CONFIGURATION = bo.Size and bo.ProdStatus = 'StartedUp'    
 left join DOT_FloorD365BOResource res with (nolock) on res.BatchOrderId = bo.BthOrderId    
 where itemtype = 6 and dbo.UDF_DOT_GetPlantfromResourceGrp(res.Resource) like @Location + '%'  -- Max He,23/07/2021, cater BO resource,plant no more than 2 length  
 /**    
 select SalesId,ItemType,customerref from VW_AXSOline with(nolock) where itemtype = 'FG2'    
 **/    
END
GO
PRINT N'Altering Procedure [dbo].[USP_GET_BATCHSEQUENCE]...';


GO
  
-- =======================================================  
-- Name:             USP_GET_BATCHSEQUENCE  
-- Purpose:          Save Data of AX Posting  
-- =======================================================  
-- Change History  
-- Date       Author     Comments  
-- -----      ------     -----------------------------  
-- 04/09/2014			NarendraNath    SP created.  
-- 22/09/2014 Ruhi		SP Modified to generate batch sequence taking  
--                          only successful postings into account.  
-- 10/02/2018 Max He  include the time out exception code.  
-- 15/09/2021 Azrul   Open batch flag for NGC1.5  
-- -------------------------------------------------------
-- exec USP_GET_BATCHSEQUENCE 2200897670, 'P4'
-- =======================================================  
ALTER PROCEDURE [dbo].[USP_GET_BATCHSEQUENCE]  
(  
 @SerialNumber numeric(15, 0),
 @PlantNo NVARCHAR(20)
)  
AS  
BEGIN  

DECLARE @Sequence INT
DECLARE @IsConsolidated BIT

SELECT @Sequence = COUNT(SerialNumber) +1 FROM dbo.AXPostingLog with (nolock) WHERE SerialNumber=@SerialNumber  
--and (exceptioncode is null or exceptioncode='999') -- #MH  

IF @Sequence = 1
BEGIN
	IF EXISTS (SELECT * FROM DOT_LocationConsoleMaster with (NOLOCK) WHERE LocationName = @PlantNo AND IsConsole = 1)
	BEGIN
		SET @IsConsolidated = 1
	END
	ELSE
	BEGIN
		SET @IsConsolidated = 0
	END
END
ELSE
BEGIN
	IF (SELECT COUNT(1) FROM AXPostingLog with (NOLOCK) WHERE SerialNumber = @SerialNumber AND IsConsolidated = 1) > 0
	BEGIN
		SET @IsConsolidated = 1
	END
	ELSE
	BEGIN
		SET @IsConsolidated = 0
	END
END

SELECT @Sequence AS 'BatchSequence', @IsConsolidated AS 'IsConsolidated' 
  
END
GO
PRINT N'Altering Procedure [dbo].[USP_GET_BatchStatusPosting]...';


GO
-- ========================================================================================
-- Name:			[USP_GET_BatchStatusPosting]
-- Purpose: 		<Get the Batch Type>
-- ========================================================================================
-- Change History
-- Date               Author                     Comments
-- -----   ------   -----------------------------------------------------------------------
-- <4 August,2014> 	<Amrinder Singh>	         SP created.
-- 28/12/0218		 Max						add nolock.

ALTER PROCEDURE [dbo].[USP_GET_BatchStatusPosting]
 @serialNo  NUMERIC(10)
AS

BEGIN

	SELECT BatchType FROM Batch with(nolock) WHERE SerialNumber = @serialNo
END
GO
PRINT N'Altering Procedure [dbo].[USP_GET_CompleteBatchDetails]...';


GO
-- =======================================================
-- Name:             USP_GET_CompleteBatchDetails
-- Purpose:          Get complete batch details by serial number
-- =======================================================
-- Change History
-- Date         Author     Comments
-- -----        ------     -----------------------------
-- 04/05/0218		 Azrul			 SP altered.
-- 28/12/0218		 Max			 add nolock.
-- ======================================================= 
--IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_GET_CompleteBatchDetails]') AND type in (N'P', N'PC'))
--DROP PROCEDURE [dbo].[USP_GET_CompleteBatchDetails]
--GO
ALTER PROCEDURE [dbo].[USP_GET_CompleteBatchDetails]
(
	@serialNo decimal
)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT b.*,l.locationname,s.name AS 'ShiftName','PN' as Area, 
	 DATEADD(DAY,1,b.BatchCardDate) as DeliveryDate, (SELECT RouteCategory from DOT_FSQCTypeTable with(nolock) where QCType = b.QCType) as RouteCategory,
	 (SELECT RouteCategory from DOT_FSQCTypeTable with(nolock) where QCType = b.QCType) as [Pool], GETDATE()+1 as DeliveryDate
	FROM Batch b with(nolock) 
	JOIN locationmaster l with(nolock) ON b.LocationId=l.LocationId
	JOIN shiftmaster s with(nolock) ON b.ShiftId= s.ShiftId
	WHERE SerialNumber=@serialNo
END
GO
PRINT N'Altering Procedure [dbo].[USP_GET_CompletePTDetails]...';


GO
--=================================
-- Name:             USP_GET_CompletePTDetails
-- Purpose:          Get Post Treatment Details
-- =======================================================
-- Change History
-- Date         Author     Comments
-- -----        ------     -----------------------------
-- 09/09/2014        Ruhi    SP created.
-- 15/09/2015	Ruhi		Batch Type added in select - TOTT#505
-- 29/10/2015	Ruhi		Value of TotalPcs changed - TOTT#550
-- 18/06/2018	Max			Get RouteCategory and Pool info from QC Type
-- 28/12/0218	Max			add nolock.
-- 18/06/2019	Azrul		fixed Transfer with 0 qty.
-- =======================================================
ALTER PROCEDURE [dbo].[USP_GET_CompletePTDetails]
(
	@serialNo decimal
)
AS
BEGIN
	SET NOCOUNT ON;

	Declare @TotalPcs		INT
	--DECLARE @LastArea		NVARCHAR(10)

	--Select Top(1) @LastArea = Area from AXPostingLog with(nolock) where SerialNumber = @serialNo  AND LEN(ISNULL(ExceptionCode,'')) = 0
	--						  AND ServiceName NOT LIKE '%del%' --filter out deleted record by manual 
	--						  order by Id desc

	--Select @TotalPcs = Case when @LastArea = 'PN' then TotalPcs 
	--				        when @LastArea = 'QC' THEN CONVERT(int,ROUND(qcBatchWeight / qcTenPcsWeight * 10000, 0))
	--						WHEN @LastArea = 'PS' THEN Totalpcs - isnull(PackedPcs,0) --include PS for scenario SPBC after CBCI
	--						WHEN LEN(ISNULL(@LastArea,'')) = 0 THEN TotalPcs
	--				   end 
	--From Batch with(nolock) where SerialNumber = @serialNo

	SELECT TOP(1) @TotalPcs = BalancePcs FROM dbo.ufn_GetBatchSummaryTable(@serialNo) ORDER BY ProcessDate DESC 
	
	IF EXISTS(SELECT * FROM PTScanBatchCard with(nolock) WHERE SerialNumber = @serialNo)
	BEGIN
		SELECT top (1) b.SerialNumber, b.BatchNumber, pt.BatchWeight,sm.Name,b.Size,pt.TenPcsWeight,b.QCType,b.LineId,
		b.BatchCardDate,@TotalPcs AS TotalPcs,b.GloveType,
		'PT' AS Area, lm.LocationName,b.BatchType, GETDATE()+1 as DeliveryDate,
		(SELECT RouteCategory from DOT_FSQCTypeTable with(nolock) where QCType = b.QCType) as RouteCategory,
		(SELECT RouteCategory from DOT_FSQCTypeTable with(nolock) where QCType = b.QCType) as [Pool]
		FROM Batch b with(nolock)
		LEFT JOIN PTScanBatchCard pt with(nolock) ON pt.serialnumber = b.serialnumber
		LEFT JOIN shiftmaster sm with(nolock) ON sm.shiftid = pt.shiftid
		LEFT JOIN locationmaster lm with(nolock) ON lm.LocationId = pt.LocationId
		WHERE pt.SerialNumber = @serialNo ORDER BY pt.LastModifiedOn DESC
	END
	ELSE
	BEGIN
		SELECT b.SerialNumber, b.BatchNumber, b.BatchWeight,sm.Name, b.Size, b.TenPcsWeight,b.QCType,b.LineId,
		b.BatchCardDate, CONVERT(int,ROUND(b.BatchWeight / b.TenPcsWeight * 10000, 0)) AS TotalPcs,b.GloveType,
		'PT' AS Area, lm.LocationName,b.BatchType, GETDATE()+1 as DeliveryDate,
		(SELECT RouteCategory from DOT_FSQCTypeTable with(nolock) where QCType = b.QCType) as RouteCategory,
		(SELECT RouteCategory from DOT_FSQCTypeTable with(nolock) where QCType = b.QCType) as [Pool]
		FROM Batch b with(nolock)
		LEFT JOIN shiftmaster sm with(nolock) ON sm.shiftid = b.shiftid
		LEFT JOIN locationmaster lm with(nolock) ON lm.LocationId = b.LocationId
		WHERE b.SerialNumber = @serialNo 
	END
	SET NOCOUNT OFF;
END
GO
PRINT N'Altering Procedure [dbo].[USP_GET_CompleteQCYPDetails]...';


GO

-- =======================================================
-- Name:             USP_GET_CompleteQCYPDetails
-- Purpose:          Get QC Yield & Packing Details
-- =======================================================
-- Change History
-- Date         Author     Comments
-- -----        ------     -----------------------------
-- 08/09/2014        Ruhi    SP created.
-- 16/11/2016	Max He		2nd Grade Improvement,FDD:HLTG-REM-003
-- 22/12/2016   Max He		MH#2.n Fix re-scan innerbox double up issue
-- 15/08/2018   Azrul		Accumulate WT sample quantity after QCQI more than 1 times 
-- 29/12/2018   Max He		MH#4.n Fix shift id different, Simpale Qty not accumulate corrrectly
-- 10/01/2019   Azrul		Split Batch handling to accumulate TotalPcs
-- 11/01/2019   Azrul		Cater more than 1 SOBC and Rework
-- 12/01/2019   Max			Get those QAI records not been post to staging
-- 24/03/2019   Max		    fine tune mulitiple SOBC
-- =======================================================
ALTER PROCEDURE [dbo].[USP_GET_CompleteQCYPDetails]
(
	@serialNo decimal
)
AS
BEGIN
	SET NOCOUNT ON;
    DECLARE @TenPcsWeight		DECIMAL(18,3)
	DECLARE @SOBCCount INT = (Select min(SOBCCount)from QCYieldAndPacking WITH(NOLOCK) 
							  where serialnumber = @serialNo )				
	DECLARE @ReworkCount INT = (Select MAX(ReworkCount)from QCYieldAndPacking WITH(NOLOCK) 
								where serialnumber = @serialNo )	
	SELECT @TenPcsWeight = case when PTTenPCsWeight is null then TenPcsWeight
							else PTTenPCsWeight end
		FROM Batch WITH(NOLOCK)
		WHERE SerialNumber = @serialNo

	SELECT TOP(1) TotalPcsInfo.TotalPcs,													--#Azrul
	summaryInfo.BatchWeight,																--#Azrul
	qcyp.RejectedSample,																	--MH#2.n
	summaryInfo.SerialNumber,																--#Azrul
	summaryInfo.BatchNumber,																--#Azrul
	summaryInfo.Name,																		--#Azrul
	summaryInfo.Size,																		--#Azrul
	CASE WHEN dbo.GetQctypeDesc(summaryInfo.QCType) = 'STRAIGHT PACK' 
	THEN qcyp.QCType ELSE summaryInfo.QCType END AS QCType,									--#Azrul
	summaryInfo.GloveType,																	--#Azrul
	summaryInfo.Area,																		--#Azrul
	summaryInfo.LocationName,																--#Azrul
	summaryInfo.BatchCardDate,																--#Azrul
	summaryInfo.TenPcsWeight,																--#Azrul
	summaryInfo.linenumber,																	--#Azrul
	summaryInfo.LooseQty,																	--#Azrul
	summaryInfo.RejectionQty,																--#Azrul
	summaryInfo.SecondGradeQty,																--#Azrul
	summaryInfo.CalculatedLooseQty,															--#Azrul
	summaryInfo.RAFWTSample,																--#Azrul
	summaryInfo.BatchType																	--#Azrul
	from qcyieldandpacking qcyp WITH(NOLOCK)												--MH#2.n
	join (																					--MH#2.n
		select qcyp.SerialNumber, b.BatchNumber,
			  --sum(qcyp.totalWeight) as BatchWeight,										--MH#3.n
			  b.BatchWeight,																--#AZRUL
			   max(sm.Name) as Name,b.Size, b.QCType,										--MH#4.n
			  --sum(qcyp.InnerBoxCount*qcyp.PackingSize) as TotalPcs,						--MH#3.n
			   b.GloveType,'QC' as Area,lm.LocationName,
			   b.BatchCardDate,@TenPcsWeight as TenPcsWeight ,b.LineId as linenumber,
			   sum(qcyp.LooseQty) as LooseQty, 
			   sum(qcyp.RejectionQty) as RejectionQty,
			   --sum(qcyp.RejectedSample) as RejectedSample,								--MH#3.n
			   sum(qcyp.SecondGradeQty) as SecondGradeQty,
			   sum(qcyp.CalculatedLooseQty) as CalculatedLooseQty, 
			   sum(qcyp.WTSamplingSize) as RAFWTSample, 									--#AZRUL
			   b.BatchType
			from qcyieldandpacking qcyp WITH(NOLOCK)
			inner join batch b WITH(NOLOCK)
			on b.serialnumber = qcyp.serialnumber
			inner join shiftmaster sm WITH(NOLOCK)	
			on sm.shiftid = qcyp.shiftid
			inner join locationmaster lm WITH(NOLOCK)
			on lm.locationid = b.locationid
			where b.serialnumber = @serialNo and qcyp.sobccount=@SOBCCount					--#Max, QAI records not been post to staging default is 0,will increase 1 after QCQI posted
			group by qcyp.SerialNumber, b.BatchNumber,--sm.Name,							--MH#4.n
			b.Size, b.QCType,
			  b.GloveType,lm.Area,lm.LocationName,
			   b.BatchCardDate,b.TenPcsWeight,b.LineId--,qcyp.reworkcount MH#1.n for 2nd grade
			   , b.BatchType,b.BatchWeight													--#AZRUL
		) summaryInfo on summaryInfo.serialnumber = qcyp.serialnumber						--MH#2.n
	join (																					--#AZRUL
			select serialnumber,sum(PackingSize*case when ReworkCount=@ReworkCount then     --#AZRUL
			InnerBoxCount else 0 end) as TotalPcs  											--#AZRUL
			from QCYieldAndPacking where sobccount=@SOBCCount and SerialNumber = @serialNo	--#Max, QAI records not been post to staging default is 0,will increase 1 after QCQI posted
			group by SerialNumber															--#AZRUL
			)TotalPcsInfo on TotalPcsInfo.serialnumber = qcyp.serialnumber					--#AZRUL
	order by qcyp.reworkcount desc															--MH#2.n

END
GO
PRINT N'Altering Procedure [dbo].[USP_GET_LatestTotalPCs]...';


GO
-- =============================================
-- Author:		Loo Kah Heng
-- Create date: 13/06/2019
-- Description:	Get the totalPcs based on serial number
--				- if the PackedPCs is not null, will return TotalPCs - PackedPcs
--				- if the PackedPCs is null, will return TotalPCs only
-- =============================================
ALTER PROCEDURE [dbo].[USP_GET_LatestTotalPCs]
(
	@serialNo decimal
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @PackedPCs AS INT

	SELECT @PackedPCs = PackedPcs FROM Batch (NOLOCK)
	WHERE SerialNumber = @serialNo

	SELECT  CASE 
				WHEN @PackedPCs IS NULL THEN TotalPCs
				ELSE TotalPCs - @PackedPCs
			END as TotalPcs
	FROM Batch (NOLOCK)
	WHERE SerialNumber = @serialNo
END
GO
PRINT N'Altering Procedure [dbo].[USP_GET_PostingStage]...';


GO
-- =======================================================  
-- Name:             USP_GET_PostingStage  
-- Purpose:          Get Posting Stage  
-- =======================================================  
-- Change History  
-- Date         Author     Comments  
-- -----        ------     -----------------------------  
-- 15/09/2014        Ruhi    SP created.  
-- 06/11/2015 Ruhi    TOTT # 505  
-- 06/11/2015 Ruhi     TOTT#550  
-- 28/12/2018 Max add nolock.  
-- 27/02/2019 Azrul Allowed PTQI after QCQI.
-- =======================================================  
ALTER PROCEDURE [dbo].[USP_GET_PostingStage]
(  
 @SerialNumber decimal  
)  
AS  
BEGIN  
 SET NOCOUNT ON;  
	declare @QCLastModDate datetime
	declare @PTLastModDate DATETIME
	select @QCLastModDate=max(LastModifiedOn) from QCYieldAndPacking WITH(NOLOCK) where serialnumber=@serialNumber
	select @PTLastModDate=max(LastModifiedOn) from PTScanBatchCard with(nolock) where serialnumber=@serialNumber
  
IF EXISTS(Select * from Batch with(nolock) where SerialNumber = @SerialNumber  
           and BatchType in ('PWT','QWT','OWT','PSW') )  
     BEGIN  
      IF EXISTS(SELECT * FROM PTScanBatchCard with(nolock) where SerialNumber = @SerialNumber)  
            BEGIN  
      IF NOT EXISTS(SELECT * FROM AXPostingLog with(nolock) where ServiceName in('PWTBCP','PWTBCA','PWTBCQ','PWTBCS')  
          and ExceptionCode is null and SerialNumber = @SerialNumber)  
       BEGIN  
        SELECT 'PTQI'  
       END  
  
      ELSE  
       BEGIN  
        IF EXISTS(SELECT * FROM  QCYieldandPacking with(nolock)   
            WHERE serialNumber = @SerialNumber)  
           BEGIN  
			   -- 1. Cater PT(WT/VT/HBC) -> QC -> Change QC type -> PT -> QC #Max He 20/03/2019
			   Declare @Route NVARCHAR(100)
			   DECLARE @QAIQCType NvarChar(200)
			   SELECT TOP 1 @Route = qctype.RouteCategory,@QAIQCType=q.QCType 
			   FROM QAI q with(nolock) join DOT_FSQCTypeTable qctype with(nolock) on q.QCType=QCType.QCType 
			   WHERE q.QAIScreenName='QAIChangeQCType' and q.LastModifiedDateTime>@QCLastModDate and q.LastModifiedDateTime<@PTLastModDate;

			   IF @Route = 'PT'
			     BEGIN  
					SELECT 'PTQI'  
			     END
			   ELSE
			     BEGIN  
					SELECT 'QCQI'  
				 END
           END  
       END  
      END  
   END  
ELSE  
 BEGIN  
  IF EXISTS(SELECT * FROM  QCYieldandPacking qcyp with(nolock)  
  inner join QAI with(nolock) on qai.SerialNumber = qcyp.SerialNumber  
      WHERE qcyp.serialNumber = @SerialNumber  
      --and 'Pass' = (select top 1 QITestResult from QAI where serialnumber = 2180161890 order by qaidate desc) --#AZ also return QCQI postingStage for failed QC  
      )  
     BEGIN    
	  IF @PTLastModDate > @QCLastModDate
		  BEGIN
			SELECT 'PTQI'
		  END
	  ELSE
		  BEGIN
			SELECT 'QCQI'  
		  END    
	 END
  ELSE IF EXISTS(SELECT * FROM PTScanBatchCard with(nolock)  
      WHERE serialNumber = @SerialNumber)  
    BEGIN  
     SELECT 'PTQI'  
    END  
 END   
  
END
GO
PRINT N'Altering Procedure [dbo].[USP_GET_PTStatus]...';


GO
-- =======================================================================
-- Name:			USP_GET_PTStatus
-- Purpose: 		Get PT status
-- =======================================================================
-- Change History
-- Date         Author     Comments
-- -----        ------     ----------------------------------------------
-- 18/03/2015 	Ruhi	   SP created.
-- 02/04/2015   Ruhi	   SP Modified to include condition for 
--                         watertight batch card.
-- 06/11/2015	Ruhi	   TOTT # 505
-- 24/10/2018	Azrul	   Without PTQI = pass can't proceed to QC scan in
-- =======================================================================
ALTER PROCEDURE [dbo].[USP_GET_PTStatus]
	@SerialNumber		BIGINT
AS
BEGIN	

SET NOCOUNT ON

IF EXISTS (Select * from Batch where SerialNumber = @SerialNumber
           and BatchType in ('PWT','QWT','OWT','PSW'))
		   BEGIN
			IF EXISTS(Select * from PTScanBatchCard pt 
					  JOIN Batch b on b.SerialNumber = pt.SerialNumber
					  where pt.SerialNumber = @SerialNumber)
				BEGIN
				   IF EXISTS(Select * from Batch where SerialNumber = @SerialNumber
				              and QCType = '0006020001')
					   BEGIN
					    IF EXISTS(SELECT * FROM AXPostingLog where ServiceName in('PWTBCP','PWTBCA','PWTBCQ','PWTBCS')
								  and ExceptionCode is null and SerialNumber = @SerialNumber)
							SELECT 'Completed'
						ELSE
							SELECT 'PTQI Incomplete'
					   END
				   ELSE
					SELECT 'Completed'
				END
			ELSE
				SELECT 'PT Incomplete'
		   END
ELSE
	BEGIN
		IF EXISTS(Select * from PTScanBatchCard pt 
							  JOIN Batch b on b.SerialNumber = pt.SerialNumber
							  where pt.SerialNumber = @SerialNumber and QCType = '0006020001')						
			BEGIN
				IF EXISTS(SELECT * FROM AXPostingLog where ServiceName = 'SPBC'
								  and ExceptionCode is null and SerialNumber = @SerialNumber)
						SELECT 'Completed'
				ELSE
						SELECT 'PTQI Incomplete'
			END
		ELSE IF EXISTS(Select * from Batch b JOIN DOT_FSQCTypeTable c on b.QCType=c.QCType
							  where b.SerialNumber = @SerialNumber and c.RouteCategory = 'PT')
			BEGIN
				IF EXISTS(SELECT * FROM AXPostingLog where ServiceName = 'SPBC'
								  and ExceptionCode is null and SerialNumber = @SerialNumber)
						BEGIN
							IF EXISTS(SELECT * FROM AXPostingLog where ServiceName = 'RWKCR'
											  and ExceptionCode is null and SerialNumber = @SerialNumber)
								SELECT 'Completed'
							ELSE
								SELECT 'PTQI Incomplete'
						END
				ELSE
						SELECT 'PTQI Incomplete'
			END
		ELSE
			SELECT 'Completed'
	END
END
GO
PRINT N'Altering Procedure [dbo].[USP_GET_QAIBatchDetails]...';


GO
ALTER PROCEDURE [dbo].[USP_GET_QAIBatchDetails]
(
	@serialNo decimal,
	@QaiId int = 0
)
AS
BEGIN
	SET NOCOUNT ON;
	if @QaiId=0 and @serialNo >0 
		begin
			SELECT * FROM QAI WITH (NOLOCK) WHERE SerialNumber=@serialNo order by QAIId desc
		end
	else
		begin
			SELECT * FROM QAI WITH (NOLOCK) WHERE QAIId=@QaiId
		end
END
GO
PRINT N'Altering Procedure [dbo].[USP_GET_QCStatus]...';


GO

-- =============================================
-- Author:		Arshia Ismail
-- Create date: 8/25/2014
-- Description:	Get QC Status report
-- =============================================
ALTER PROCEDURE [dbo].[USP_GET_QCStatus]
(
	@From datetime,
	@To datetime,
	@Product varchar(20),
	@Zone varchar(20)
	)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SELECT b.GloveType, b.Size, b.BatchWeight as 'Before (Kgs)', qcyp.BatchWeight as 'After (Kgs)', (qcyp.TotalWeight *10) / b.TenPCsWeight as 'After Pcs'
		, (((b.BatchWeight - qcyp.BatchWeight) *100)/b.BatchWeight) as 'Reject %', lm.ZoneName, qcyp.LastModifiedOn
	from Batch b (nolock) join QCYieldAndPacking qcyp (nolock) on b.SerialNumber = qcyp.SerialNumber join LocationMaster lm on lm.LocationId = qcyp.LocationId
	where b.GloveType = @Product and lm.ZoneName = @Zone and qcyp.LastModifiedOn between @From and @To
END
GO
PRINT N'Altering Procedure [dbo].[USP_GET_QITestResult]...';


GO

-- =======================================================
-- Name:			USP_GET_QITestResult
-- Purpose: 		Get QI Test Result
-- =======================================================
-- Change History
-- Date         Author     Comments
-- -----        ------     -----------------------------
-- 25/09/2014 	Ruhi	   SP created.
-- 28/12/0218	Max			 add nolock.
-- =======================================================
ALTER PROCEDURE [dbo].[USP_GET_QITestResult]
	@QaiId		BIGINT
AS
BEGIN	
BEGIN TRANSACTION;
BEGIN TRY
	
	SET NOCOUNT ON

Select QITestResult from QAI with(nolock)
Where QAIID = @QaiId

END TRY

BEGIN CATCH
    SELECT 
        ERROR_NUMBER() AS ErrorNumber
        ,ERROR_SEVERITY() AS ErrorSeverity
        ,ERROR_STATE() AS ErrorState
        ,ERROR_PROCEDURE() AS ErrorProcedure
        ,ERROR_LINE() AS ErrorLine
        ,ERROR_MESSAGE() AS ErrorMessage;
    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;
		THROW;
END CATCH;

IF @@TRANCOUNT > 0
  COMMIT TRANSACTION;

  END
GO
PRINT N'Altering Procedure [dbo].[USP_GET_RejectGlovesCategory]...';


GO
-- =============================================  
-- Author: pang yik siu  
-- Created date: <19 Jan 2021>  
-- Description: eFS STD - Glove Setup - Glove Code use D365 FS tables: DOT_FSItemMaster, DOT_FSGloveCode  
--    from old tables: AX_AVAGLOVECODETABLE  
-- 31/12/2021  Azrul    SP merged from NGC.  
-- =============================================  
ALTER PROCEDURE [dbo].[USP_GET_RejectGlovesCategory]  
(  
                @GloveType NVARCHAR(100)  
)  
AS  
BEGIN  
  
                IF ISNUMERIC(@GloveType) = 1  
        SELECT a.GloveCategory from DOT_FSGloveCode a join DOT_FSItemMaster b on a.ItemRecordId = b.Id where a.Barcode = @GloveType  
                ELSE  
                                SELECT a.GloveCategory from DOT_FSGloveCode a join DOT_FSItemMaster b on a.ItemRecordId = b.Id where b.ItemId = @GloveType  
  
/** orginal script  
                IF ISNUMERIC(@GloveType) = 1  
                                SELECT GloveCode FROM [dbo].[AX_AVAGLOVECODETABLE] WHERE Barcode = @GloveType   
                ELSE  
                                SELECT Glovecategory FROM [dbo].[AX_AVAGLOVECODETABLE] WHERE GloveCode = @GloveType   
        **/  
END
GO
PRINT N'Altering Procedure [dbo].[USP_GET_SerialNo_QAI]...';


GO

-- ==================================================================================================
-- Name:			[USP_GET_SerialNo_QAI]
-- Purpose: 		<Check whether QAI Status>
-- ==================================================================================================
-- Change History
-- Date               Author                     Comments
-- -----   ------   ---------------------------------------------------------------------------------
-- <22 June,2014> 	 <Amrinder Singh>	         SP created.
-- <22 June,2014> 	 <Kishan Dubal>	             Replacing hard coded qai duration with dynamic value
-- ==================================================================================================
ALTER PROCEDURE [dbo].[USP_GET_SerialNo_QAI]
(
       @serialNo NUMERIC(10,0),
	   @qaiExpiryDuration INT
)
AS
BEGIN
	SET NOCOUNT ON;
	IF EXISTS(
	SELECT COALESCE(
    CASE WHEN b.QAIDate IS NULL  THEN 'Incomplete'  ELSE NULL END,
    CASE WHEN b.QAIDate < DATEADD(d, -@qaiExpiryDuration, GETDATE()) THEN 'Expired' ELSE 'Passed' END
    ) AS Status FROM Batch b (nolock) JOIN QAI q (nolock) ON b.SerialNumber = q.SerialNumber WHERE  b.SerialNumber=@serialNo  AND Q.IsAXPostingSuccess=1 AND
	 q.QAIId=(SELECT TOP 1 QAIID FROM QAI (nolock) where SerialNumber=q.SerialNumber order by QAIId ASC  ))
	 BEGIN
	 	SELECT COALESCE(
    CASE WHEN b.QAIDate IS NULL  THEN 'Incomplete'  ELSE NULL END,
    CASE WHEN b.QAIDate < DATEADD(d, -@qaiExpiryDuration, GETDATE()) THEN 'Expired' ELSE 'Passed' END
    ) AS Status FROM Batch b (nolock) JOIN QAI q (nolock) ON b.SerialNumber = q.SerialNumber WHERE  b.SerialNumber=@serialNo  AND Q.IsAXPostingSuccess=1 AND
	 q.QAIId=(SELECT TOP 1 QAIID FROM QAI (nolock) where SerialNumber=q.SerialNumber order by QAIId ASC  )
	 END
	 ELSE
	 BEGIN
		 SELECT 'Incomplete'  AS Status
	 END
	 
    SET NOCOUNT OFF;
END
GO
PRINT N'Altering Procedure [dbo].[USP_GET_SubModuleIdForSerialNo]...';


GO


-- =======================================================
-- Name:             USP_GET_SubModuleIdForSerialNo
-- Purpose:          Get Sub Module Id for Serial No
-- =======================================================
-- Change History
-- Date         Author     Comments
-- -----        ------     -----------------------------
-- 15/09/2014        Ruhi    SP created.
-- 28/12/0218		 Max	add nolock.
-- =======================================================
ALTER PROCEDURE [dbo].[USP_GET_SubModuleIdForSerialNo]
(
	@SerialNumber decimal
)
AS
BEGIN
	SET NOCOUNT ON;
	SELECT top(1) SubModuleId from QCYieldandPacking with(nolock)
	where serialnumber = @SerialNumber
	order by lastModifiedOn desc
			  
	  
END
GO
PRINT N'Altering Procedure [dbo].[usp_HBC_ReprintBatchCard_Save]...';


GO

-- =============================================  
-- Name:   usp_HBC_ReprintBatchCard_Save  
-- Purpose:   Save ReprintBatchCard Details  
-- =============================================  
-- Change History  
-- Date    Author   Comments  
-- -----   ------   -----------------------------  
-- 27/06/2014  Narendranath    SP created.  
-- 27/06/2018  Azrul      SP altered.  
-- 15/12/2021  Azrul      HSB SIT Issue: Add PrintType.  
-- =============================================  
  
ALTER PROCEDURE [dbo].[usp_HBC_ReprintBatchCard_Save]  
(  
@SerialNumber  NVARCHAR(3000),  
@ReprintDateTime DATETIME,  
@OperatorId   NVARCHAR(20),  
@ReasonId   INT,  
@WorkStationName    NVARCHAR(150)  
)  
AS  
BEGIN   
DECLARE  @LocationId INT  
DECLARE  @ProcessArea NVARCHAR(20)  
DECLARE  @BatchType NVARCHAR(20)  
BEGIN TRANSACTION;  
BEGIN TRY  
 SELECT @LocationId=LocationId FROM WorkStationMaster c WHERE WorkStationName=@WorkStationName  
  SELECT  @ProcessArea=Area FROM LocationMaster c WHERE LocationId=@LocationId  
 INSERT INTO ReprintBatchCard(SerialNumber,OperatorId,ReprintDateTime,ReasonId,ProcessArea,PrintDatetime,LocationId,ReprintHour,PrintType)  
  
  SELECT SerialNumber,@OperatorId,@ReprintDateTime,@ReasonId,@ProcessArea,BatchCardDate,@LocationId,convert(TIME,@ReprintDateTime),'REPRINT' FROM BATCH b  
  JOIN dbo.ufn_CSVToTable(@SerialNumber) ct ON b.SerialNumber= ct.String   
   
 SELECT @BatchType = RTRIM(BatchType) FROM Batch WITH (NOLOCK) WHERE SerialNumber = @SerialNumber  
 IF (@BatchType = 'T')  
 BEGIN  
  IF ((SELECT COUNT (DISTINCT PackingSz) FROM DOT_FloorD365HRGLOVERPT WITH (NOLOCK) WHERE SerialNo = @SerialNumber) = 1)  
  BEGIN       
   --select result for print batch card if same PackingSize  
   SELECT b.OutTime,a.SerialNumber,a.BatchNumber,a.GloveType, a.Size,a.BatchCardDate,  
   STUFF((SELECT ', ' + r.Resource FROM DOT_FloorD365HRGLOVERPT r WITH (NOLOCK) WHERE r.SerialNo = a.SerialNumber FOR XML path('') ), 1, 2, '') AS Resource,  
   b.PackingSz AS PackingSize,  
   SUM(b.InBox) AS InnerBox,  
   REPLACE(CONVERT(VARCHAR,CONVERT(Money, SUM(b.PackingSz * b.InBox)),1),'.00','') as TotalGloveQty   
   from batch as a left join DOT_FloorD365HRGLOVERPT as b  WITH (NOLOCK) on a.SerialNumber = b.SerialNo  
   where a.LocationId = @LocationId and a.SerialNumber = @SerialNumber   
   group by b.PackingSz,b.OutTime,a.SerialNumber,a.BatchNumber,a.GloveType,a.Size,a.BatchCardDate  
  END  
  ELSE  
  BEGIN  
   --select result for print batch card if diff PackingSize  
   SELECT b.OutTime,a.SerialNumber,a.BatchNumber,a.GloveType, a.Size,a.BatchCardDate,  
   STUFF((SELECT ', ' + r.Resource FROM DOT_FloorD365HRGLOVERPT r WITH (NOLOCK) WHERE r.SerialNo = a.SerialNumber FOR XML path('') ), 1, 2, '') AS Resource,  
   STUFF((SELECT ',' + CONVERT(NVARCHAR,p.PackingSz) FROM DOT_FloorD365HRGLOVERPT p WITH (NOLOCK) WHERE p.SerialNo = a.SerialNumber FOR XML path('') ), 1, 1, '') AS PackingSize,  
   STUFF((SELECT ',' + CONVERT(NVARCHAR,i.InBox) FROM DOT_FloorD365HRGLOVERPT i WITH (NOLOCK) WHERE i.SerialNo = a.SerialNumber FOR XML path('') ), 1, 1, '') AS InnerBox,  
   REPLACE(CONVERT(VARCHAR,CONVERT(Money, SUM(b.PackingSz * b.InBox)),1),'.00','') as TotalGloveQty   
   from batch as a left join DOT_FloorD365HRGLOVERPT as b  WITH (NOLOCK) on a.SerialNumber = b.SerialNo  
   where a.LocationId = @LocationId and a.SerialNumber = @SerialNumber   
   group by b.OutTime,a.SerialNumber,a.BatchNumber,a.GloveType,a.Size,a.BatchCardDate  
  END  
 END  
 ELSE  
 BEGIN  
  -- IF Online 2G Glove  
  IF EXISTS (SELECT * FROM DOT_FloorD365Online2G WHERE SerialNumber = @SerialNumber)  
  BEGIN  
   SELECT FORMAT(SerialNumber,'0000000000') AS SerialNumber, BatchNumber, GloveCode as GloveType,Size, CurrentDateandTime as BatchCardDate,  
   Resource,CurrentDateandTime as OutTime,  PackingSize, InnerBox, PackingSize*InnerBox as TotalGloveQty  
   FROM DOT_FloorD365Online2G WITH (NOLOCK) WHERE Plant = 'P'+ CAST(@LocationId AS VARCHAR(2)) and SerialNumber = @SerialNumber   
  END  
  ELSE  
  BEGIN  
   --select result for print batch card other than HBC  
   SELECT SerialNumber,BatchNumber,GloveType,Size,BatchCardDate,BatchCardDate,BatchWeight,TenPcsWeight,LTRIM(BatchType) as BatchType  
   FROM batch WITH (NOLOCK) WHERE LocationId = @LocationId and SerialNumber = @SerialNumber   
  END  
 END  
  
END TRY  
BEGIN CATCH  
 DECLARE @ErrorMessage NVARCHAR(4000);  
 DECLARE @ErrorSeverity INT;  
 DECLARE @ErrorState INT;  
 SELECT   
        @ErrorMessage = ERROR_MESSAGE(),  
        @ErrorSeverity = ERROR_SEVERITY(),  
        @ErrorState = ERROR_STATE();  
  RAISERROR (@ErrorMessage,   
        @ErrorSeverity,  
        @ErrorState   
        );  
    IF @@TRANCOUNT > 0  
        ROLLBACK TRANSACTION;  
END CATCH;  
  
IF @@TRANCOUNT > 0  
  COMMIT TRANSACTION;  
  
  END
GO
PRINT N'Altering Procedure [dbo].[USP_SAV_PT_Batch]...';


GO
  
-- ========================================================================================  
-- Name:   [USP_SAV_PT_Batch]  
-- Purpose:   <Save Details in PTScanBatchCard table>  
-- ========================================================================================  
-- Change History  
-- Date               Author                     Comments  
-- -----   ------   -----------------------------------------------------------------------  
-- <4 July,2014>  <Amrinder Singh>          SP created.  
-- <10 August,2016> <Roy Chow>                   Bug fix for Water Tight batches report dry weight.  
-- <19 Oct,2016> <Roy Chow>                   Bug fix for Water Tight batches report dry weight for BatchType 'PSW'.  
-- <19 Oct,2016> <Soon Siang>                 Update SP to return PTScanBatchCard ID.  
-- <23 Jul,2020> <PangYS>      Change @changeGloveType and @prevGloveType from 25 to 50  
-- <19 Nov,2021> <Azrul>       HTLG_HSB_002: Special Glove (Clean Room Product) - Save Batch Order Number.
  
ALTER PROCEDURE [dbo].[USP_SAV_PT_Batch]  
(  
    @serialNo             NUMERIC(10,0),  
    @shiftId              INT,  
    @reworkReasonId       INT = NULL,  
    @reworkProcess        NVARCHAR(30) = NULL,  
    @reworkCount          INT = NULL,  
    @locationId           INT,  
    @lastModifiedOn       DATETIME,  
    @tenPcsWeight         DECIMAL(18,3),  
    @batchWeight          DECIMAL(18,3),  
    @workstationId        INT = NULL,  
    @changeGloveType      NVARCHAR(50) = NULL,  
    @prevGloveType        NVARCHAR(50) = NULL,  
    @id                   INT,  
    @dryerId              INT = NULL,  
    @authorizedFor        INT = NULL,
	@oldbatchOrder		  NVARCHAR(100) = NULL, 
	@batchOrder			  NVARCHAR(100) = NULL 
)  
AS  
BEGIN  
 BEGIN TRANSACTION;  
   -- Try Block  
  BEGIN TRY  
    DECLARE @PTID INT  
       SET NOCOUNT ON;  
   IF @id = 0  
    BEGIN    
     INSERT INTO PTScanBatchCard (SerialNumber, ShiftId, ReworkReasonId, ReworkProcess, ReworkCount, LocationId,LastModifiedOn,TenPcsWeight,BatchWeight,WorkstationId,DryerId,AuthorizedFor)   
     VALUES (@serialNo, @shiftId, @reworkReasonId, @reworkProcess, @reworkCount, @locationId, @lastModifiedOn, @tenPcsWeight, @batchWeight, @workstationId, @dryerId, @authorizedFor)  
     SET @PTID = SCOPE_IDENTITY()  
     --UPDATE Batch SET PTBatchWeight = @batchWeight, PTTenPCsWeight = @tenPcsWeight WHERE SerialNumber = @serialNo   
     --IF ( SELECT BatchType FROM Batch with(nolock)  WHERE SerialNumber = @serialNo )LIKE '%WT%'  
     IF ( SELECT BatchType FROM Batch with(nolock)  WHERE SerialNumber = @serialNo ) IN (select EnumValue from EnumMaster where EnumType = 'WTType')  
      UPDATE Batch SET PTBatchWeight = @batchWeight, PTTenPCsWeight = @tenPcsWeight, BatchWeight = @batchWeight, TenPCsWeight = @tenPcsWeight, TotalPCs = ROUND((@batchWeight*10000)/@tenPcsWeight,-1) WHERE SerialNumber = @serialNo  
     ELSE  
      UPDATE Batch SET PTBatchWeight = @batchWeight, PTTenPCsWeight = @tenPcsWeight WHERE SerialNumber = @serialNo   
    END  
   ELSE  
    BEGIN  
     UPDATE PTScanBatchCard SET ChangeGloveType = @changeGloveType WHERE SerialNumber = @serialNo --#Azrul 2021-11-18 - HTLG_HSB_002: Special Glove (Clean Room Product), remove updates LastModifiedOn for USP_DOT_GET_PT_OR_QC_QITestResult checking.   
     AND Id = (SELECT TOP 1 Id FROM PTScanBatchCard WHERE SerialNumber = @serialNo ORDER BY LastModifiedOn DESC)  
     SET @PTID = (SELECT TOP 1 Id FROM PTScanBatchCard WHERE SerialNumber = @serialNo ORDER BY LastModifiedOn DESC)  
     UPDATE Batch SET GloveType = @changeGloveType WHERE SerialNumber = @serialNo
     INSERT INTO ChangeGloveHistory (SerialNumber, OldGloveType, NewGloveType, LastModifiedOn, WorkstationId, OldBatchOrder, NewBatchOrder) VALUES  --#Azrul 2021-11-18 - HTLG_HSB_002: Special Glove (Clean Room Product) 
     (@serialNo, @prevGloveType, @changeGloveType, @lastModifiedOn, @workstationId, @oldbatchOrder, @batchOrder) --#Azrul 2021-11-18 - HTLG_HSB_002: Special Glove (Clean Room Product)     
	 UPDATE DOT_FloorD365HRGLOVERPT SET GloveCode = @changeGloveType, BthOrder = @batchOrder WHERE SerialNo = @serialNo --#Azrul 2021-11-18 - HTLG_HSB_002: Special Glove (Clean Room Product)
          END  
  
    SELECT @PTID  
       SET NOCOUNT OFF;  
  END TRY  
   -- Catch Block   
  BEGIN CATCH  
   IF @@TRANCOUNT > 0  
     ROLLBACK TRANSACTION;  
  END CATCH;  
  IF @@TRANCOUNT > 0  
    COMMIT TRANSACTION;  
END
GO
PRINT N'Altering Procedure [dbo].[USP_SAV_QAIData]...';


GO
  
  
-- =======================================================  
-- Name:             USP_SAV_QAIData  
-- Purpose:          Save Data from QAIDTO and DefectDataDTO  
-- =======================================================  
-- Change History  
-- Date         Author     Comments  
-- -----        ------     -----------------------------  
-- 24/08/2014        NarendraNath    SP created.  
-- 16/01/2018  MyAdamas  - QAIScan & QAIScanInnerTenPcs: Update Batch's QAIDate & QCType  
--         - QAIChangeQCType & QAIResamplingScan: Update Batch's QCType only   
--         - ScanQITestResult where result is PASS: Update Batch's QCType only   
-- 30/1/2018  MYAdamas  Update qctype for ScanQI no matter failed/pass  
-- 10/4/2018  Pang YIk SIU Fix TenPcsWeight Decimal issue(5,3) to (18,3)  
-- 05/06/2020  Soon Siang  ADd New Column QITestReason  
-- 12/01/2021       Vinoden      Change [AX_AVAQCTYPETABLE] to [DOT_FSQCTYPETABLE]  
-- 13/12/2021 Azrul    Merged from NGC. 
-- 05/01/2022	Pang			ITRF:20211229160942289340 To fix the bugs for QAIDate of Batch Table 
-- =========================================================    
ALTER PROCEDURE [dbo].[USP_SAV_QAIData]    
(      
 @QAIDETAILS NVARCHAR(MAX),      
 @WorkStationId NVARCHAR(50),    
 @IsChangeQCType BIT    
)      
AS  
BEGIN  
BEGIN TRANSACTION;  
BEGIN TRY       
  
 DECLARE @QAIID INT  
 DECLARE @idoc INT
 DECLARE @PackingSize INT    
 DECLARE @InnerBox INT      
 DECLARE @QCTypeSelected NvarChar(200)  
 SELECT  @QCTypeSelected=QCTYPE FROM DOT_FSQCTypeTable WITH (NOLOCK) WHERE DESCRIPTION ='RESAMPLE' And STOPPED=0      
    
 DECLARE @SerialNo numeric(15, 0)    
 DECLARE @QAIExpiryDuration int    
 DECLARE @QAIScreenName nvarchar(200)    
    
 DECLARE @QAICheck int = 1    
 DECLARE @QAICheckResult nvarchar(10)    
 EXEC sp_xml_preparedocument @idoc OUTPUT, @QAIDETAILS      
    
 SET @QAIExpiryDuration = Convert(INT,Replace((Select Item from dbo.SplitString((SELECT Item FROM dbo.SplitString((select FloorConfData from SystemConfData),',') where Item like '%intQaiExpiryDuration%'),':') where Item  not like '%intQaiExpiryDuration%')
  
    
,'"',''))    
 SELECT @SerialNo = adata.SerialNumber, @QAIScreenName = adata.ScreenName FROM OPENXML(@idoc, '/QAIDetails',2) WITH (SerialNumber NUMERIC(15), ScreenName NVARCHAR(200)) adata    
    
  IF (@QAIScreenName = 'QAIScanInnerTenPcs') OR (@QAIScreenName = 'QAIScan')    
 BEGIN    
 IF EXISTS(    
 SELECT COALESCE(    
    CASE WHEN b.QAIDate IS NULL THEN 'Incomplete'  ELSE 'NoQAI' END,    
    CASE WHEN b.QAIDate < DATEADD(d, -@qaiExpiryDuration, GETDATE()) THEN 'Expired' ELSE 'Passed' END    
    ) AS Status FROM Batch b (nolock) JOIN QAI q (nolock) ON b.SerialNumber = q.SerialNumber WHERE  b.SerialNumber=@serialNo  AND Q.IsAXPostingSuccess=1 AND    
  q.QAIId=(SELECT TOP 1 QAIID FROM QAI (nolock) where SerialNumber=q.SerialNumber order by QAIId ASC  ))    
  BEGIN    
  SELECT @QAICheckResult = xy.Status FROM (    
    SELECT COALESCE(    
   CASE WHEN b.QAIDate IS NULL  THEN 'Incomplete'  ELSE 'NoQAI' END,    
   CASE WHEN b.QAIDate < DATEADD(d, -@qaiExpiryDuration, GETDATE()) THEN 'Expired' ELSE 'Passed' END    
   ) AS Status FROM Batch b (nolock) JOIN QAI q (nolock) ON b.SerialNumber = q.SerialNumber WHERE  b.SerialNumber=@serialNo  AND Q.IsAXPostingSuccess=1 AND    
   q.QAIId=(SELECT TOP 1 QAIID FROM QAI (nolock) where SerialNumber=q.SerialNumber order by QAIId ASC)    
  ) xy    
  END    
  ELSE    
  BEGIN    
   SET @QAICheckResult = 'Incomplete'    
  END    
    
  IF (@QAICheckResult = 'NoQAI') OR (@QAICheckResult = 'Incomplete')    
  BEGIN    
  SET @QAICheck = 1    
  END    
  ELSE      
  BEGIN    
  SET @QAICheck = 2    
  INSERT INTO [dbo].[Exception] ([Message],[StackTrace],[WorkStationID],[ExceptionDateTime],[InnerExceptionmessage],[SubSystem],[SystemBaseException],[ScreenName],[UIClassName],[UIControlName],[MethodParameter])    
  VALUES ('QAI Duplication Prevention','','', GETDATE(),'','','', @QAIScreenName,'','', @SerialNo)    
  END    
 END    
 ELSE    
 BEGIN    
 SET @QAICheck = 1    
 END    
    
  IF (@QAICheck = 1)    
  BEGIN    
 INSERT INTO QAI(SerialNumber,BatchNumber,QAIInspectorId,QCType,WTSampliingSize,TenPcsWeight, QAIDate,VTSamplingSize,HBSamplingSize,QAIChangeReason,    
 QITestResult,LastModifiedDateTime,IsResampling,WorkStationId,SubModuleId,QCTypeAuthorizedBy,SuggestedQCType,AQLValue,QAIScreenName, TenPcsSamplingSize,IsAXPostingSuccess,QITestReason)    
 SELECT a.SerialNumber,a.BatchNumber,a.QAIInspectorId,a.QCType,a.WTSampliingSize,a.TenPcsWeight,GETDATE() QAIDateTime,a.VTSamplingSize,a.HBSamplingSize,    
 a.QAIChangeReason,a.QAITestResult,GETDATE(),a.IsResampling,@WorkStationId,b.SubModuleId,QCTypeAuthorizedBy,SuggestedQCType,AQLValue,ScreenName, TenPcsSamplingSize,1,QITestReason FROM  OPENXML(@idoc, '/QAIDetails',2)    
 WITH (SerialNumber NUMERIC(15),BatchNumber NVARCHAR(40),QAIInspectorId NVARCHAR(10),    
 QCType NVARCHAR(20),WTSampliingSize INT,InnerBox INT,TenPcsWeight DECIMAL(18, 3),    
 PackingSize INT ,QAIDateTime DATETIME,VTSamplingSize INT,HBSamplingSize INT,QAIChangeReason NVARCHAR(20),    
 DefectTypeId INT,QAITestResult NVARCHAR(30),IsResampling bit,QCTypeAuthorizedBy NVARCHAR(10),SuggestedQCType NVARCHAR(20),AQLValue NVARCHAR(100),ScreenName NVARCHAR(200), TenPcsSamplingSize INT, QITestReason NVARCHAR(50)) a JOIN batch b ON a.SerialNumber
  
=b.SerialNumber    
    
 SELECT @QAIID= SCOPE_IDENTITY();      
      
    INSERT INTO QAIDefectMapping      
    SELECT @QAIID, DefectID,[Count] FROM   OPENXML(@idoc, '/QAIDetails/Defects/QAIDefectType/DefectList',2)      
    WITH (DefectID INT,[Count] INT) X      
    WHERE X.[count] >0      
     
 -- 21/10/2020 start    
 INSERT INTO QAIDefectPositionMapping    
 SELECT @QAIID, DefectID, DefectPositionID,[Count] FROM   OPENXML(@idoc, '/QAIDetails/Defects/QAIDefectType/DefectList/DefectPositionList',2)    
 WITH (DefectID int '../DefectID', DefectPositionID INT,[Count] INT) X    
 WHERE X.[count] >0    
 -- 21/10/2020 end    
    
    
    DECLARE @SerialNumber NVARCHAR(100)    
 SELECT @SerialNumber = SerialNumber FROM OPENXML(@idoc, '/QAIDetails',2) WITH (SerialNumber NUMERIC(15))    
      
    INSERT INTO BatchAXPostingLog(SerialNumber,BatchNumber,ShiftId,LineId,GloveType,Size,TierSide,BatchWeight,TenPCsWeight,BatchLostArea,BatchCardDate,QCType,      
    QAIDate,BypassReasonId,ReferenceNumber,ReWorkCount,IsReprint,IsOnline,TotalPCs,ModuleId,SubModuleId,LocationId,BatchType,      
    AuthorizedBy,LastModifiedOn,WorkStationId,IsFPBatchSplit,BatchCardCurrentLocation,PackedPcs,QCBatchWeight,QCTenPcsWeight,      
    PTBatchWeight,PTTenPcsWeight,CustomerRejectRefId,AXPostingDate,QAIID)      
    SELECT SerialNumber,BatchNumber,ShiftId,LineId,GloveType,Size,TierSide,BatchWeight,TenPCsWeight,BatchLostArea,BatchCardDate,QCType,      
    QAIDate,BypassReasonId,ReferenceNumber,ReWorkCount,IsReprint,IsOnline,TotalPCs,ModuleId,SubModuleId,LocationId,BatchType,      
    AuthorizedBy,LastModifiedOn,WorkStationId,IsFPBatchSplit,BatchCardCurrentLocation,PackedPcs,QCBatchWeight,QCTenPcsWeight,      
    PTBatchWeight,PTTenPcsWeight,CustomerRejectRefId,GETDATE(),@QAIID FROM BATCH  WHERE SerialNumber=@SerialNumber    
    
    DECLARE @ScreenName NVARCHAR(100)    
    SELECT @ScreenName=ScreenName FROM OPENXML(@idoc, '/QAIDetails',2) WITH (ScreenName NVARCHAR(100))      
    
 IF (@IsChangeQCType IS NOT NULL AND LEN(@IsChangeQCType) > 0)    
 BEGIN    
  UPDATE batch SET IsChangeQCType = @IsChangeQCType WHERE SerialNumber = @SerialNumber    
 END    
    
    IF @ScreenName='QAIScanInnerTenPcs'      
    BEGIN      
     DECLARE @TenPCsWeight DECIMAL     
     DECLARE @BatchWeight DECIMAL (10, 3)     
     DECLARE @TotalPCs INT      
             
     UPDATE b SET b.TotalPCs= isnull(a.TotalPCs,0),BatchWeight=(SELECT ((SUM(PackingSz*InBox))*a.TenPcsWeight)/10000 FROM DOT_FloorD365HRGLOVERPT WITH (INDEX(DOT_SerialNo_Index) NOLOCK) WHERE SerialNo = @SerialNumber),    
  b.TenPcsWeight =a.TenPcsWeight FROM OPENXML(@idoc, '/QAIDetails',2) WITH (SerialNumber NUMERIC(15),    
  TotalPCs INT,BatchWeight DECIMAL(18,3),TenPcsWeight DECIMAL(18, 3)) a JOIN batch b ON a.SerialNumber=b.SerialNumber AND b.SerialNumber=@SerialNumber       
    END  
  
 --Surgical & Print Normal Batch logics START  
    IF @ScreenName='QAIScan'    
    BEGIN    
		DECLARE @IsSurgicalGlove INT = 0,
				@IsPNBC INT = 0

		IF EXISTS (select 1 from Batch b with (nolock) join DOT_FSItemMaster i with (nolock) on b.GloveType = i.ItemId where b.SerialNumber = @SerialNumber and i.ItemType = 109)  
		BEGIN  
			SET @IsSurgicalGlove = 1  
		END  

		IF EXISTS (select 1 from Batch with (nolock) where SerialNumber = @SerialNumber and SubModuleId = 1)  
		BEGIN  
			SET @IsPNBC = 1  
		END  

		IF (@IsSurgicalGlove = 1 OR @IsPNBC = 1)
		BEGIN  
		    --#Azrul 20200112: Temp disabled, Print SRBC Qty default to 0.  
		    --UPDATE b SET b.TenPcsWeight = a.TenPcsWeight FROM OPENXML(@idoc, '/QAIDetails',2) WITH (SerialNumber NUMERIC(15),TenPcsWeight DECIMAL(10, 3)) a   
		    --     JOIN batch b WITH (NOLOCK) ON a.SerialNumber=b.SerialNumber AND b.IsOnline=1  
            SELECT @BatchWeight = BatchWeight FROM batch WITH (NOLOCK) WHERE SerialNumber = @SerialNumber --AND b.IsOnline=1  --HSB UAT Issue: Include Offline Print Normal Batch Card      
            SELECT @TotalPCs = (@BatchWeight/TenPcsWeight)*10000 FROM OPENXML(@idoc, '/QAIDetails',2) WITH (SerialNumber NUMERIC(15),TenPcsWeight DECIMAL(18, 3))      
            UPDATE b SET b.TenPcsWeight = a.TenPcsWeight, b.TotalPcs = @TotalPCs FROM OPENXML(@idoc, '/QAIDetails',2) WITH (SerialNumber NUMERIC(15),TenPcsWeight DECIMAL(18, 3)) a       
            JOIN batch b WITH (NOLOCK) ON a.SerialNumber=b.SerialNumber --AND b.IsOnline=1  --HSB UAT Issue: Include Offline Print Normal Batch Card  
		    UPDATE DOT_FloorD365HRGLOVERPT SET PackingSz = @TotalPCs WHERE SerialNo = @SerialNumber  
		END  
    END     
 --Surgical & Print Normal Batch logics END     
    
    IF (@ScreenName!= 'ScanQITestResult')      
     BEGIN      
      -- ITRF:20211229160942289340 To fix the bugs for QAIDate of Batch Table 
	  IF (@ScreenName = 'QAIScan' OR @ScreenName = 'QAIScanInnerTenPcs')
	  BEGIN		
	  	UPDATE b SET b.QAIDate = GETDATE(),b.LastModifiedOn=GETDATE()
	  	FROM Batch b JOIN QAI q ON q.SerialNumber=b.SerialNumber
	  	WHERE q.QAIId=@QAIID 
	  END

	  UPDATE b SET b.QCType = q.QCType, b.LastModifiedOn=GETDATE()
	  FROM Batch b JOIN QAI q ON q.SerialNumber=b.SerialNumber
	  WHERE q.QAIId=@QAIID     
     END      
    ELSE IF (@ScreenName = 'ScanQITestResult')      
     BEGIN      
   -- #AZRUL 20180814: BUG_1127 - Update QC type either QI result is Pass or failed.    
   -- #Max 20181220, only fail update qc type    
      IF EXISTS(SELECT 1 FROM QAI WHERE QAIId=@QAIID AND QITestResult='Fail')      
      BEGIN      
       UPDATE b SET b.QCType = q.QCType,b.LastModifiedOn=GETDATE()    
       FROM Batch b JOIN QAI q ON q.SerialNumber=b.SerialNumber      
       WHERE q.QAIId=@QAIID       
      END      
      ELSE      
      BEGIN      
   Declare @Route NVARCHAR(100)    
   DECLARE @QAIQCType NvarChar(200)    
   SELECT TOP 1 @Route = qctype.RouteCategory,@QAIQCType=q.QCType FROM QAI q join DOT_FSQCTypeTable qctype with(nolock) on q.QCType=QCType.QCType WHERE QAIId=@QAIID order by qctype.Id desc    
   -- 1. for Reproduction PT batch card, PTQI pass QC type change will update batch qc type     
   -- 2. for HBC NON SP batch card,from PT change to OCQ will update batch QC Type    
   -- 3. include VT type batch card, PTQI pass QC type change will update batch qc type    
   -- 4. exclude 'SP Pass', will follow batch QC Type     
   IF @QAIQCType<>'0006020001' and EXISTS(SELECT 1 FROM Batch b with(nolock)    
    left join DOT_FSQCTypeTable qc with(nolock) on b.QCType=qc.QCType    
    where b.SerialNumber=@SerialNumber     
     and (exists (select 1 from EnumMaster with(nolock) where EnumType in ('WTType','VTType') and b.BatchType = EnumValue)     
      or (b.BatchType in ('T','X')  and qc.RouteCategory='PT' and @Route = 'OQC')))    
    BEGIN    
     UPDATE b SET b.QCType = q.QCType,b.LastModifiedOn=GETDATE()    
     FROM Batch b JOIN QAI q ON q.SerialNumber=b.SerialNumber      
     WHERE q.QAIId=@QAIID      
    END    
   ELSE    
     BEGIN          
     -- TOTT ID 142 Fix not to update QC type to batch table Qctype when QI result is Pass      
     UPDATE q SET q.QCType = b.QCType      
     FROM Batch b JOIN QAI q ON q.SerialNumber=b.SerialNumber      
     WHERE q.QAIId=@QAIID       
  END    
      END      
     END      
      
    SELECT @QAIID QAIID      
 END    
 ElSE    
 BEGIN    
 SELECT -1 QAIID    
 END    
  
 EXEC sp_xml_removedocument @idoc       
  
  
END TRY  
BEGIN CATCH  
 DECLARE @ErrorMessage NVARCHAR(4000);  
 DECLARE @ErrorSeverity INT;  
 DECLARE @ErrorState INT;  
 SELECT   
        @ErrorMessage = ERROR_MESSAGE(),  
        @ErrorSeverity = ERROR_SEVERITY(),  
        @ErrorState = ERROR_STATE();  
  RAISERROR (@ErrorMessage,   
        @ErrorSeverity,  
        @ErrorState   
        );  
  
    IF @@TRANCOUNT > 0  
        ROLLBACK TRANSACTION;  
END CATCH;  
  
IF @@TRANCOUNT > 0  
  COMMIT TRANSACTION;  
  
  END
GO
PRINT N'Altering Procedure [dbo].[USP_SAVE_AXPOSTINGLOG]...';


GO
-- =======================================================  
-- Change History  
-- Date         Author   Comments  
-- -----        ------   -----------------------------  
-- 04/09/2014   NarendraNath    SP created.  
-- 09/09/2021   Azrul   Open batch flag for NGC1.5.  
-- =======================================================  
ALTER PROCEDURE [dbo].[USP_SAVE_AXPOSTINGLOG]  
(  
 @ServiceName nvarchar(50) ,  
 @PostingType nvarchar(20) ,  
 @PostedDate datetime ,  
 @BatchNumber nvarchar(30) ,  
 @SerialNumber numeric(15, 0) ,  
 @IsPostedToAX bit ,  
 @IsPostedInAX bit ,  
 @Sequence int ,  
 @ExceptionCode nvarchar(1000),  
 @TransactionID nvarchar(100),       
 @Area NVARCHAR(10),  
 @IsConsolidated bit, -- Open batch flag for NGC1.5  
 @PlantNo nvarchar(20) = '' -- Open batch flag for NGC1.5  
)  
AS  
BEGIN  
INSERT INTO dbo.AXPostingLog  
           (ServiceName,PostingType,PostedDate,BatchNumber,SerialNumber,IsPostedToAX,IsPostedInAX,Sequence,ExceptionCode,TransactionId,Area,CreationDate,IsConsolidated)  
     VALUES(@ServiceName,@PostingType,@PostedDate,@BatchNumber,@SerialNumber,@IsPostedToAX,@IsPostedInAX,@Sequence,@ExceptionCode,@TransactionID,@Area,getdate(),
			dbo.Ufn_DOT_GET_IsConsolidated(@SerialNumber,@PlantNo));-- -- replace by function @ISCONSOLIDATED)
END
GO
PRINT N'Altering Procedure [dbo].[USP_SEL_BrandNameByBrand]...';


GO
-- =============================================
-- Name:			USP_SEL_BrandNameByBrand
-- Purpose: 		Get Brand Name by Brand
-- =============================================
-- Change History
-- Date    Author   Comments
-- -----   ------   -----------------------------
-- 11/01/2017  Ajay Varma Sp created
-- 28/11/2019  pang modified to NGC version
-- =============================================


ALTER PROCEDURE [dbo].[USP_SEL_BrandNameByBrand]
(
	@ItemId		NVARCHAR(50)
)
AS
BEGIN	
BEGIN TRANSACTION;
BEGIN TRY
	
	SET NOCOUNT ON

	--Select brandname  FROM ax_avabrandheader where ITEMID = @ItemId
	SELECT [Name] AS brandname FROM DOT_FSItemMaster WHERE ItemId = @ItemId

END TRY

BEGIN CATCH
    
    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;
END CATCH;

IF @@TRANCOUNT > 0
  COMMIT TRANSACTION;

END
GO
PRINT N'Altering Procedure [dbo].[USP_SEL_Brands]...';


GO


-- =============================================
-- Name:			[dbo].[USP_SEL_Brands]
-- Purpose: 		<Fetches Brand List>
-- =============================================
-- Change History
-- Date			Author				Comments
-- -----		------				------------
-- 29/01/2015 	Ruhi Gupta  		SP created
-- 31/05/2018	Azrul		  		SP altered
-- 8/09/2018	Max		  			decouple Brand Header&Detail with itemMaster
-- 30/11/2020	Max		  			CustomerSize change to HartalegaCommonSize to cater Surgical
-- =============================================
ALTER PROCEDURE [dbo].[USP_SEL_Brands]

(
	@SerialNumber		NUMERIC(15,0)
)

AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @GloveSize		NVARCHAR(8)

	Select @GloveSize = Size from batch where serialnumber = @SerialNumber

	SELECT bl.ItemId 
	from DOT_FSBrandLines bl 
	where bl.HartalegaCommonSize = @GloveSize
	-- and stopped = 0
	
	/** original sp
	SELECT ItemId from ax_avabrandline where stopped = 0 and CustomerSize = @GloveSize
	**/
END
GO
PRINT N'Altering Procedure [dbo].[USP_SEL_Line_ALL]...';


GO
-- ===============================================================
-- Name:			USP_SEL_Line_ALL
-- Purpose: 		Get Line based on location
-- ===============================================================
-- Change History
-- Date         Author     Comments
-- -----        ------     ---------------------------------------
-- 05/11/2014 	Narendranath	   SP ALTERd.
-- 24/10/2018	Azrul			   Decouple Production Line table.
-- ===============================================================
ALTER PROCEDURE [dbo].[USP_SEL_Line_ALL]
	-- Add the parameters for the stored procedure here
	 @location		NVARCHAR(20)	
AS
BEGIN
	SET NOCOUNT ON;
	
		 SELECT  lm.LineNumber as 'LineNumber' FROM LocationMaster lom JOIN LineMaster lm 
		 ON lm.LocationId = lom.LocationId 
		 WHERE lom.IsDeleted = 0 AND lom.LocationName=@location ORDER BY lm.LineNumber

		 /**Original sp
		 SELECT  LineId as 'LineNumber' FROM ProductionLine pl 
		 JOIN LocationMaster lom ON  PL.LocationId=lom.LocationId
		 JOIN LineMaster lm ON lm.LocationId = lom.LocationId AND pl.LineId=lm.LineNumber
		 WHERE pl.IsDeleted = 0 AND lom.IsDeleted = 0 AND lom.LocationName=@location ORDER BY  LineId
		 **/
	  
	SET NOCOUNT OFF;
END
GO
PRINT N'Altering Procedure [dbo].[USP_SEL_SizeByGloveTypeTumbling]...';


GO
  
-- =======================================================  
  
-- Name:   USP_SEL_SizeByGloveTypeTumbling  
  
-- Purpose:   Gets Size by GloveType  
  
-- =======================================================  
  
-- Change History  
  
-- Date         Author     Comments  
  
-- -----        ------     -----------------------------  
  
-- 13/03/2015  Ruhi    SP created.  
-- 24/11/2017 MYAdamas SP altered get size by glovetypeid gloverrecid no longer in use  
  
-- Author: pang yik siu  
-- Created date: <19 Jan 2021>  
-- Description: eFS STD - Glove Setup - Glove Code use D365 FS tables: DOT_FSItemMaster, DOT_FSGloveCode  
--    from old tables: AX_AVAGLOVECODETABLE  
-- =======================================================  
  
ALTER PROCEDURE [dbo].[USP_SEL_SizeByGloveTypeTumbling]  
  
 @gloveType   NVARCHAR(50)  
  
AS  
  
BEGIN  
IF ISNUMERIC(@GloveType) = 1  
 select a.CommonSize AS 'SizeName' from DOT_GLOVERELCOMSIZE a  
 join DOT_FSItemMaster b on a.ItemId = b.ItemId  
 join DOT_FSGloveCode c on c.ItemRecordId = b.id  
 where c.Barcode = @gloveType  
ELSE  
 select a.CommonSize AS 'SizeName' from DOT_GLOVERELCOMSIZE a  
 --join DOT_FSItemMaster b on a.recid = b.id  
 --join DOT_FSGloveCode c on c.ItemRecordId = b.id  
 where a.ItemId = @gloveType and a.IsDeleted=0  
  
/** original sp  
  SELECT COMMONSIZE AS 'SizeName' FROM AX_AVAGLOVERELCOMSIZE A   
  JOIN AX_AVAGLOVECODETABLE B ON A.GLOVEREFRECID = B.RECID   
  WHERE glovecode = @gloveType  
  **/  
END
GO
PRINT N'Altering Procedure [dbo].[USP_VAL_PTScanInProcess]...';


GO
-- =======================================================
-- Name:             USP_VAL_PTScanInProcess
-- Purpose:          Validate PT Scan In Process
-- =======================================================
-- Change History
-- Date         Author     Comments
-- -----        ------     -----------------------------
-- 09/06/2020   Soon Siang SP created.
-- =======================================================
ALTER PROCEDURE [dbo].[USP_VAL_PTScanInProcess]
(
	@SerialNumber DECIMAL
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @ErrorMessage		NVARCHAR(MAX) = NULL,
			@PTScanInCycleNo	INT,
			@IsPTGlove			BIT,
			@GloveCode			NVARCHAR(50),
			@QCType				NVARCHAR(15),
			@QCTypeDescription	NVARCHAR(30),
			@QITestResult		NVARCHAR(10),
			@QITestReason		NVARCHAR(50),
			@QAIProcessDateTime DATETIME,
			@PTProcessDateTime  DATETIME,
			@serialStr			NVARCHAR(20) = CAST(@SerialNumber as nvarchar(20))

	SELECT @PTScanInCycleNo = COUNT(Id) + 1
	FROM PTScanBatchCard WITH(NOLOCK)
	WHERE SerialNumber = @SerialNumber
	

	-- CHECK PTPF for 
	SELECT TOP 1
		@GloveCode = GloveType
	FROM Batch WITH(NOLOCK)
	WHERE SerialNumber = @SerialNumber

	SELECT TOP 1
		@QCType = qai.QCTYPE,
		@QCTypeDescription = qctype.[DESCRIPTION]
	FROM QAI qai WITH(NOLOCK)
	LEFT JOIN DOT_FSQCTypeTable qctype WITH(NOLOCK)
		ON qai.QCType = qctype.QCTYPE
	WHERE SerialNumber = @SerialNumber
	ORDER BY QAIDate DESC, LastModifiedDateTime DESC -- YS: Change QCType shared same QAIDate. Added LastModifiedDateTime ordering to get latest record

	-- Check Is PTPF Glove
	IF EXISTS (SELECT TOP 1 1 FROM AX_AVAGLOVECODETABLE_EXTENSION WITH(NOLOCK) WHERE GLOVECODE = @GloveCode)
	BEGIN
			
		SET @IsPTGlove = 1
		--IF @QCType <> '0006020001' -- STRAIGHT PACK
		--BEGIN 
		--	SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'PT_VAL_PTPF_QAI_FAIL'
		--END
			
	END
	ELSE
	BEGIN
		-- Gary 2020-10-29: if surgical glove, bypass qc type checking in PT - start
		IF EXISTS (select 1 from DOT_FloorD365HRGLOVERPT a with (nolock) join DOT_FloorD365BO b with (nolock) on a.BthOrder = b.BthOrderId 
			where a.serialNo = @serialStr and b.prodPoolId = 'SGR' and a.IsDeleted = 0 and b.IsDeleted=0)
		BEGIN
			
			SET @IsPTGlove = 0

		END
		ELSE
		BEGIN
			SET @IsPTGlove = 0
			IF @QCType <> '0006020020' -- PT
			BEGIN 
				SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'PT_VAL_NONPTPF_NOT_PT'
			END
		END
		-- Gary 2020-10-29: end
	END

	IF @PTScanInCycleNo = 1
	BEGIN
		
		IF NOT EXISTS (SELECT TOP 1 1 FROM QAI WITH(NOLOCK) WHERE SerialNumber = @SerialNumber)
		BEGIN
			SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'QAI_RESULT_NOT_FOUND'
		END
		--ELSE
		--BEGIN
			
		--	SELECT TOP 1
		--		@GloveCode = GloveType
		--	FROM Batch WITH(NOLOCK)
		--	WHERE SerialNumber = @SerialNumber

		--	SELECT TOP 1
		--		@QCType = qai.QCTYPE,
		--		@QCTypeDescription = qctype.DESCRIPTION
		--	FROM QAI qai WITH(NOLOCK)
		--	LEFT JOIN DOT_FSQCTypeTable qctype WITH(NOLOCK)
		--		ON qai.QCType = qctype.QCTYPE
		--	WHERE SerialNumber = @SerialNumber
		--	ORDER BY QAIDate DESC

		--	-- Check Is PTPF Glove
		--	IF EXISTS (SELECT TOP 1 1 FROM AX_AVAGLOVECODETABLE_EXTENSION WITH(NOLOCK) WHERE GLOVECODE = @GloveCode)
		--	BEGIN
			
		--		SET @IsPTGlove = 1
		--		--IF @QCType <> '0006020001' -- STRAIGHT PACK
		--		--BEGIN 
		--		--	SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'PT_VAL_PTPF_QAI_FAIL'
		--		--END
			
		--	END
		--	ELSE
		--	BEGIN

		--		SET @IsPTGlove = 0
		--		IF @QCType <> '0006020020' -- PT
		--		BEGIN 
		--			SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'PT_VAL_NONPTPF_NOT_PT'
		--		END

		--	END

		--END

	END
	ELSE
	BEGIN
		
		IF NOT EXISTS (SELECT TOP 1 1 FROM QAI WITH(NOLOCK) WHERE SerialNumber = @SerialNumber AND QAIScreenName = 'ScanQITestResult')
		BEGIN
			SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'QAQI_RESULT_NOT_FOUND'
		END
		ELSE
		BEGIN

			SELECT TOP 1
				@QITestResult = QITestResult,
				@QITestReason = QITestReason,
				@QAIProcessDateTime = QAIDate
			FROM QAI WITH(NOLOCK)
			WHERE SerialNumber = @SerialNumber
				AND QAIScreenName = 'ScanQITestResult'
			ORDER BY QAIDate DESC

			SELECT TOP 1
				@PTProcessDateTime = LastModifiedOn
			FROM PTScanBatchCard WITH(NOLOCK)
			WHERE SerialNumber = @SerialNumber
			ORDER BY LastModifiedOn DESC
		
			IF @QAIProcessDateTime < @PTProcessDateTime
			BEGIN
				SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'PT_VAL_DOUBLE_SCAN'
			END
			ELSE
			BEGIN
		
				IF @PTScanInCycleNo = 2
				BEGIN

					IF @QITestResult <> 'FAIL' AND NOT (@QITestReason = 'New' OR @QITestReason = 'Normal Rework' OR @QITestReason = 'PSI Rework')
					BEGIN
						SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'PT_VAL_QI_NOT_FAIL_NOT_REWORK_NEW'
					END

					IF @QITestResult <> 'FAIL' AND (@QITestReason = 'New' OR @QITestReason = 'Normal Rework' OR @QITestReason = 'PSI Rework')
					BEGIN
						SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'PT_VAL_QI_NOT_FAIL'
					END

					IF @QITestResult = 'FAIL' AND NOT (@QITestReason = 'New' OR @QITestReason = 'Normal Rework' OR @QITestReason = 'PSI Rework')
					BEGIN
						SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'PT_VAL_QI_NOT_REWORK_NEW'
					END

				END
				ELSE
				BEGIN

					IF @QITestResult <> 'FAIL' AND NOT (@QITestReason = 'Normal Rework' OR @QITestReason = 'PSI Rework')
					BEGIN
						SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'PT_VAL_QI_NOT_FAIL_NOT_REWORK'
					END

					IF @QITestResult <> 'FAIL' AND (@QITestReason = 'Normal Rework' OR @QITestReason = 'PSI Rework')
					BEGIN
						SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'PT_VAL_QI_NOT_FAIL'
					END

					IF @QITestResult = 'FAIL' AND NOT (@QITestReason = 'Normal Rework' OR @QITestReason = 'PSI Rework')
					BEGIN
						SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'PT_VAL_QI_NOT_REWORK'
					END

				END

			END 

		END

	END

	SELECT	@ErrorMessage
	----For Debug Purpose
	--SELECT	@PTScanInCycleNo AS PTScanInCycleNo, 
	--		@IsPTGlove AS IsPTGlove,
	--		@QCType AS QCType, 
	--		@QCTypeDescription AS QCTypeDescription, 
	--		@QITestResult AS QITestResult, 
	--		@QITestReason AS QITestReason, 
	--		@QAIProcessDateTime AS QAIProcessDateTime, 
	--		@PTProcessDateTime AS QPTrocessDateTime

END
GO
PRINT N'Altering Procedure [dbo].[USP_VAL_QCScanInProcess]...';


GO
-- =======================================================      
-- Name:             USP_VAL_QCScanInProcess      
-- Purpose:          Validate QC Scan In Process      
-- =======================================================      
-- Change History      
-- Date         Author     Comments      
-- -----        ------     -----------------------------      
-- 09/06/2020   Soon Siang SP created.      
-- 17/06/2020   Soon Siang Add QAI and QAQI Null Validation      
--         and handle 2nd QC Scan with Reason New    
-- 08/07/2020   Pang YS - Fix and by pass "Split Batch" QC batch  
-- 08/07/2020   Azrul - Bypass SP checking for surgical  
-- 16/12/2021   Azrul - PTPF to follow surgical logics.  
-- EXEC USP_VAL_QCScanInProcess 2200835298  
-- =======================================================      
ALTER PROCEDURE [dbo].[USP_VAL_QCScanInProcess]      
(      
 @SerialNumber DECIMAL      
)      
AS      
BEGIN      
 SET NOCOUNT ON;      
      
 DECLARE @ErrorMessage  NVARCHAR(MAX) = NULL,      
   @QCScanInCycleNo INT,      
   @QCType    NVARCHAR(15),      
   @QCTypeDescription NVARCHAR(30),      
   @QITestResult  NVARCHAR(10),      
   @QITestReason  NVARCHAR(50),      
   @QAIProcessDateTime DATETIME,      
   @QCProcessDateTime DATETIME,    
   @PTProcessDateTime DATETIME,  
   @IsSurgicalGlove INT = 0,  
   @serialStr NVARCHAR(20) = CAST(@SerialNumber as nvarchar(20)),
   @isPTPF INT = 0    
    
 -- Bypass SP checking for surgical  
 IF EXISTS (select 1 from DOT_FloorD365HRGLOVERPT a with (nolock) join DOT_FloorD365BO b with (nolock) on a.BthOrder = b.BthOrderId   
 where a.serialNo = @serialStr and b.prodPoolId = 'SGR' and a.IsDeleted = 0 and b.IsDeleted=0)  
 BEGIN  
 SET @IsSurgicalGlove = 1  
 END  
 -- Bypass SP checking for PTPF glove  
 select @isPTPF=(SELECT ISNULL(c.PTGLOVE, 0) FROM Batch (nolock) b LEFT JOIN AX_AVAGLOVECODETABLE_EXTENSION (NOLOCK) c ON c.GLOVECODE=b.GloveType 
 WHERE b.SerialNumber=@SerialNumber)  

 SELECT @QCScanInCycleNo = COUNT(Id) + 1      
 FROM QCYieldAndPacking WITH(NOLOCK)      
 WHERE SerialNumber = @SerialNumber AND (BatchStatus IS NULL OR BatchStatus = 'Completed')    
    
 DECLARE @QCLastBatchStatus nvarchar(50) = NULL    
 SET @QCLastBatchStatus = (SELECT TOP 1 UPPER(BatchStatus) FROM QCYieldAndPacking WITH(NOLOCK)  WHERE SerialNumber = @SerialNumber ORDER BY LastModifiedOn DESC)    
    
 -- 08/07/2020   Pang YS - Fix and by pass "Split Batch" QC batch      
 IF (@QCLastBatchStatus = 'SPLIT BATCH' OR @QCLastBatchStatus = 'QC TYPE CHANGED')    
 BEGIN    
 SET @ErrorMessage = NULL    
 END      
 ELSE IF @QCScanInCycleNo = 1      
 BEGIN      
      
  IF NOT EXISTS (SELECT TOP 1 1 FROM QAI WITH(NOLOCK) WHERE SerialNumber = @SerialNumber)      
  BEGIN      
   SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'QAI_RESULT_NOT_FOUND'      
  END      
  ELSE      
  BEGIN      
      
   SELECT TOP 1      
    @QCType = qai.QCTYPE,      
    @QCTypeDescription = qctype.DESCRIPTION      
   FROM QAI qai WITH(NOLOCK)      
   LEFT JOIN DOT_FSQCTypeTable qctype WITH(NOLOCK)      
    ON qai.QCType = qctype.QCTYPE      
   WHERE SerialNumber = @SerialNumber      
   ORDER BY QAIDate DESC, LastModifiedDateTime DESC -- YS: Change QCType shared same QAIDate. Added LastModifiedDateTime ordering to get latest record    
        
   IF @QCType = '0006020001' AND @IsSurgicalGlove = 0 AND @isPTPF = 0-- STRAIGHT PACK & Not Surgical Glove & Not PTPF Glove     
   BEGIN       
    SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'QC_VAL_QAI_NOT_FAIL'      
   END      
      
  END      
      
 END      
 ELSE      
 BEGIN      
        
  IF NOT EXISTS (SELECT TOP 1 1 FROM QAI WITH(NOLOCK) WHERE SerialNumber = @SerialNumber AND QAIScreenName = 'ScanQITestResult')      
  BEGIN      
   SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'QAQI_RESULT_NOT_FOUND'      
  END      
  ELSE      
  BEGIN      
      
   SELECT TOP 1      
    @QITestResult = QITestResult,      
    @QITestReason = QITestReason,      
    @QAIProcessDateTime = QAIDate      
   FROM QAI WITH(NOLOCK)      
   WHERE SerialNumber = @SerialNumber      
    AND QAIScreenName = 'ScanQITestResult'      
   ORDER BY QAIDate DESC      
      
   SELECT TOP 1      
    @QCProcessDateTime = BatchStartTime         FROM QCYieldAndPacking WITH(NOLOCK)      
   WHERE SerialNumber = @SerialNumber      
   ORDER BY BatchStartTime DESC      
    
   --SELECT TOP 1    
   -- @PTProcessDateTime = LastModifiedOn    
   --FROM PTScanBatchCard WITH (NOLOCK)    
   --WHERE SerialNumber = @SerialNumber      
   --ORDER BY LastModifiedOn DESC    
    
      
   IF @QAIProcessDateTime < @QCProcessDateTime      
   BEGIN      
    SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'QC_VAL_DOUBLE_SCAN'      
   END      
   ELSE      
   BEGIN      
      
    IF @QITestResult <> 'FAIL'       
    BEGIN      
  --   -- to skip PTQI PASS    
  ---- test case: online batch (non sp) > QC process > QCQI (pass, SOBC post) > QAI change QC type (PT)> washer & dryer > Scan PT BC (SPBC post) > PT QI (Quick visual, Pass, RWKCR post)    
  ----            > Scan in QC (system should not block). NGC after PT process cannot do Final Packing , mandatory complete QC    
  --IF NOT (@PTProcessDateTime IS NOT NULL AND @QITestResult = 'Pass'    
  --  AND @QAIProcessDateTime > @PTProcessDateTime AND @PTProcessDateTime > @QCProcessDateTime)    
  --BEGIN    
  SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'QC_VAL_QI_NOT_FAIL'    
  --END     
    END      
    ELSE      
    BEGIN      
      
     IF @QCScanInCycleNo = 2      
     BEGIN      
            
      IF NOT (@QITestReason = 'New' OR @QITestReason = 'Normal Rework' OR @QITestReason = 'PSI Rework')      
      BEGIN      
       SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'QC_VAL_QI_NOT_REWORK'      
      END      
      
     END      
     ELSE      
     BEGIN      
      
      IF NOT (@QITestReason = 'Normal Rework' OR @QITestReason = 'PSI Rework')      
      BEGIN      
       SELECT TOP 1 @ErrorMessage = MessageText FROM MessageMaster WITH(NOLOCK) WHERE MessageKey = 'QC_VAL_QI_NOT_REWORK'      
      END      
      
     END      
      
    END      
   END      
      
  END      
      
 END      
      
 SELECT @ErrorMessage      
 ----For Debug Purpose      
 --SELECT @QCScanInCycleNo AS QCScanInCycleNo,       
 --  @QCType AS QCType,       
 --  @QCTypeDescription AS QCTypeDescription,       
 --  @QITestResult AS QITestResult,       
 --  @QITestReason AS QITestReason,       
 --  @QAIProcessDateTime AS QAIProcessDateTime,       
 --  @QCProcessDateTime AS QCProcessDateTime      
      
END
GO
PRINT N'Creating Procedure [dbo].[DOT_GetSP_WHO2SP_REAL]...';


GO


CREATE   Procedure [dbo].[DOT_GetSP_WHO2SP_REAL]
as 

create table #temp (x varchar(100), y int, s varchar(1000), id int
identity (1,1))

create table #temp_SP_WHO2(
	[SPID] [int] NULL,
	[Status] [varchar](255) NULL,
	[Login] [varchar](255) NULL,
	[HostName] [varchar](255) NULL,
	[BlkBy] [varchar](255) NULL,
	[DBName] [varchar](255) NULL,
	[Command] [varchar](255) NULL,
	[CPUTime] [int] NULL,
	[DiskIO] [int] NULL,
	[LastBatch] [varchar](255) NULL,
	[ProgramName] [varchar](255) NULL,
	[SPID2] [int] NULL,
	[REQUESTID] [int] NULL,
	[RunTime] [datetime] NULL
) 

INSERT into dbo.DOT_dpa_sp_who2_real(SPID,Status,Login,HostName,BlkBy,DBName,Command,CPUTime,DiskIO,LastBatch,ProgramName,SPID2,requestid)
 EXEC sp_who2 

 INSERT into #temp_SP_WHO2(SPID,Status,Login,HostName,BlkBy,DBName,Command,CPUTime,DiskIO,LastBatch,ProgramName,SPID2,requestid)
 EXEC sp_who2 

Declare @spid varchar(10)
Declare @Statement varchar(8000)
declare @sql varchar(1000)
DECLARE SpidCursor Cursor 
 FOR Select spid from #temp_SP_WHO2
OPEN SpidCursor
FETCH NEXT FROM SpidCursor
INTO @spid
WHILE @@FETCH_STATUS = 0
BEGIN
 SET @sql = 'dbcc inputbuffer (' + @spid + ')'
 insert into #temp
 exec (@sql)
 Insert Into dbo.DOT_dpa_SqlStatement_real (spid, statement)
 Select @spid, s From #Temp where id = (Select max(id) from #Temp)
 FETCH NEXT FROM SpidCursor
 INTO @spid
END
Close SpidCursor
Deallocate SpidCursor

Drop Table #Temp
Drop Table #temp_SP_WHO2
GO
PRINT N'Creating Procedure [dbo].[InsertEwPostingLog]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- exec [InsertScannedPalletID] 'ABC123','2018-01-03'
CREATE PROCEDURE [dbo].[InsertEwPostingLog]
(
	@PlantNo                 NVARCHAR (MAX),
    @PalletId                NVARCHAR (50),
    @EwarenaviLog            NVARCHAR (MAX),
    @EwarenaviStartPostTime  DATETIME2 (7),
    @PalletSerialNo          UNIQUEIDENTIFIER,
    @IsEwarenaviPosted       BIT
)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

INSERT INTO [dbo].[DOT_EwPostingLog]
           ([PlantNo]
           ,[PalletId]
           ,[EwarenaviLog]
           ,[EwarenaviStartPostTime]
           ,[PalletSerialNo]
           ,[IsEwarenaviPosted]
           ,[CreationTime]
           ,[IsDeleted])
     VALUES
           (@PlantNo
           ,@PalletId
           ,@EwarenaviLog
           ,@EwarenaviStartPostTime
           ,@PalletSerialNo
           ,@IsEwarenaviPosted
           ,getdate()
           ,0);

END
GO
PRINT N'Creating Procedure [dbo].[InsertScannedPalletID]...';


GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- exec [InsertScannedPalletID] 'ABC123','2018-01-03'
CREATE PROCEDURE [dbo].[InsertScannedPalletID]
	-- Add the parameters for the stored procedure here
	@PalletID		varchar(50),
	@FromPlant		varchar(5),
	@DateScanned	datetime,
	@ScannedBy		varchar(400),
	@MachineName	varchar(400)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	if (@PalletID = 'E200001620050135148082EB')
	begin
		Insert into FGReceivedPallet(PalletID,FromPlant, DateScanned, IsProcessed, ScannedBy, MachineName)--,Test)
		values(@PalletID, @FromPlant, 'ABC', 0, @ScannedBy, @MachineName)--, 'ABC;')
	end
	else
	begin
		Insert into FGReceivedPallet(PalletID,FromPlant, DateScanned, IsProcessed, ScannedBy, MachineName)--,Test)
		values(@PalletID, @FromPlant, @DateScanned, 0, @ScannedBy, @MachineName)--, 'ABC;')
	end

END
GO
PRINT N'Creating Procedure [dbo].[USP_BalanceGloveQty_Get]...';


GO
 --=========================================================    
 --Name:   USP_BalanceGloveQty_Get  
 --Purpose:   Get Balance Glove Quantity by Batch Order No   
 --=========================================================    
 --Change History    
 --Date    Author   Comments    
 -------   ------   ----------------------------------------    
 --21/05/2018  Azrul Amin    SP created.    
 -- exec USP_BalanceGloveQty_Get 'HSBBON000000028'
 --=========================================================    
CREATE PROCEDURE [dbo].[USP_BalanceGloveQty_Get]    
(   
 @BatchOrder varchar(150)    
)   
AS     
BEGIN   
 SET NOCOUNT ON;  

 SELECT a.*
 into #tempBO FROM
 ( SELECT bo.QtySched,
		ISNULL(hr.GloveReportedQty,0) + ISNULL(on2g.GloveReportedQty,0) + ISNULL(cg.GloveReportedQty,0) as GloveReportedQty
		FROM DOT_FloorD365BO AS bo WITH (NOLOCK) LEFT JOIN 

		--GloveReportedQty
		(SELECT b.BthOrder, ISNULL(SUM(b.PackingSz * b.InBox),0) as GloveReportedQty
		FROM DOT_FloorD365HRGLOVERPT b WITH (NOLOCK)
		GROUP BY b.BthOrder) as hr on hr.BthOrder = bo.BthOrderId LEFT JOIN
		
		--Online2GReportedQty
		(SELECT b.BatchOrder, ISNULL(SUM(b.PackingSize * b.InnerBox),0) as GloveReportedQty
		FROM DOT_FloorD365Online2G b WITH (NOLOCK)
		GROUP BY b.BatchOrder) as on2g on on2g.BatchOrder = bo.BthOrderId LEFT JOIN
		
		--ChengeGloveReportedQty
		(SELECT a.OldBatchOrder, ISNULL(SUM(b.PackingSz * b.InBox),0) as GloveReportedQty
		FROM ChangeGloveHistory a with (nolock) JOIN DOT_FloorD365HRGLOVERPT b with (nolock)
		on a.SerialNumber = b.SerialNo
		GROUP BY a.OldBatchOrder) as cg on cg.OldBatchOrder = bo.BthOrderId

		WHERE bo.ReworkBatch = 'No' and bo.IsDeleted = 0
		and bo.BthOrderId = @BatchOrder
	) a

	select CASE when (a.QtySched - a.GloveReportedQty) < 0 Then 0 Else a.QtySched - a.GloveReportedQty end AS RemainingQty from #tempBO a 
	drop table #tempBO
END
GO
PRINT N'Creating Procedure [dbo].[usp_BatchStatus_GetSummary]...';


GO

-- ======================================================================================================    
-- Author		=	  Pang Yik Siu
-- Create date	=	  25 Nov 2019
-- Description	=	  Batch Status - to fine tune EF performance issue (> 1min 20 s)
-- exec [dbo].[usp_BatchStatus_GetSummary]
-- =======================================================================================================    

CREATE PROCEDURE [dbo].[usp_BatchStatus_GetSummary]
AS
BEGIN
	SELECT  FunctionIdentifier AS [FunctionId], ProcessingStatus AS [Status] ,COUNT(1) AS [Count]
	FROM DOT_FloorAxIntParentTable WITH(nolock)--, INDEX(IX_DOT_FloorAxIntParentTable_FunctionIdentifier))
	WHERE IsMigratedFromAX6=0 AND IsDeleted = 0
	GROUP BY FunctionIdentifier, ProcessingStatus
END
GO
PRINT N'Creating Procedure [dbo].[usp_CalcRWKCRAdjustmentQty]...';


GO



CREATE Procedure [dbo].[usp_CalcRWKCRAdjustmentQty]
AS 
DECLARE  @imax INT, @i INT 	
DECLARE @RWKCRError TABLE
			(
			  RowID							INT    IDENTITY ( 1 , 1 ), 
			  SerialNumber					nvarchar(40),
			  Warehouse						nvarchar(40),
			  Batch							nvarchar(40),
			  [Location]					nvarchar(40),
			  ItemNumber					nvarchar(40),
			  Size							nvarchar(40),
			  Quantity						int,
			  CurrentSeq					int
			)

		Insert Into @RWKCRError (SerialNumber,Warehouse,ItemNumber,Size, Quantity,CurrentSeq)
		Select  A.BatchNumber, B.Warehouse, B.ItemNumber, B.Configuration, B.Quantity, A.Sequence
		From DOT_FloorAxIntParentTable A with(nolock) Join DOT_RwkBatchOrderCreationChildTable B with(nolock)
		On A.id = B.ParentRefRecId
		Where A.FunctionIdentifier='RWKCR' and A.ProcessingStatus=4 --and Warehouse='P1-PROD'

		Update @RWKCRError 
		Set [Location]	= 
		CASE 
			WHEN Warehouse like '%QAI%' THEN 'QAI' 
			WHEN Warehouse like '%PROD%' THEN 'PN' 
		END

		Declare @TMPStagingID			int
		Declare @TMPFunctionalIdentifier nvarchar(40) 
		SET @imax = @@ROWCOUNT

		print @imax
		SET @i = 1 
		WHILE (@i <= @imax) 
		BEGIN 
				Select @TMPFunctionalIdentifier = FunctionIdentifier From DOT_FloorAxIntParentTable A with(nolock) 
				Where A.ProcessingStatus=4 and (  A.FunctionIdentifier like 'PV%' OR  A.FunctionIdentifier like 'PW%')
				and A.BatchNumber = (Select SerialNumber From  @RWKCRError Where RowID = @i)
				and A.Sequence < ( Select CurrentSeq From  @RWKCRError Where RowID = @i)

				Update @RWKCRError Set Batch = @TMPFunctionalIdentifier Where RowID= @i
				--Select SerialNumber From  @RWKCRError Where RowID = @i
				-- Select CurrentSeq From  @RWKCRError Where RowID = @i
				--	print @TMPFunctionalIdentifier
				
				SET @i = @i + 1 
		END
		Update @RWKCRError 
		Set Batch	= 
		CASE 
			WHEN Batch like 'PWT%' THEN 'WET' 
			WHEN Batch like '%PVT%' THEN 'DRY' 
		END

		Select * from @RWKCRError
GO
PRINT N'Creating Procedure [dbo].[usp_ChangeBatchCardForInner_SaveCBCI]...';


GO
  
  
-- =============================================  
-- Name:   usp_ChangeBatchCardForInner_SaveV2  
-- Purpose:   Change batch card for inner V2  
-- =============================================  
-- Change History  
-- Date    Author   Comments  
-- -----   ------   -----------------------------  
-- 11/07/2014  srikanth B  SP created.  
-- 21/03/2017 azman k   V2  
-- 08/05/2017 azman k   backward compatibility  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_ChangeBatchCardForInner_SaveCBCI]  
 -- Add the parameters for the stored procedure here  
 (   
  @InternalLotNumber nvarchar(15),  
  @GroupId int,  
  @LocationId int,  
  @PackSize int,  
  
  @SerialNumber1 numeric(10), --mandatory  
  @SerialNumber1Qty int,--mandatory  
  @SerialNumber1Inner int,   
  
  @SerialNumber2 numeric(10) = 0,  
  @SerialNumber3 numeric(10) = 0,   
  @SerialNumber2Inner int = 0,    
  @SerialNumber2Qty int = 0,  
  @SerialNumber3Inner int = 0,  
  @SerialNumber3Qty int = 0   
 )  
AS  
BEGIN  
BEGIN TRANSACTION;  
 BEGIN TRY  
  
 DECLARE @OldSerialNumber numeric(10)  
 DECLARE @packedPcs int  
 DECLARE @boxesPacked int  
 DECLARE @Innerboxcapacity int  
 DECLARE @FPRecId int  
 DECLARE @CasesPerBox int  
 DECLARE @cbciRecId int  
 DECLARE @newSerial numeric(10)  
 DECLARE @newSerialQty int  
  
 SELECT @OldSerialNumber = serialnumber from FinalPackingBatchInfo where InternalLotNumber = @InternalLotNumber  
 SELECT @boxesPacked =  BoxesPacked from FinalPacking where internallotnumber = @InternalLotNumber  
  
 SELECT @Innerboxcapacity = innerboxcapacity from purchaseorderitem POI  
 join Finalpacking FP on FP.ponumber = POI.Ponumber and FP.ItemNumber = POI.ItemNumber and FP.Size = POI.ItemSize  
 where FP.internallotnumber = @InternalLotNumber  
  
 SELECT @CasesPerBox = CaseCapacity from purchaseorderitem POI  
 join Finalpacking FP on FP.ponumber = POI.Ponumber and FP.ItemNumber = POI.ItemNumber and FP.Size = POI.ItemSize  
 where FP.internallotnumber = @InternalLotNumber  
  
 SET @packedpcs = @boxespacked * @innerboxcapacity  
    
 BEGIN  
  UPDATE batch set PackedPcs = isnull(PackedPcs,0) - @packedpcs where serialnumber = @OldSerialNumber    
  SELECT @cbciRecId = ChangeBatchCardId FROM [FPChangeBatchCard] WHERE InternalLotNumber = @InternalLotNumber ORDER BY LastModifiedOn ASC  
  
  Select NewSerialNumber, TotalPcs  
  into #FPLine   
  from [FPChangeBatchCardLine]  
  where [ChangeBatchCardId] = @cbciRecId  
  
  while exists (select * from #FPLine)  
  begin  
   select top 1 @newSerial = NewSerialNumber, @newSerialQty = TotalPcs from #FPLine ORDER BY NewSerialNumber  
   UPDATE batch set PackedPcs = isnull(PackedPcs,0) - @newSerialQty where serialnumber = @newSerial  
   SELECT @newSerial, @newSerialQty  
   select top 1 * from #FPLine ORDER BY NewSerialNumber  
   DELETE FROM #FPLine WHERE NewSerialNumber = @newSerial  
  end  
  
  drop table #FPLine  
  
 END  
  
 UPDATE batch set PackedPcs = isnull(PackedPcs,0) + @SerialNumber1Qty where serialnumber = @SerialNumber1  
  
 BEGIN  
  
  INSERT INTO FPChangeBatchCard (InternalLotNumber,OldSerialNumber,NewSerialNumber,QCGroupId,LocationId,LastModifiedOn, TotalPcs, TotalInner)  
  VALUES (@InternalLotNumber,@OldSerialNumber,NULL,@GroupId,@LocationId,GETDATE(), @packedpcs, @boxespacked)  
  
  SET @FPRecId = scope_identity();  
  
 END  
  
 INSERT INTO [FPChangeBatchCardLine] (OldSerialNumber,NewSerialNumber,TotalPcs,TotalInner, ChangeBatchCardId)  
  VALUES (@OldSerialNumber, @SerialNumber1, @SerialNumber1Qty, @SerialNumber1Inner, @FPRecId)  
   
 BEGIN  
  UPDATE TOP (1) Finalpackingbatchinfo SET SerialNumber = @SerialNumber1, BoxesPacked = @SerialNumber1Inner where internallotnumber = @internalLotnumber  
  DELETE FROM Finalpackingbatchinfo WHERE internallotnumber = @internalLotnumber AND SerialNumber != @SerialNumber1  
 END  
  
  
 IF (@SerialNumber2Qty > 0)  
 BEGIN  
  
  UPDATE batch set PackedPcs = ISNULL(PackedPcs,0) + @SerialNumber2Qty where serialnumber = @SerialNumber2  
  INSERT INTO [FPChangeBatchCardLine] (OldSerialNumber,NewSerialNumber,TotalPcs,TotalInner, ChangeBatchCardId)  
   VALUES (@OldSerialNumber, @SerialNumber2, @SerialNumber2Qty, @SerialNumber2Inner, @FPRecId)  
  
  DELETE FROM Finalpackingbatchinfo WHERE SerialNumber = @SerialNumber2 AND [InternalLotNumber] = @InternalLotNumber  
  INSERT INTO Finalpackingbatchinfo (SerialNumber,BoxesPacked,CasesPacked,PreshipmentCasesPacked,InternalLotNumber)  
   VALUES (@SerialNumber2, @SerialNumber2Inner, 0, 0, @InternalLotNumber)  
 END  
  
 IF (@SerialNumber3Qty > 0)  
 BEGIN  
  UPDATE batch set PackedPcs = ISNULL(PackedPcs,0) + @SerialNumber3Qty where serialnumber = @SerialNumber3  
  INSERT INTO [FPChangeBatchCardLine] (OldSerialNumber,NewSerialNumber,TotalPcs,TotalInner, ChangeBatchCardId)  
   VALUES (@OldSerialNumber, @SerialNumber3, @SerialNumber3Qty, @SerialNumber3Inner, @FPRecId)  
  
  DELETE FROM Finalpackingbatchinfo WHERE SerialNumber = @SerialNumber3 AND [InternalLotNumber] = @InternalLotNumber  
  INSERT INTO Finalpackingbatchinfo (SerialNumber,BoxesPacked,CasesPacked,PreshipmentCasesPacked,InternalLotNumber)  
   VALUES (@SerialNumber3, @SerialNumber3Inner, 0, 0, @InternalLotNumber)  
 END  
  
END TRY  
 BEGIN CATCH  
  SELECT   
   ERROR_NUMBER() AS ErrorNumber  
   ,ERROR_SEVERITY() AS ErrorSeverity  
   ,ERROR_STATE() AS ErrorState  
   ,ERROR_PROCEDURE() AS ErrorProcedure  
   ,ERROR_LINE() AS ErrorLine  
   ,ERROR_MESSAGE() AS ErrorMessage;  
  IF @@TRANCOUNT > 0  
   ROLLBACK TRANSACTION;  
   throw;  
 END CATCH;  
  
IF @@TRANCOUNT > 0  
  COMMIT TRANSACTION;  
END
GO
PRINT N'Creating Procedure [dbo].[USP_CheckAndUpdate_PreviousRework]...';


GO
-- =======================================================
-- Name:			[USP_CheckAndUpdate_PreviousRework]
-- Purpose: 		Get and update Previous Rework Order Staging
-- =======================================================
-- Change History
-- Date         Author     Comments
-- -----        ------     -----------------------------
-- 30/11/2020 	Max He	   SP created, get Previous Rework staging 
-- 21/07/2021	Max He	   Comment auto update complete logic as NGC1.5 console cannot direct update
-- =======================================================
CREATE PROCEDURE [dbo].[USP_CheckAndUpdate_PreviousRework]
	@SerialNumber nvarchar(100) 
AS
BEGIN	
SET NOCOUNT ON
	DECLARE @MaxRecordId int  
	DECLARE @LastServiceName nvarchar(100)  
	DECLARE @LastSequence int
  
	SELECT @MaxRecordId = max(id),@LastSequence=count(1) from AXPostingLog with(nolock) where SerialNumber=@SerialNumber;

	--NGC1.5 console cannot direct update detail staging
	/*
	-- update to complete if Previous Rework Order not start post to D365
	update a set ProcessingStatus=3
	from DOT_FloorAxIntParentTable a with(nolock)
	join DOT_RwkBatchOrderCreationChildTable b with(nolock) on a.Id=b.ParentRefRecId
	where a.ProcessingStatus not in (2,3,4) -- InProgress = 2,Completed = 3,Error = 4
	and isnull(b.ReworkOrder,'')='' and a.BatchNumber=@SerialNumber and a.[Sequence]=@LastSequence; 
	*/

	-- mark Previous Rework Order staging isRWKDeleted
	update b set isRWKDeleted=1
	from DOT_FloorAxIntParentTable a with(nolock)
	join DOT_RwkBatchOrderCreationChildTable b with(nolock) on a.Id=b.ParentRefRecId
	where a.BatchNumber=@SerialNumber and a.FunctionIdentifier='RWKCR' and a.[Sequence]=@LastSequence; 

	-- update AXPostingLog table from RWKCR to RWKCR-Del
	update AXPostingLog set ServiceName=ServiceName+'-Del' where id=@MaxRecordId and ServiceName='RWKCR';

	-- return back previous staging record
	select * 
	from DOT_FloorAxIntParentTable a with(nolock)
	left join DOT_RwkBatchOrderCreationChildTable b with(nolock) on a.Id=b.ParentRefRecId
	where a.BatchNumber=@SerialNumber and a.[Sequence]=@LastSequence;  
END
GO
PRINT N'Creating Procedure [dbo].[USP_CheckReprintLocation]...';


GO
CREATE PROCEDURE [dbo].[USP_CheckReprintLocation]
(
	   @SerialNumber NVARCHAR(3000),
	   @WorkstationID NVARCHAR(3000)
)
AS
BEGIN
	DECLARE @Plant int;
	DECLARE @ActualLocation int;

	select @Plant = LocationId from WorkStationMaster nolock where WorkstationId = @WorkstationID;
	select @ActualLocation = LocationId from Batch nolock WHERE SerialNumber=@SerialNumber 

	if(@Plant = @ActualLocation)
	begin
		SELECT 1 as isCorrectPlant, @ActualLocation as Plant
	end	
	else
	begin
		SELECT 0 as isCorrectPlant, @ActualLocation as Plant
	end
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_BatchOrderDetails_Get]...';


GO
-- =========================================================  
-- Name:   USP_DOT_BatchOrderDetails_Get 
-- Purpose:   Get Glove Batch Order details to populate grid  
-- =========================================================  
-- Change History  
-- Date    Author   Comments  
-- -----   ------   ----------------------------------------  
-- 26/02/2018  Azrul Amin    SP created.  
-- 09/01/2019  Azrul Amin    Include 2nd Grade FG in Final 
-- 22/03/2019  Muhd Khalid   Include Batch Order and Size in input   
--							 Packing Batch Order Screen.
-- 23/10/2020  Azrul Amin	 Add Surgical Glove logics.
-- 20/01/2021  Azrul Amin	 Add Online 2G calculation.
-- 20/03/2021  Azrul Amin	 SP Fine Tune.
-- 08/04/2021  Azrul Amin	 FGBO Surgical to match SO & BO size. 
-- 01/07/2021  Azrul Amin	 Cater Plant10 and onwards. 
-- 26/12/2021  Azrul Amin	 HTLG_HSB_002: Special Glove (Clean Room Product)
-- =========================================================  
--exec USP_DOT_BatchOrderDetails_Get 'Glove','p6','HSBBON000000028'

CREATE PROCEDURE [dbo].[USP_DOT_BatchOrderDetails_Get]   
( 
 @ProdPoolID varchar(100),
 @PlantNo varchar(10),
 @BatchOrderId varchar(200) = null,
 @Size	varchar(10) = null
) 
AS  
BEGIN   
 SET NOCOUNT ON;  
 IF (@ProdPoolID = 'FG')
 BEGIN
	DECLARE @ProdPoolIDs varchar(100) 
	SET @ProdPoolIDs = 'FG,2FG'
    SET @ProdPoolID = ',' + @ProdPoolIDs + ','
 END
 ELSE
 BEGIN
    SET @ProdPoolID = ',' + @ProdPoolID + ','
 END

 SELECT a.*
 into #tempBO FROM
 ( SELECT bo.BatchId,bo.SchedStart,bo.SchedFromTime,bo.BthOrderId,bo.ItemId,bo.Size,bo.QtySched,bo.ProdPoolId,bo.ProdStatus,bo.SchedEnd,bo.SchedToTime,
		st.SalesId,st.CustomerRef, 
		res.BatchOrderId,res.ResourceGrp, res.Resource
		,ISNULL(hr.GloveReportedQty,0) + ISNULL(on2g.GloveReportedQty,0) + ISNULL(cg.GloveReportedQty,0) as GloveReportedQty
		,ISNULL(fg.FGReportedQty,0) as FGReportedQty 
		FROM
		DOT_FloorD365BO AS bo WITH (NOLOCK) LEFT JOIN 
		DOT_FloorD365BOResource AS res WITH (NOLOCK) ON bo.BthOrderId = res.BatchOrderId and res.IsDeleted=0 LEFT JOIN
		DOT_FloorSales AS st WITH (NOLOCK) ON  bo.BatchId = st.CustomerRef AND st.IsDeleted = 0 LEFT JOIN

		--GloveReportedQty
		(SELECT b.BthOrder, ISNULL(SUM(b.PackingSz * b.InBox),0) as GloveReportedQty
		FROM DOT_FloorD365HRGLOVERPT b WITH (NOLOCK)
		where b.Plant = @PlantNo
		GROUP BY b.BthOrder) as hr on hr.BthOrder = bo.BthOrderId LEFT JOIN
		
		--Online2GReportedQty
		(SELECT b.BatchOrder, ISNULL(SUM(b.PackingSize * b.InnerBox),0) as GloveReportedQty
		FROM DOT_FloorD365Online2G b WITH (NOLOCK)
		where b.Plant = @PlantNo
		GROUP BY b.BatchOrder) as on2g on on2g.BatchOrder = bo.BthOrderId LEFT JOIN
		
		--ChengeGloveReportedQty
		(SELECT a.OldBatchOrder, ISNULL(SUM(b.PackingSz * b.InBox),0) as GloveReportedQty
		FROM ChangeGloveHistory a with (nolock) JOIN DOT_FloorD365HRGLOVERPT b with (nolock)
		on a.SerialNumber = b.SerialNo
		where b.Plant = @PlantNo
		GROUP BY a.OldBatchOrder) as cg on cg.OldBatchOrder = bo.BthOrderId LEFT JOIN

		--FGReportedQty
		(SELECT sum(fp.CasesPacked) as FGReportedQty,bo2.BthOrderId from finalpacking FP WITH (NOLOCK)       
		join purchaseorderitem POIN WITH (NOLOCK) on POIN.ponumber = FP.ponumber and POIN.Itemnumber = FP.itemnumber and FP.Size = POIN.ItemSize      
		join DOT_FloorD365BO bo2 WITH (NOLOCK) on bo2.BthOrderId = fp.FGBatchOrderNo and bo2.IsDeleted=0 AND bo2.Size = POIN.CustomerSize 
		WHERE bo2.ProdStatus IN ('ReportedFinished','StartedUp','Released')   
        --and fp.Resource = @PlantNo + '-FP' -- 6 seconds add resource filter -- remove for HSB can cross plant
		group by bo2.BthOrderId) as fg on fg.BthOrderId = bo.BthOrderId    

		where PATINDEX('%,' + ProdPoolId + ',%', @ProdPoolID) > 0 and bo.ProdStatus IN ('ReportedFinished','Released','StartedUp')
		AND bo.ReworkBatch = 'No' AND res.IsDeleted = 0 and bo.IsDeleted = 0
		AND @PlantNo = dbo.UDF_DOT_GetPlantfromResourceGrp(res.ResourceGrp)
	) a

	select a.SchedStart,
	DATEADD(hour, DATEDIFF(hour,0,a.SchedFromTime), 0) as SchedFromTime,a.BthOrderId,
	ISNULL(STUFF((SELECT ', ' + c.SalesId + ' (' + c.CustomerRef + ')'  FROM #tempBO c
				WHERE c.BthOrderId = a.BthOrderId
				FOR XML path('') ), 1, 2, ''),a.BatchId) 
			AS SalesOrder,
	a.ItemId,a.Size,a.QtySched
	,CASE WHEN a.ProdPoolId IN ('Glove','SGR') THEN a.GloveReportedQty ELSE FGReportedQty
	 END AS ReportedQty
	,CASE WHEN a.ProdPoolId IN ('Glove','SGR') AND (a.QtySched - a.GloveReportedQty) <= 0 THEN 0 
		  WHEN a.ProdPoolId IN ('Glove','SGR') AND (a.QtySched - a.GloveReportedQty) > 0 THEN (a.QtySched - a.GloveReportedQty) 
		  WHEN a.ProdPoolId = 'FG' AND (a.QtySched - a.GloveReportedQty) <= 0 THEN 0 
	 ELSE a.QtySched - a.FGReportedQty
	 END AS RemainingQty
	,STUFF((SELECT distinct ', ' + c.ResourceGrp
		FROM #tempBO c  
		WHERE c.BatchOrderId = a.BatchOrderId FOR XML path('')), 1, 2, '') AS ResourceGrp
	,STUFF((SELECT ', ' + c.Resource
		FROM #tempBO c 
		WHERE c.BatchOrderId = a.BatchOrderId FOR XML path('') ), 1, 2, '') AS Resource
		,ProdPoolId,CASE WHEN ProdStatus = 'StartedUp' THEN 'Started' ELSE ProdStatus END AS ProdStatus,SchedEnd
		,DATEADD(hour, DATEDIFF(hour,0,SchedToTime), 0) as SchedToTime
		from #tempBO a 
		where  a.BthOrderId = isnull(@BatchOrderId,a.BthOrderId) and a.Size = isnull(@Size,a.Size)
		Group by a.SchedStart,a.SchedFromTime,a.BthOrderId,a.BatchId,a.ItemId,a.Size,a.QtySched,a.BatchOrderId,a.ProdPoolId,a.ProdStatus,a.SchedEnd,a.SchedToTime,
		a.GloveReportedQty
		,a.FGReportedQty
	drop table #tempBO
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_BatchOrderMTSDetails_Get]...';


GO
-- =========================================================================      
-- Name:   USP_DOT_BatchOrderMTSDetails_Get      
-- Purpose:   Get MTS Batch Order details from master grid selection      
-- =========================================================================        
-- Change History        
-- Date    Author   Comments        
-- -----   ------   --------------------------------------------------------        
-- 10/02/2022  Azrul Amin    SP created.    
-- =========================================================================        
CREATE PROCEDURE [dbo].[USP_DOT_BatchOrderMTSDetails_Get]        
(       
 @BatchOrderNo varchar(150)
)       
AS        
BEGIN         
 SET NOCOUNT ON;     
  
 SELECT AlternateGloveCode1, AlternateGloveCode2, AlternateGloveCode3, DOTCustomerLotID, Expiry, GCLabel, GlovesInnerboxNo,
		GrossWeight, HartalegaCommonSize, InnerDateFormat, InnerLabelSet, InnerProductCode, InnerboxinCaseNo, LotVerification,
		ManufacturingDateOn, NetWeight, OuterDateFormat, OuterLabelSetNo, OuterProductCode, PalletCapacity, PreShipmentPlan,
		PrintingSize, Reference1, Reference2, SpecialInnerCharacter, SpecialInnerCode, WarehouseId, 
		case when MadeToStockStatus = 0 and WarehouseId = 'MTS-FG' then 'Open'
			 when MadeToStockStatus = 1 and WarehouseId = 'MTS-FG' then 'Approved'
		else 'None' end as MadeToStockStatus
 FROM DOT_FloorD365BO WITH (NOLOCK) WHERE BthOrderId = @BatchOrderNo
  
 SET NOCOUNT OFF;        
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_BatchOrderPrintDetails_Get]...';


GO
-- =========================================================================    
-- Name:   USP_DOT_BatchOrderPrintDetails_Get    
-- Purpose:   Get Glove Batch Order print details from master grid selection    
-- =========================================================================      
-- Change History      
-- Date    Author   Comments      
-- -----   ------   --------------------------------------------------------      
-- 26/06/2018  Azrul Amin    SP created.  
-- 22/10/2020  Azrul Amin    Include Surgical logic.  
-- 02/02/2021  Azrul Amin    Include ON2G.  
-- 27/12/2021  Azrul Amin    HTLG_HSB_002:Special Glove (Clean Room Product) 
-- =========================================================================      
CREATE PROCEDURE [dbo].[USP_DOT_BatchOrderPrintDetails_Get]      
(     
 @BatchOrderNo varchar(150),    
 @PlantNo varchar(10)  
)     
AS      
BEGIN       
 SET NOCOUNT ON;   

 SELECT SerialNo AS SerialNumber, BthOrder AS BatchNumber, Resource, PackingSz AS PackingSize, InBox AS InnerBox,   
 PackingSz*InBox AS ReportedQty, PackingSz*InBox AS TotalQty, OutTime AS OutputTime, 'Reprint' AS ReprintHBC   
 FROM DOT_FloorD365HRGLOVERPT with (nolock)   
 WHERE BthOrder = @BatchOrderNo AND Plant = @PlantNo   

 UNION ALL  

 SELECT FORMAT(SerialNumber,'0000000000') AS SerialNumber, BatchOrder as BatchNumber, Resource, PackingSize, InnerBox,   
 PackingSize*InnerBox AS ReportedQty, PackingSize*InnerBox AS TotalQty, CurrentDateandTime AS OutputTime, 'Reprint' AS ReprintHBC   
 FROM DOT_FloorD365Online2G with (nolock)   
 WHERE BatchOrder = @BatchOrderNo AND Plant = @PlantNo   

 UNION ALL

 select a.SerialNumber, a.OldBatchOrder AS BatchNumber, b.Resource,b. PackingSz AS PackingSize, b.InBox AS InnerBox,   
 b.PackingSz*b.InBox AS ReportedQty, b.PackingSz*b.InBox AS TotalQty, b.OutTime AS OutputTime, 'Changed Glove' AS ReprintHBC   
 from ChangeGloveHistory a with (nolock) JOIN DOT_FloorD365HRGLOVERPT b with (nolock)
 on a.SerialNumber = b.SerialNo
 WHERE a.OldBatchOrder = @BatchOrderNo AND Plant = @PlantNo     

 ORDER BY OutputTime DESC    

 SET NOCOUNT OFF;      
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_BatchOrderShift_Get]...';


GO
-- =====================================================================  
-- Name:   USP_DOT_BatchOrderShift_Get
-- Purpose:   Get Batch Order Shift details to Glove Output selection  
-- =====================================================================  
-- Change History  
-- Date    Author   Comments  
-- -----   ------   ----------------------------------------------------  
-- 13/03/2018  Azrul Amin    SP created.  
-- =====================================================================  
--IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_DOT_BatchOrderShift_Get]') AND type in (N'P', N'PC'))
--DROP PROCEDURE [dbo].[USP_DOT_BatchOrderShift_Get]
--GO
CREATE PROCEDURE [dbo].[USP_DOT_BatchOrderShift_Get]  
(  
@Area varchar(100)
)  
AS  
BEGIN  
SELECT ShiftId,Name FROM ShiftMaster WHERE GroupType=@Area  
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_BatchStatusDashboard]...';


GO
-- ==================================================================================================================================================    
-- Name: USP_DOT_BatchStatusDashboard  
-- Purpose: Status for the Dashboard.   
-- ==================================================================================================================================================    
-- Change History    
-- Date			Author     Comments    
-- -----		--------   ------------------------------------------------------------  
-- 2021/10/14   Ryan Yam   SP created.    
-- ==================================================================================================================================================   
-- exec USP_DOT_BatchStatusDashboard
-- ==================================================================================================================================================

CREATE     PROCEDURE [dbo].[USP_DOT_BatchStatusDashboard]  

AS
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from    
 -- interfering with SELECT statements.    
 SET NOCOUNT ON;

	IF OBJECT_ID('tempdb..#TempStaging') IS NOT NULL  
	DROP TABLE #TempStaging
	IF OBJECT_ID('tempdb..#NotStarted') IS NOT NULL  
	DROP TABLE #NotStarted 
	IF OBJECT_ID('tempdb..#Ready') IS NOT NULL  
	DROP TABLE #Ready
	IF OBJECT_ID('tempdb..#InProgress') IS NOT NULL  
	DROP TABLE #InProgress
	IF OBJECT_ID('tempdb..#Completed') IS NOT NULL  
	DROP TABLE #Completed
	IF OBJECT_ID('tempdb..#Error') IS NOT NULL  
	DROP TABLE #Error
	IF OBJECT_ID('tempdb..#OnHold') IS NOT NULL  
	DROP TABLE #OnHold
	IF OBJECT_ID('tempdb..#OutOfPeriod') IS NOT NULL  
	DROP TABLE #OutOfPeriod

	select *
	into #TempStaging 
	from dbo.UFN_DOT_GetAllSummary()

	-- 4 rows
	select FunctionIdentifier, count(ProcessingStatus) as NotStarted
	into #NotStarted
	from  #TempStaging with (nolock) 
	WHERE ProcessingStatus = 0
	group by FunctionIdentifier

	-- 12 rows
	select FunctionIdentifier, count(ProcessingStatus) as Ready
	into #Ready
	from  #TempStaging with (nolock) 
	WHERE ProcessingStatus = 1
	group by FunctionIdentifier

	-- 0 row
	select FunctionIdentifier, count(ProcessingStatus) as InProgress
	into #InProgress
	from  #TempStaging with (nolock) 
	WHERE ProcessingStatus = 2
	group by FunctionIdentifier

	-- 20 row
	select FunctionIdentifier, count(ProcessingStatus) as Completed
	into #Completed
	from  #TempStaging with (nolock) 
	WHERE ProcessingStatus = 3
	group by FunctionIdentifier

	-- 0 row
	select FunctionIdentifier, count(ProcessingStatus) as Error
	into #Error
	from  #TempStaging with (nolock) 
	WHERE ProcessingStatus = 4
	group by FunctionIdentifier

	-- 0 row
	select FunctionIdentifier, count(ProcessingStatus) as OnHold
	into #OnHold
	from  #TempStaging with (nolock) 
	WHERE ProcessingStatus = 5
	group by FunctionIdentifier

	-- 3 rows
	select FunctionIdentifier, count(ProcessingStatus) as OutOfPeriod
	into #OutOfPeriod
	from  #TempStaging with (nolock) 
	WHERE ProcessingStatus = 6
	group by FunctionIdentifier 

	select distinct a.FunctionIdentifier,COALESCE(b.NotStarted, 0) as NotStarted, COALESCE(c.Ready, 0) as Ready, 
	COALESCE(d.InProgress, 0) as InProgress,COALESCE(e.Completed, 0) as Completed,COALESCE(f.Error, 0) as Error,
	COALESCE(g.OnHold, 0) as OnHold, COALESCE(h.OutOfPeriod, 0) as OutOfPeriod from #TempStaging a with (nolock) 
	LEFT JOIN #NotStarted b with (nolock)  on a.FunctionIdentifier = b.FunctionIdentifier
	LEFT JOIN #Ready c with (nolock)  on a.FunctionIdentifier = c.FunctionIdentifier
	LEFT JOIN #InProgress d with (nolock)  on a.FunctionIdentifier = d.FunctionIdentifier
	LEFT JOIN #Completed e with (nolock)  on a.FunctionIdentifier = e.FunctionIdentifier
	LEFT JOIN #Error f with (nolock)  on a.FunctionIdentifier = f.FunctionIdentifier
	LEFT JOIN #OnHold g with (nolock)  on a.FunctionIdentifier = g.FunctionIdentifier
	LEFT JOIN #OutOfPeriod h with (nolock)  on a.FunctionIdentifier = h.FunctionIdentifier
	ORDER BY a.FunctionIdentifier
	
	IF OBJECT_ID('tempdb..#TempStaging') IS NOT NULL  
	DROP TABLE #TempStaging
	IF OBJECT_ID('tempdb..#NotStarted') IS NOT NULL  
	DROP TABLE #NotStarted 
	IF OBJECT_ID('tempdb..#Ready') IS NOT NULL  
	DROP TABLE #Ready
	IF OBJECT_ID('tempdb..#InProgress') IS NOT NULL  
	DROP TABLE #InProgress
	IF OBJECT_ID('tempdb..#Completed') IS NOT NULL  
	DROP TABLE #Completed
	IF OBJECT_ID('tempdb..#Error') IS NOT NULL  
	DROP TABLE #Error
	IF OBJECT_ID('tempdb..#OnHold') IS NOT NULL  
	DROP TABLE #OnHold
	IF OBJECT_ID('tempdb..#OutOfPeriod') IS NOT NULL  
	DROP TABLE #OutOfPeriod

END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_BatchStatusDashboardByPlant]...';


GO
-- ==================================================================================================================================================    
-- Name: USP_DOT_BatchStatusDashboard ByPlant 
-- Purpose: Status for the Dashboard By Plant.   
-- ==================================================================================================================================================    
-- Change History    
-- Date			Author     Comments    
-- -----		--------   ------------------------------------------------------------  
-- 2021/11/11   Ryan Yam   SP created.    
-- ==================================================================================================================================================   
-- exec USP_DOT_BatchStatusDashboardByPlant
-- ==================================================================================================================================================

CREATE     PROCEDURE [dbo].[USP_DOT_BatchStatusDashboardByPlant]  

AS
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from    
 -- interfering with SELECT statements.    
 SET NOCOUNT ON;
	
	IF OBJECT_ID('tempdb..#TempStaging') IS NOT NULL  
	DROP TABLE #TempStaging

	DECLARE @PlantNo VARCHAR(20)
	DECLARE @FunctionIdentifier VARCHAR(20)
	DECLARE @overallTest TABLE(
		PlantNo VARCHAR(20),
		FunctionIdentifier VARCHAR(20),
		NotStarted INT,
		Ready INT,
		InProgress INT,
		Completed INT,
		Error INT,
		OnHold INT,
		OutOfPeriod INT
	);

	select *
	into #TempStaging 
	from dbo.UFN_DOT_GetAllSummary()

	DECLARE plantno_cursor CURSOR FOR 
	select distinct PlantNo from #TempStaging with (nolock)

	open plantno_cursor
	fetch NEXT from plantno_cursor INTO @PlantNo

	WHILE @@FETCH_STATUS = 0  

	BEGIN 

		DECLARE fi_cursor CURSOR FOR 
		(select FunctionIdentifier
		from  #TempStaging with (nolock) 
		WHERE PlantNo = @PlantNo
		group by FunctionIdentifier)

		open fi_cursor
		fetch NEXT from fi_cursor INTO @FunctionIdentifier

		WHILE @@FETCH_STATUS = 0  

		BEGIN

			Insert into @overallTest (PlantNo,FunctionIdentifier,NotStarted,Ready,InProgress,Completed,Error,OnHold,OutOfPeriod)
			Values(@PlantNo, @FunctionIdentifier,
			(select count(*) from #TempStaging where ProcessingStatus = 0 and FunctionIdentifier = @FunctionIdentifier and PlantNo = @PlantNo),
			(select count(*) from #TempStaging where ProcessingStatus = 1 and FunctionIdentifier = @FunctionIdentifier and PlantNo = @PlantNo),
			(select count(*) from #TempStaging where ProcessingStatus = 2 and FunctionIdentifier = @FunctionIdentifier and PlantNo = @PlantNo),
			(select count(*) from #TempStaging where ProcessingStatus = 3 and FunctionIdentifier = @FunctionIdentifier and PlantNo = @PlantNo),
			(select count(*) from #TempStaging where ProcessingStatus = 4 and FunctionIdentifier = @FunctionIdentifier and PlantNo = @PlantNo),
			(select count(*) from #TempStaging where ProcessingStatus = 5 and FunctionIdentifier = @FunctionIdentifier and PlantNo = @PlantNo),
			(select count(*) from #TempStaging where ProcessingStatus = 6 and FunctionIdentifier = @FunctionIdentifier and PlantNo = @PlantNo))
		
			FETCH NEXT FROM fi_cursor INTO @FunctionIdentifier 
		END
	
		CLOSE fi_cursor  
		DEALLOCATE fi_cursor 

		FETCH NEXT FROM plantno_cursor INTO @PlantNo 
	END

	select * from @overallTest order by PlantNo

	CLOSE plantno_cursor  
	DEALLOCATE plantno_cursor

	IF OBJECT_ID('tempdb..#TempStaging') IS NOT NULL  
	DROP TABLE #TempStaging

END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_BatcOrderMTS_Update]...';


GO
  
-- ==================================================  
-- Author:  Azrul Amin 
-- Create date: 11 Feb 2022  
-- Description: update MTS Status in Batch Order table  
-- ===================================================  
CREATE PROCEDURE  [dbo].[USP_DOT_BatcOrderMTS_Update]  
(  
 -- Add the parameters for the stored procedure here  
 @BatchOrderNo nvarchar(150),  
 @MTSStatus int,   
 @LastModifiedBy int
 )  
AS  
BEGIN  
 UPDATE DOT_FloorD365BO set MadeToStockStatus = @MTSStatus, LastModifierUserId = @LastModifiedBy, LastModificationTime = GETDATE()
 where BthOrderId = @BatchOrderNo and WarehouseId = 'MTS-FG'   

 IF @MTSStatus = 1
 BEGIN
  update a set a.LotVerification = b.LotVerification
 			  ,a.PreShipmentPlan = b.PreShipmentPlan
 			  ,a.InnerLabelSet = b.InnerLabelSet
   			  ,a.OuterLabelSetNo = b.OuterLabelSetNo
   			  ,a.PrintingSize = c.PrintingSize
   			  ,a.GrossWeight = c.GrossWeight
   			  ,a.NetWeight = c.NetWeight
   			  ,a.InnerboxinCaseNo = c.InnerboxinCaseNo
   			  ,a.PalletCapacity = b.PalletCapacity
 			  ,a.ManufacturingDateOn = b.ManufacturingDateOn
 			  ,a.HartalegaCommonSize = c.HartalegaCommonSize
 			  ,a.GlovesInnerboxNo = c.GlovesInnerboxNo
 			  ,a.InnerProductCode = c.InnerProductCode
 			  ,a.OuterProductCode = c.OuterProductCode
 			  ,a.Expiry = b.Expiry
 			  ,a.Reference1 = c.Reference1
 			  ,a.Reference2 = c.Reference2
 			  ,a.GCLabel = b.GCLabel
 			  ,a.AlternateGloveCode1 = b.AlternateGloveCode1
 			  ,a.AlternateGloveCode2 = b.AlternateGloveCode2
 			  ,a.AlternateGloveCode3 = b.AlternateGloveCode3
 			  ,a.SpecialInnerCode = b.SpecialInnerCode
 			  ,a.SpecialInnerCharacter = b.SpecialInnerCharacter
 			  ,a.InnerDateFormat = b.InnerDateFormat
 			  ,a.OuterDateFormat = b.OuterDateFormat
  
  from DOT_FloorD365BO a with (nolock) 
  join DOT_FSBrandHeaders b with (nolock) on a.ItemId = b.ItemId
  join DOT_FSBrandLines c with (nolock) on a.ItemId = c.ItemId and c.CustomerSize = a.Size
  where BthOrderId = @BatchOrderNo and a.IsDeleted = 0 and b.IsDeleted = 0 and c.IsDeleted = 0 
							
 END						
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_ConsolidationStatusReport]...';


GO
-- ==================================================================================================================================================    
-- Name: USP_DOT_ConsolidationStatusReport  
-- Purpose: Consolidation status for each FunctionIdentifier.   
-- ==================================================================================================================================================    
-- Change History    
-- Date			Author   Comments    
-- -----		------   ------------------------------------------------------------  
-- 2021/10/08   Azrul    SP created.    
-- ==================================================================================================================================================   
-- exec USP_DOT_ConsolidationStatusReport '2021-08-10 12:59:58.0650000'
-- exec USP_DOT_ConsolidationStatusReport '2021-08-10 12:59:58'
-- ==================================================================================================================================================

Create   PROCEDURE USP_DOT_ConsolidationStatusReport  
(
	@MarkingTime varchar(1000)
)

AS
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from    
 -- interfering with SELECT statements.    
 SET NOCOUNT ON;

	IF OBJECT_ID('tempdb..#TempStaging') IS NOT NULL  
	DROP TABLE #TempStaging
	IF OBJECT_ID('tempdb..#ConsolidationTime') IS NOT NULL  
	DROP TABLE #ConsolidationTime
	IF OBJECT_ID('tempdb..#PrevConsolidation') IS NOT NULL  
	DROP TABLE #PrevConsolidation
	IF OBJECT_ID('tempdb..#AfterConsolidation') IS NOT NULL  
	DROP TABLE #AfterConsolidation 
	
	--declare @MarkingTime varchar(100) = '2021-08-10 12:59:58.0650000'

	select *
	into #TempStaging
	from  DOT_FloorAxIntParentTable with (nolock) 
	where DATEADD(ms, -DATEPART(ms, ConsoleMarkingTime), ConsoleMarkingTime) = @MarkingTime
	and IsDeleted = 0 

	select FunctionIdentifier, max(consolemarkingtime) as LastMarkingDateTime, min(LastModificationTime) as FirstConsolidationDateTime, 
	max(LastModificationTime) as LastConsolidationDateTime
	into #ConsolidationTime
	from  #TempStaging
	group by FunctionIdentifier
 
	select FunctionIdentifier, count(*) as BeforeConsolidate
	into #PrevConsolidation
	from  #TempStaging
	group by FunctionIdentifier

	select FunctionIdentifier, count(*) as AfterConsolidate
	into #AfterConsolidation
	from  #TempStaging
	where ProcessingStatus = 3 
	group by FunctionIdentifier
	
	select a.FunctionIdentifier, a.LastMarkingDateTime,
	b.BeforeConsolidate, c.AfterConsolidate, (b.BeforeConsolidate - c.AfterConsolidate) as RemainingConsolidate,
	a.FirstConsolidationDateTime, a.LastConsolidationDateTime
	from #ConsolidationTime a 
	LEFT JOIN #PrevConsolidation b on a.FunctionIdentifier = b.FunctionIdentifier
	LEFT JOIN #AfterConsolidation C on b.FunctionIdentifier = c.FunctionIdentifier
	
	IF OBJECT_ID('tempdb..#TempStaging') IS NOT NULL  
	DROP TABLE #TempStaging
	IF OBJECT_ID('tempdb..#ConsolidationTime') IS NOT NULL  
	DROP TABLE #ConsolidationTime
	IF OBJECT_ID('tempdb..#PrevConsolidation') IS NOT NULL  
	DROP TABLE #PrevConsolidation 
	IF OBJECT_ID('tempdb..#AfterConsolidation') IS NOT NULL  
	DROP TABLE #AfterConsolidation 

END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_CreateFGRAFJournal]...';


GO
-- ===================================================================  
-- Author:  <Azrul Amin>  
-- Create date: <02-Feb-2018>  
-- Description: <Insert_DOT_FLOORAXINTPARENTTABLE & DOT_FGRAFSTGTABLE>  
-- =============================================
-- Change History
-- Date			Author				Comments
-- -----		------				-----------------------------
-- 28/06/2018 	Max He				Add Reference Batch Quantity & Glove Code for SMBP.
-- 15/11/2020	Azrul				Add New Fields for SPPBC.
-- 20/03/2021	Max he				Add default value to New Fields for SPPBC.
-- 15/12/2021	Max he				Add Base Qty and Glove Qty for MTS without SO.
-- ===================================================================  
CREATE PROCEDURE [dbo].[USP_DOT_CreateFGRAFJournal]  
        @BATCHORDERNUMBER nvarchar(80),
        @REFERENCEITEMNUMBER nvarchar(80),
        @CONFIGURATION nvarchar(20),  
        @WAREHOUSE nvarchar(20), 
        @RESOURCE nvarchar(20), 
        @CUSTOMERPO nvarchar(40), 
        @CUSTOMERREFERENCE nvarchar(60), 
        @SALESORDERNUMBER nvarchar(20), 
        @INNERLOTNUMBER nvarchar(90), 
        @OUTERLOTNUMBER nvarchar(90), 
        @CUSTOMERLOTNUMBER nvarchar(90), 
        @PRESHIPMENT int,
        @PRESHIPMENTCASES int,
		@POSTINGDATETIME datetime,
        @QUANTITY int,
		@PARENTREFRECID int,
		@LOCATION nvarchar(20),
		@PALLETNUMBER nvarchar(20),
		@ExpiryDate datetime,			-- TODO:add to FG Journal Table
		@ManufacturingDate datetime,	-- TODO:add to FG Journal Table
		@IsWTS bit,						-- flag to detect is from Make to Stock
		@ItemNumber	NVARCHAR (40),--Glove Code,ony apply to SBC
		@RefNumberOfPieces1      DECIMAL (10, 2),--For SMBP
		@RefNumberOfPieces2      DECIMAL (10, 2),--For SMBP
		@RefNumberOfPieces3      DECIMAL (10, 2),--For SMBP
		@RefNumberOfPieces4      DECIMAL (10, 2),--For SMBP
		@RefNumberOfPieces5      DECIMAL (10, 2),--For SMBP
		@RefItemNumber1          NVARCHAR (40),--For SMBP
		@RefItemNumber2          NVARCHAR (40),--For SMBP
		@RefItemNumber3          NVARCHAR (40),--For SMBP
		@RefItemNumber4          NVARCHAR (40),--For SMBP
		@RefItemNumber5          NVARCHAR (40),--For SMBP
		@BatchCardNumber		 NVARCHAR (50)='',		-- Surgical Packing Plan
		@BatchNumber			 NVARCHAR (20)='',		-- Surgical Packing Plan
		@PickingListQuantity	 DECIMAL (10, 2)=0.00,	-- Surgical Packing Plan
		@BatchSequence			 INT=0,				-- Surgical Packing Plan
		@GloveSize				 NVARCHAR (20)='',		-- Surgical Packing Plan
		@GloveSampleQuantity	 NVARCHAR (20)='0.00',		-- Surgical Packing Plan
		@BaseQty				 DECIMAL (10, 4)=0.00		-- For MTS without SO
AS  
BEGIN                                                                                                                                                                                                                       
 SET NOCOUNT ON;  
 INSERT INTO [dbo].[DOT_FGJournalTable]  
		([BatchOrderNumber]
		,[Configuration]
		,[CreationTime]
		--,[CreatorUserId]
		,[CustomerLotNumber]
		,[CustomerPO]
		,[CustomerReference]
		--,[DeleterUserId]
		--,[DeletionTime]
		--,[IndustryPCScanStatus]
		,[InnerLotNumber]
		,[IsDeleted]
		--,[LastModificationTime]
		--,[LastModifierUserId]
		,[OuterLotNumber]
		,[PalletNumber]
		--,[PickingListJournal]
		--,[PostToD365]
		--,[PostToeWArenavi]
		,[PostingDateTime]
		,[Preshipment]
		,[PreshipmentCases]
		,[Quantity]
		,[ReferenceItemNumber]  -- This is FG Item Code
		--,[ReportasFinishedJournal]
		,[Resource]
		,[SalesOrderNumber]
		,[Warehouse]
		,[ParentRefRecId]
		,[Location]
		,[IsWTS]				-- flag to detect is from Make to Stock
		,[ItemNumber]			-- This is Glove Code
		,[RefNumberOfPieces1]	-- Reference Batch 1 Glove Quantity
		,[RefNumberOfPieces2]	-- Reference Batch 2 Glove Quantity
		,[RefNumberOfPieces3]	-- Reference Batch 3 Glove Quantity
		,[RefNumberOfPieces4]	-- Reference Batch 4 Glove Quantity
		,[RefNumberOfPieces5]	-- Reference Batch 5 Glove Quantity
		,[RefItemNumber1]		-- Reference Batch 1 Glove code
		,[RefItemNumber2]		-- Reference Batch 2 Glove code
		,[RefItemNumber3]		-- Reference Batch 3 Glove code
		,[RefItemNumber4]		-- Reference Batch 4 Glove code
		,[RefItemNumber5]		-- Reference Batch 5 Glove code
		,[BatchCardNumber]		-- Surgical packing Plan
		,[BatchNumber]			-- Surgical packing Plan
		,[PickingListQuantity]	-- Surgical packing Plan
		,[BatchSequence]		-- Surgical packing Plan
		,[GloveSize]			-- Surgical packing Plan
		,[GloveSampleQuantity]	-- Surgical packing Plan
		,[BaseQty]				-- For MTS without SO
		,[GloveQty]				-- For MTS without SO
		)
     VALUES  
        (@BATCHORDERNUMBER
		,@CONFIGURATION
		,GETDATE()
        ,@CUSTOMERLOTNUMBER
        ,@CUSTOMERPO
        ,@CUSTOMERREFERENCE
        ,@INNERLOTNUMBER
		,0
        ,@OUTERLOTNUMBER
		,@PALLETNUMBER
		,@POSTINGDATETIME
        ,@PRESHIPMENT
        ,@PRESHIPMENTCASES
        ,@QUANTITY
        ,@REFERENCEITEMNUMBER   -- This is FG Item Code
        ,@RESOURCE
        ,@SALESORDERNUMBER
        ,@WAREHOUSE
		,@PARENTREFRECID
		,@LOCATION
		,@IsWTS					-- flag to detect is from Make to Stock
		,@ItemNumber			-- This is Glove Code
		,@RefNumberOfPieces1	-- Reference Batch 1 Glove Quantity
		,@RefNumberOfPieces2	-- Reference Batch 2 Glove Quantity
		,@RefNumberOfPieces3	-- Reference Batch 3 Glove Quantity
		,@RefNumberOfPieces4	-- Reference Batch 4 Glove Quantity
		,@RefNumberOfPieces5	-- Reference Batch 5 Glove Quantity
		,@RefItemNumber1		-- Reference Batch 1 Glove code
		,@RefItemNumber2		-- Reference Batch 2 Glove code
		,@RefItemNumber3		-- Reference Batch 3 Glove code
		,@RefItemNumber4		-- Reference Batch 4 Glove code
		,@RefItemNumber5		-- Reference Batch 5 Glove code
		,@BatchCardNumber		-- Surgical Packing Plan
		,@BatchNumber			-- Surgical Packing Plan
		,@PickingListQuantity	-- Surgical Packing Plan
		,@BatchSequence			-- Surgical Packing Plan
		,@GloveSize 			-- Surgical Packing Plan
		,@GloveSampleQuantity	-- Surgical Packing Plan
		,@BaseQty				-- For MTS without SO
		,@BaseQty * @QUANTITY)  -- For MTS without SO
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_CreateTransferJournal]...';


GO
-- =============================================
-- Author:  <Azrul Amin>  
-- Create date: <15-May-2018>  
-- Description: <Insert_DOT_TransferJournal>  
-- ==============================================
CREATE PROCEDURE [dbo].[USP_DOT_CreateTransferJournal]  
		@BatchCardNumber nvarchar(20),
		@BatchNumber nvarchar(20),
		@Brand nvarchar(20),
		@Configuration nvarchar(10),
		@Formula nvarchar(20),
		@ItemNumber nvarchar(50),
		@LOCATION nvarchar(10),
		@PARENTREFRECID int,
		@QUANTITY numeric(32,16), 
		@ScanInDateTime datetime,
		@ScanOutDateTime datetime,
		@TransferJournalId nvarchar(20),
		@WAREHOUSE nvarchar(10),
		@IsOrignalTemppack bit = 0,
		@FGProductionOrder nvarchar(40) =''
AS  
BEGIN                                                                                                                                                                                                                       
 SET NOCOUNT ON;  
 INSERT INTO [dbo].[DOT_TransferJournal]  
           ([BatchCardNumber]
		   ,[BatchNumber]
		   ,[ReferenceItemNumber]
		   ,[Configuration]
		   ,[CreationTime]  
		   ,[CreatorUserId]
		   ,[DeleterUserId]
		   ,[DeletionTime]
		   ,[Formula]
		   ,[IsDeleted]  
		   ,[ItemNumber]
		   ,[LastModificationTime]
		   ,[LastModifierUserId]
		   ,[Location]
		   ,[ParentRefRecId]
           ,[Quantity]  
		   ,[ScanInDateTime]
           ,[ScanOutDateTime]
		   ,[TransferJournalId]
           ,[Warehouse]
		   ,[IsOrignalTemppack]
		   ,[FGBatchOrderNumber])  
     VALUES  
          (@BatchCardNumber,
		   @BatchNumber,
		   @Brand, -- ReferenceItemNumber, FG Item Number
		   @Configuration,
		   GETDATE(),  
		   1,
		   NULL,
		   NULL,
		   @Formula,
		   0,
		   @ItemNumber,
		   GETDATE(),
		   1,
		   @LOCATION,
		   @PARENTREFRECID,
		   @QUANTITY,
		   @ScanInDateTime,
           @ScanOutDateTime,
		   @TransferJournalId,
           @WAREHOUSE,
		   @IsOrignalTemppack,
		   @FGProductionOrder)  
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_FGBORemainingQty_Get]...';


GO
-- ===========================================================    
-- Name:   USP_DOT_FGBORemainingQty_Get   
-- Purpose:  Get Glove Remaining Qty from FGBO (HSB all plant)    
-- ===========================================================    
-- Change History    
-- Date    Author   Comments    
-- -----   ------   ------------------------------------------    
-- 01/03/2022  Azrul Amin    SP created.
-- ===========================================================    
--exec USP_DOT_FGBORemainingQty_Get 'HBBON000000197','XL'  

CREATE PROCEDURE [dbo].[USP_DOT_FGBORemainingQty_Get]     
(   
 @BatchOrderId varchar(200),
 @Size varchar(10)  
)   
AS    
BEGIN     
 SET NOCOUNT ON;    

 SELECT bo.ProdStatus,bo.BthOrderId,bo.ItemId,bo.Size,bo.QtySched,bo.ProdPoolId,
 ISNULL(fg.FGReportedQty,0) as FGReportedQty,bo.QtySched - ISNULL(fg.FGReportedQty,0) AS RemainingQty
  FROM  
  DOT_FloorD365BO AS bo WITH (NOLOCK) LEFT JOIN
  
  --FGReportedQty  
  (SELECT sum(fp.CasesPacked) as FGReportedQty,bo2.BthOrderId from finalpacking FP WITH (NOLOCK)         
  join purchaseorderitem POIN WITH (NOLOCK) on POIN.ponumber = FP.ponumber and POIN.Itemnumber = FP.itemnumber and FP.Size = POIN.ItemSize        
  join DOT_FloorD365BO bo2 WITH (NOLOCK) on bo2.BthOrderId = fp.FGBatchOrderNo and bo2.IsDeleted=0 AND bo2.Size = POIN.CustomerSize   
  WHERE bo2.ProdStatus IN ('ReportedFinished','StartedUp','Released')
  group by bo2.BthOrderId) as fg on fg.BthOrderId = bo.BthOrderId      
  
  where bo.ProdPoolID in ('FG','2FG') and bo.ProdStatus IN ('ReportedFinished','Released','StartedUp')  
  AND bo.ReworkBatch = 'No' and bo.IsDeleted = 0  
  AND bo.BthOrderId = @BatchOrderId and bo.size = @Size

END
GO
PRINT N'Creating Procedure [dbo].[usp_DOT_FP_UpdateFGBatchOrderNoandResource]...';


GO


CREATE   PROCEDURE [dbo].[usp_DOT_FP_UpdateFGBatchOrderNoandResource]
(
	@internalLotNumber nvarchar(20),
	@fgBatchOrderNo nvarchar(20)
)
AS
Begin
BEGIN TRANSACTION;
	BEGIN TRY

	Declare @Resource nvarchar(8)
	
	SELECT DISTINCT @Resource =  res.Resource
	FROM DOT_FloorD365BO bo WITH (NOLOCK)
	JOIN DOT_FloorD365BOResource res WITH (NOLOCK) ON res.BatchOrderId = bo.BthOrderId
	WHERE bo.BthOrderId = @fgBatchOrderNo AND bo.IsDeleted = 0 AND res.IsDeleted = 0

	UPDATE FinalPacking
	SET FGBatchOrderNo = @fgBatchOrderNo, Resource = @Resource
	WHERE internalLotNumber = @internalLotNumber

	END TRY

	BEGIN CATCH
		SELECT 
			ERROR_NUMBER() AS ErrorNumber
			,ERROR_SEVERITY() AS ErrorSeverity
			,ERROR_STATE() AS ErrorState
			,ERROR_PROCEDURE() AS ErrorProcedure
			,ERROR_LINE() AS ErrorLine
			,ERROR_MESSAGE() AS ErrorMessage;
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
			throw;
	END CATCH;

IF @@TRANCOUNT > 0
  COMMIT TRANSACTION;
End
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_FSPostD365FromFGReceivedPallet]...';


GO
-- =====================================================        
-- Author:  <Azrul Amin>          
-- Create date: <20-Apr-2018>          
-- Description: <USP_DOT_FSPostD365FROMFGReceivedPallet>  
-- exec USP_DOT_FSPostD365FromFGReceivedPallet '000F000D','P6','2021-12-11 4:48:17.017',1  
-- =====================================================        
CREATE PROCEDURE [dbo].[USP_DOT_FSPostD365FromFGReceivedPallet]  
    @PalletID VARCHAR(50),          
    @PlantNo VARCHAR (5),          
    @DateScanned DATETIME,    
 @Return int output          
AS          
BEGIN          
SET @Return=0;    
BEGIN TRANSACTION;          
  BEGIN TRY          
    SET NOCOUNT ON;      
    DECLARE @InternalLotNumber NVARCHAR(30)          
 --DECLARE @DateStockOut DATETIME          
 DECLARE @Size NVARCHAR(20)      
    /** DOT_FLOORAXINTPARENTTABLE parameter **/          
    DECLARE @BatchCardNumber NVARCHAR(50)          
    DECLARE @BatchNumber NVARCHAR(20)          
    DECLARE @FSIdentifier UNIQUEIDENTIFIER          
    DECLARE @FunctionIdentifier NVARCHAR(20)          
    DECLARE @ReferenceBatchNumber1 NVARCHAR(20) = NULL          
    DECLARE @ReferenceBatchNumber2 NVARCHAR(20) = NULL          
    DECLARE @ReferenceBatchNumber3 NVARCHAR(20) = NULL          
    DECLARE @ReferenceBatchNumber4 NVARCHAR(20) = NULL          
    DECLARE @ReferenceBatchNumber5 NVARCHAR(20) = NULL          
    DECLARE @ReferenceBatchSequence1 INT = 0          
    DECLARE @ReferenceBatchSequence2 INT = 0          
    DECLARE @ReferenceBatchSequence3 INT = 0          
    DECLARE @ReferenceBatchSequence4 INT = 0          
    DECLARE @ReferenceBatchSequence5 INT = 0          
    DECLARE @Sequence INT          
    /** DOT_FGJournalTable parameter **/          
    DECLARE @BatchOrderNumber NVARCHAR(80)          
    DECLARE @ReferenceItemNumber NVARCHAR (40)          
    DECLARE @Configuration NVARCHAR(20)          
    DECLARE @Warehouse NVARCHAR (5) = 'FG'          
    DECLARE @Resource NVARCHAR(20)          
    DECLARE @CustomerPO NVARCHAR(40)          
    DECLARE @CustomerReference NVARCHAR(60)        
    DECLARE @SalesOrdernumber NVARCHAR(20)          
    DECLARE @InnerLotNumber NVARCHAR(90)          
    DECLARE @OuterLotNumber NVARCHAR(90)          
    DECLARE @CustomerLotNumber NVARCHAR(90)          
    DECLARE @Preshipment INT          
    DECLARE @Preshipmentcases INT          
    DECLARE @InnerBoxCapacity INT          
    DECLARE @PostingDateTime DATETIME             
 DECLARE @EWNQty INT   --#EWN qty validation with staging    
 DECLARE @AccQty INT = 0  --#EWN qty validation with staging    
    DECLARE @Quantity INT       
    DECLARE @TotalQuantity DECIMAL         --splitBatch    
    DECLARE @ParentRefRecId INT            
    DECLARE @Location NVARCHAR(20) = ''          
    DECLARE @PalletNumber NVARCHAR(20)          
    DECLARE @ExpiryDate DATETIME          
    DECLARE @Manufacturingdate DATETIME          
    DECLARE @IsMTS BIT          
    DECLARE @ItemNumber NVARCHAR (40) = NULL          
    DECLARE @CreateDateTime DATETIME          
    DECLARE @PONumber NVARCHAR(20)          
    DECLARE @PreshipmentCaseCount INT          
    DECLARE @RefNumberOfPieces1 DECIMAL (10, 2) = 0 --For SMBP          
    DECLARE @RefNumberOfPieces2 DECIMAL (10, 2) = 0 --For SMBP          
    DECLARE @RefNumberOfPieces3 DECIMAL (10, 2) = 0 --For SMBP          
    DECLARE @RefNumberOfPieces4 DECIMAL (10, 2) = 0 --For SMBP          
    DECLARE @RefNumberOfPieces5 DECIMAL (10, 2) = 0 --For SMBP          
    DECLARE @RefItemNumber1 NVARCHAR (40) = NULL --For SMBP          
    DECLARE @RefItemNumber2 NVARCHAR (40) = NULL --For SMBP          
    DECLARE @RefItemNumber3 NVARCHAR (40) = NULL --For SMBP          
    DECLARE @RefItemNumber4 NVARCHAR (40) = NULL --For SMBP          
    DECLARE @RefItemNumber5 NVARCHAR (40) = NULL --For SMBP          
    /** AXPostingLog parameter **/          
    DECLARE @PostingType NVARCHAR(20) = 'DOTFGJournalContract'          
    DECLARE @SerialNumber NVARCHAR(50)          
 DECLARE @IsPostedToAX BIT = 1          
    DECLARE @IsPostedInAX BIT = 1          
    DECLARE @ExceptionCode NVARCHAR(1000) = NULL          
    DECLARE @TransactionID NVARCHAR(100) = '-1'          
    DECLARE @Area NVARCHAR(10) = 'PS'          
    DECLARE @PalletSerialNo  UNIQUEIDENTIFIER      
    DECLARE @MaxLotCaseNumber int -- max caseNumber by internalLotNo    
    DECLARE @SPPBatchCardNumber NVARCHAR(50) = NULL --Surgical Packing Plan  
    DECLARE @SPPBatchNumber NVARCHAR(50) = NULL  --Surgical Packing Plan  
    DECLARE @PickingListQuantity INT = 0   --Surgical Packing Plan  
    DECLARE @BatchSequence INT = 0     --Surgical Packing Plan  
    DECLARE @GloveSize NVARCHAR(20) = NULL   --Surgical Packing Plan  
    DECLARE @SumGloveSampleQuantity INT = 0   --Surgical Packing Plan  
    DECLARE @GloveSampleQuantity INT = 0   --Surgical Packing Plan  
    DECLARE @IsConsolidated BIT = 0     -- #AZRUL 17/9/2021: Open batch flag for NGC1.5  
    DECLARE @IsConsolidatedMultipleBatch BIT = 0 -- #Max 27/10/2021: Detail batch check for Open batch flag for NGC1.5  
    Declare @DateCompleted datetime  
    Declare @DateStockOut datetime  
    Declare @PalletCompletedId INT  
 Declare @BaseQty DECIMAL (10, 4)  
  
 set @PalletSerialNo = NEWID(); -- Generate by pallet      
 if isnull(@PalletID,'')=''        
 BEGIN        
   RAISERROR ('Pallet ID is empty.', -- Message text.          
               16, -- Severity.          
               1 -- State.          
               );          
 END         
      
 if not exists(select 1 from palletmaster WITH (NOLOCK) where PalletId = @PalletID)      
  BEGIN        
   RAISERROR ('Pallet ID is not exists.', -- Message text.          
               16, -- Severity.          
               1 -- State.          
               );          
 END       
      
 /** Set additional parameter for filtering**/    
 --select * from Inv360_CompletedPallet  
 --Select * FROM PalletMaster WITH (NOLOCK) where PalletId = '000F000D'    
 Select @PONumber = PONumber FROM PalletMaster WITH (NOLOCK) where PalletId = @PalletID    
 print @ponumber   
  
 DECLARE @tempPalletCompleted TABLE (  
 [Id] [int] NULL,  
 [ItemId] [varchar](100) NOT NULL,  
 [Size] [varchar](50) NOT NULL,  
 [PONumber] [varchar](100) NOT NULL,  
 [Qty] [int] NULL,  
 [PalletId] [varchar](50) NOT NULL,  
 [DateCompleted] [datetime] NULL,  
 [DateStockOut] [datetime] NULL,  
 [DateScanned] [datetime] NULL,  
 [IsMTS] [bit] null  
)  
  
select @BaseQty=CaseCapacity*InnerBoxCapacity from PurchaseOrderItem with(nolock) where PONumber=@PONumber  
 ----------------------------------------------------  
 -- MTO(make to order look for EWN_CompletedPallet  
 ----------------------------------------------------  
 if exists(select 1 from EWN_CompletedPallet WITH (NOLOCK) where PalletId = @PalletID and PONumber = @PONumber)   
  begin  
  select @ItemNumber = SUBSTRING(FGCodeAndSize,0,CHARINDEX('_',FGCodeAndSize,0)),                           
   @Size =  SUBSTRING(FGCodeAndSize, CHARINDEX('_', FGCodeAndSize) + 1, LEN(FGCodeAndSize)),  
   @DateCompleted = DateCompleted,  
   @DateStockOut = DateStockOut,  
   @PalletCompletedId = 0,  
   @IsMTS = 0  
  from EWN_CompletedPallet WITH (NOLOCK) WHERE PalletId = @PalletID and DateStockOut is null and PONumber = @PONumber    
  select @EWNQty = Sum(Qty) from EWN_CompletedPallet WITH (NOLOCK) WHERE PalletId = @PalletID and DateStockOut is null and PONumber = @PONumber --#EWN qty validation with staging  
    
  insert @tempPalletCompleted(ItemId,Size,PONumber,PalletId,IsMTS,DateCompleted,DateStockOut, Id)  
  select SUBSTRING(FGCodeAndSize,0,CHARINDEX('_',FGCodeAndSize,0)) as ItemId,SUBSTRING(FGCodeAndSize, CHARINDEX('_', FGCodeAndSize) + 1, LEN(FGCodeAndSize)) as Size,  
   @PONumber,@PalletID,0,DateCompleted,DateStockOut,0  
  from EWN_CompletedPallet WITH (NOLOCK) WHERE PalletId = @PalletID and DateStockOut is null and PONumber = @PONumber  
  
 end --------------------------------------------------------  
 else-- MTS(make to stock look for Inv360_CompletedPallet  
 BEGIN-------------------------------------------------------  
  select @ItemNumber = FGItemId,                           
   @Size =  Size,  
   @DateCompleted = DateCompleted,  
   @DateStockOut = null,  
   @PalletCompletedId = Id,  
   @IsMTS = 1  
  from Inv360_CompletedPallet WITH (NOLOCK) WHERE PalletId = @PalletID and DateScanned is null and FGBONo = @PONumber    
  select @EWNQty = Sum(Qty) from Inv360_CompletedPallet WITH (NOLOCK) WHERE PalletId = @PalletID and DateScanned is null and FGBONo = @PONumber   
  
  insert @tempPalletCompleted(ItemId,Size,PONumber,PalletId,IsMTS,DateCompleted,DateStockOut, Id)  
  select @ItemNumber,@Size,@PONumber,@PalletID,@IsMTS,@DateCompleted,@DateStockOut,@PalletCompletedId  
 end  
  
 select top 1 @Preshipment = isPreshipmentCase from PurchaseOrderItemCases WITH (NOLOCK) where palletid = @PalletID and ItemNumber = @ItemNumber and PONumber = @PONumber and size = @Size         
 --SELECT @DateStockOut = ISNULL(MAX(DateStockOut),GETDATE()) FROM EWN_CompletedPallet WITH (NOLOCK) WHERE DateStockOut IS NOT NULL AND PalletId = @PalletID   and  PONumber = @PONumber         
          
    /** List all InternalLotNumber based on parameter when trigger executed **/          
 IF @Preshipment = 0 or EXISTS(select 1 FROM DOT_FSItemMaster WITH (NOLOCK) WHERE ItemId=@ItemNumber AND ItemType=8) --bypass for SPPBC  
 BEGIN    
  SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS Id, fp.InternalotNumber as InternalLotNumber        
  INTO #temptable         
  FROM PurchaseOrderItemCases fp WITH (NOLOCK)         
  JOIN @tempPalletCompleted ew  ON fp.PalletId = ew.PalletId AND fp.PONumber = @PONumber          
  WHERE fp.PalletId = @PalletID AND ew.DateCompleted < @DateScanned AND ew.DateStockOut IS NULL  --#AZ 12/2/2019 filtering based on PONumber from palletMaster not time duration    
  and fp.size = @Size        
  and fp.InternalotNumber not in (select InnerLotNumber from DOT_FGJournalTable WITH (NOLOCK) where IsDeleted=0 and Preshipment = 0 and PalletNumber = @PalletID) --#MH 17/8/2018 filter out by staging record        
  and fp.InternalotNumber in (select InternalotNumber from PurchaseOrderItemCases WITH (NOLOCK) where PalletId = @PalletID and size = @Size and itemnumber = @ItemNumber) --filter out InternalotNumber not exists in PurchaseOrderItemCases      
  group by fp.InternalotNumber        
  END      
 ELSE      
 BEGIN      
  SELECT ROW_NUMBER() OVER (ORDER BY (SELECT 1)) AS Id, fp.InternaLotNumber as InternalLotNumber    
  INTO #temptablePSI      
  FROM PurchaseOrderItemCases fp WITH (NOLOCK)         
  JOIN @tempPalletCompleted ew ON fp.PalletId = ew.PalletId AND fp.PONumber = @PONumber          
  and fp.Size = ew.Size     --#AZ 7/9/2018 PSI can have multiple size in 1 pallet      
  WHERE fp.PalletId = @PalletID AND ew.DateStockOut IS NULL       
  AND ew.DateCompleted < @DateScanned -- AND ew.DateCompleted > DATEADD(DAY, -2, @DateStockOut)    --#AZ 12/2/2019 filtering based on PONumber from palletMaster not time duration    
  --and fp.size = @Size                      --#AZ 7/9/2018 PSI can have multiple size in 1 pallet      
  and fp.InternalotNumber not in (select InnerLotNumber from DOT_FGJournalTable WITH (NOLOCK) where IsDeleted=0 and Preshipment = 1 and PalletNumber = @PalletID) --#MH 17/8/2018 filter out by staging record      
  and isPreshipmentCase > 0                    --#MH 29/01/2019 PSI can have multiple size in 1 pallet      
  and fp.InternaLotNumber in (select InternalotNumber from PurchaseOrderItemCases WITH (NOLOCK) where PalletId = @PalletID /*and size = @Size*/ and itemnumber = @ItemNumber) --filter out InternalotNumber not exists in PurchaseOrderItemCases               
  
             
  group by fp.InternalotNumber;    
    
 -- To detect is the last Preshipment case    
  select count(itemid) as SOLineCount,HartalegaCommonSize,ItemId      
  into #tempSOLineCount      
  from DOT_FloorSalesLine with(nolock)       
  where IsDeleted=0 and salesid = @PONumber      
  group by HartalegaCommonSize,ItemId;     
 -- for MTS PSI Pallet  
  insert #tempSOLineCount(SOLineCount,HartalegaCommonSize,ItemId)  
  select count(itemid),Size,ItemId   
  from DOT_FloorD365BO with(nolock)       
  where IsDeleted=0 and BthOrderId = @PONumber      
  group by Size,ItemId;    
    
 select count(ItemNumber) as POLineCount,ItemSize,ItemNumber    
 into #tempPOlineCount    
 from purchaseorderitem with(nolock)    
 where POnumber = @PONumber    
 group by ItemSize,ItemNumber    
    
     
 select PONumber,size, itemNumber,count(1) Qty,max(CaseNumber) as MaxCaseNumber    
 INTO #tempPalletMaxCase    
 from PurchaseOrderItemCases with(nolock)    
 where PONumber=@PONumber and ispreshipmentCase = 1    
 group by PONumber,size, itemNumber;    
    
 --select * from #tempPalletMaxCase    
 END      
         
    /** Looping each InternalLotNumber for posting **/          
 DECLARE @COUNT INT      
 IF @Preshipment = 0 or EXISTS(select 1 FROM DOT_FSItemMaster WITH (NOLOCK) WHERE ItemId=@ItemNumber AND ItemType=8) --bypass for SPPBC  
 BEGIN    
  SET @COUNT = (SELECT MAX(Id) FROM #temptable);          
 END      
 ELSE      
 BEGIN      
  SET @COUNT = (SELECT MAX(Id) FROM #temptablePSI);          
 END      
      
DECLARE @ROW INT = 1;          
WHILE (@ROW <= @COUNT)          
BEGIN      
        
  --print @ROW        
  --clean up      
  if OBJECT_ID('tempdb.dbo.#finalpackingtemp') IS NOT NULL         
  BEGIN        
   DROP TABLE #finalpackingtemp;          
  --print 'drop #finalpackingtemp'        
  END        
  if OBJECT_ID('tempdb.dbo.#finalpackingSMBPtemp') IS NOT NULL         
  BEGIN        
   DROP TABLE #finalpackingSMBPtemp;          
  --print 'drop #finalpackingSMBPtemp'        
  END        
  if OBJECT_ID('tempdb.dbo.#finalpackingSPPBCtemp') IS NOT NULL --Surgical Packing Plan  
  BEGIN               --Surgical Packing Plan  
   DROP TABLE #finalpackingSPPBCtemp;            --Surgical Packing Plan  
  END                 --Surgical Packing Plan  
     --print 'get internal lot number'        
  
  IF @Preshipment = 0 or EXISTS(select 1 FROM DOT_FSItemMaster WITH (NOLOCK) WHERE ItemId=@ItemNumber AND ItemType=8) --bypass for SPPBC  
  BEGIN    
   SET @InternalLotNumber = (SELECT InternalLotNumber FROM #temptable WHERE Id = @ROW);          
  END      
  ELSE      
  BEGIN      
    SET @InternalLotNumber = (SELECT InternalLotNumber FROM #temptablePSI WHERE Id = @ROW);        
  END        
  print @InternalLotNumber        
        
  SELECT * INTO #finalpackingtemp FROM FinalPacking WITH (NOLOCK)         
     WHERE InternalLotNumber = @InternalLotNumber;          
    --print '97'        
        
  set @BatchNumber='0';        
  SELECT @BatchNumber = ISNULL(SerialNumber,'0') FROM #finalpackingtemp;         
           
  --print '99'        
  SET @FSIdentifier = NEWID();          
          
  /** If FunctionID: SBC          
     FloorSystem Method: AXPostingBLL.GetCompleteFinalPackingDetails(internalLotNumber)           
     EXEC USP_FP_Get_ScanBatchCardInnerOuterforPosting @InternalLotNumber **/         
  --print @BatchNumber        
  IF (@BatchNumber <> '0')          
  BEGIN          
  SET @FunctionIdentifier = 'SBC'          
  --print '108'        
  --print @FunctionIdentifier       
  IF @Preshipment = 0      
  BEGIN       
   SELECT DISTINCT @BatchNumber = FPB.SerialNumber,          
     @BatchCardNumber = BT.BatchNumber,          
     @BatchOrderNumber = FP.FGBatchOrderNo,          
     @Configuration = POIN.ItemSize,          
     @Resource = FP.Resource,    
     @CustomerPO = POIN.OrderNumber,          
     @CustomerReference = POIN.CustomerReferenceNumber,          
     @InnerLotNumber = FP.InternalLotNumber,          
     @OuterLotNumber = FP.OuterLotno,          
     @CustomerLotNumber = POIN.CustomerLotNumber,          
     @Manufacturingdate = FP.ManufacturingDate,          
     @ExpiryDate = FP.ExpiryDate,          
     @PalletNumber = @PalletID,          
     @CreateDateTime = BT.BatchCardDate,          
     @PostingDateTime = @DateScanned,          
     @Quantity = CT.CasesPacked,          
     @ReferenceItemNumber = FP.ItemNumber,          
     @SalesOrdernumber = FP.PONumber,          
     @PONumber = FP.PONumber,          
     @SerialNumber = FPB.SerialNumber,      
     @PreshipmentCases = 0 -- Normal Pallet always set to 0          
   FROM #finalpackingtemp FP          
   JOIN FinalPackingbatchinfo FPB WITH (NOLOCK) ON FPB.InternalLotNumber = FP.InternalLotNumber          
   JOIN PurchaseOrderItem POIN WITH (NOLOCK) ON POIN.PONumber = FP.PONumber AND POIN.ItemNumber = FP.ItemNumber AND FP.Size = POIN.ItemSize          
   JOIN Batch BT WITH (NOLOCK) ON BT.SerialNumber = FP.SerialNumber       
   JOIN (select count(CaseNumber) as CasesPacked,isPreshipmentCase,PONumber,InternalotNumber,palletid from PurchaseOrderItemCases WITH (NOLOCK)       
     where InternalotNumber = @InternalLotNumber and palletid=@PalletID       
     group by isPreshipmentCase,PONumber,InternalotNumber,palletid) CT on ct.InternalotNumber = FP.InternalLotNumber         
   WHERE FP.InternalLotNumber = @InternalLotNumber      
    
  END      
  ELSE  -- else is preshipment pallet    
  BEGIN      
    
  -- Get Max case number by internal lot no    
  select @MaxLotCaseNumber=max(CaseNumber)    
   from PurchaseOrderItemCases  WITH (NOLOCK)    
   where InternalotNumber=@InternalLotNumber and ispreshipmentCase = 1    
   group by InternalotNumber;    
  print @MaxLotCaseNumber      
    
   SELECT DISTINCT @BatchNumber = FPB.SerialNumber,          
     @BatchCardNumber = BT.BatchNumber,             
     @BatchOrderNumber = FP.FGBatchOrderNo,          
     @Configuration = POIN.ItemSize,          
     @Resource = FP.Resource,          
     @CustomerPO = POIN.OrderNumber,          
     @CustomerReference = POIN.CustomerReferenceNumber,          
     @InnerLotNumber = FP.InternalLotNumber,          
     @OuterLotNumber = FP.OuterLotno,          
     @CustomerLotNumber = POIN.CustomerLotNumber,          
     @Manufacturingdate = FP.ManufacturingDate,          
     @ExpiryDate = FP.ExpiryDate,          
     @PalletNumber = @PalletID,          
     @CreateDateTime = BT.BatchCardDate,          
     @PostingDateTime = @DateScanned,          
     @Quantity = CT.CasesPacked,          
     @ReferenceItemNumber = FP.ItemNumber,          
     @SalesOrdernumber = FP.PONumber,          
     @PONumber = FP.PONumber,          
     @SerialNumber = FPB.SerialNumber,      
     @PreshipmentCases = CASE WHEN soc.SOLineCount=poc.POLineCount and isnull(packedCount.SONotPacked,0) = 0 and psiMax.MaxCaseNumber=@MaxLotCaseNumber THEN psiMax.Qty ELSE 0 END       
   FROM #finalpackingtemp FP          
   JOIN FinalPackingbatchinfo FPB WITH (NOLOCK) ON FPB.InternalLotNumber = FP.InternalLotNumber          
   JOIN PurchaseOrderItem POIN WITH (NOLOCK) ON POIN.PONumber = FP.PONumber AND POIN.ItemNumber = FP.ItemNumber AND FP.Size = POIN.ItemSize          
   JOIN Batch BT WITH (NOLOCK) ON BT.SerialNumber = FP.SerialNumber      
   JOIN (select count(CaseNumber) as CasesPacked,InternalotNumber    
     from PurchaseOrderItemCases WITH (NOLOCK)       
     where InternalotNumber = @InternalLotNumber and palletid=@PalletID       
     group by InternalotNumber) CT on ct.InternalotNumber = FP.InternalLotNumber       
      
  -- PSI cases handing logic    
   -- calculate how many PSI packed for this FG & size    
   JOIN #tempPalletMaxCase psiMax on psiMax.ItemNumber=FP.ItemNumber AND psiMax.Size=FP.Size and psiMax.PONumber=FP.PONumber    
   -- detect is fully packed for this FG & size    
   join #tempSOLineCount soc on soc.HartalegaCommonSize=fp.Size and soc.ItemId= fp.ItemNumber     
   join #tempPOlineCount poc on poc.ItemSize=fp.Size and poc.ItemNumber= fp.ItemNumber --filter correct FG item number    
   left join (select COUNT(casenumber) as SONotPacked,ponumber,Size,ItemNumber --filter correct FG item number    
   from purchaseorderitemcases with(nolock)    
   where ispreshipmentCase = 1 and InternalotNumber is null and Palletid is null    
   group by ponumber,Size,ItemNumber) packedCount    
  on packedcount.PONumber = FP.PONumber and packedcount.Size = fp.Size and packedCount.ItemNumber=fp.ItemNumber --filter correct FG item number    
   WHERE FP.InternalLotNumber = @InternalLotNumber      
  END          
  if isnull(@BatchCardNumber,'')=''        
  BEGIN        
   RAISERROR ('FG Batch Order is ammended or deleted', -- Message text.          
   16, -- Severity.          
   1 -- State.          
   );          
  END      
      
   set @PreshipmentCaseCount = 0      
   SELECT @PreshipmentCaseCount = Count(CaseNumber) FROM PurchaseOrderItemCases WITH (NOLOCK) WHERE PONumber = @Ponumber AND ItemNumber = @ReferenceItemNumber          
   AND Size = @Configuration AND IsPreshipmentCase = 1 AND InternaLotNumber IS NULL AND PalletId IS NULL          
  END          
  ELSE          
  BEGIN          
  IF EXISTS(select * FROM DOT_FSItemMaster WITH (NOLOCK) WHERE ItemId=@ItemNumber AND ItemType=8) --Surgical Packing Plan  
  BEGIN                    --Surgical Packing Plan  
 SET @FunctionIdentifier = 'SPPBC';             --Surgical Packing Plan  
  END                    --Surgical Packing Plan  
  ELSE  
  BEGIN                
 SET @FunctionIdentifier = 'SMBP';  
  END    
           
   print @FunctionIdentifier        
        
   SET @BatchNumber = '';          
   SET @BatchCardNumber = '';    
  IF @Preshipment = 0 or @FunctionIdentifier = 'SPPBC' --bypass for SPPBC    
  BEGIN     
   SELECT TOP 1 @Configuration = PO.ItemSize,          
       @Resource = FP.Resource,          
       @CustomerPO = PO.OrderNumber,          
       @CustomerReference = PO.CustomerReferenceNumber,          
       @InnerLotNumber = FP.InternalLotNumber,          
       @OuterLotNumber = FP.OuterLotno,          
       @CustomerLotNumber = PO.CustomerLotNumber,          
       @Manufacturingdate = FP.ManufacturingDate,          
       @ExpiryDate = FP.ExpiryDate,          
       @PalletNumber = @PalletID,          
       @BatchOrderNumber = FP.FGBatchOrderNo,       
       @PostingDateTime = @DateScanned,          
       @PreshipmentCases = 0, -- Normal Pallet always set to 0          
       @Quantity = CT.CasesPacked,          
       @TotalQuantity = CT2.TotalCases,  --splitBatch    
       @ReferenceItemNumber = FP.ItemNumber,          
       @SalesOrdernumber = FP.PONumber,          
       @InnerBoxCapacity = PO.innerboxcapacity          
   FROM #finalpackingtemp FP          
   JOIN PurchaseOrderItem PO WITH (NOLOCK) ON PO.PONumber = FP.PONumber AND PO.ItemNumber = FP.ItemNumber AND FP.Size = PO.ItemSize    
   JOIN (select count(CaseNumber) as CasesPacked,InternalotNumber     
  from PurchaseOrderItemCases WITH (NOLOCK)       
  where InternalotNumber = @InternalLotNumber and palletid=@PalletID       
  group by InternalotNumber) CT on ct.InternalotNumber = FP.InternalLotNumber      
 JOIN (select count(CaseNumber) as TotalCases,InternalotNumber --splitBatch    
  from PurchaseOrderItemCases WITH (NOLOCK)       
  where InternalotNumber = @InternalLotNumber     
  group by InternalotNumber) CT2 on ct.InternalotNumber = FP.InternalLotNumber      
   WHERE FP.InternalLotNumber = @InternalLotNumber       
  END    
  ELSE    
  BEGIN    
   -- Get Max case number by internal lot no    
   select @MaxLotCaseNumber=max(CaseNumber)    
    from PurchaseOrderItemCases  WITH (NOLOCK)    
    where InternalotNumber=@InternalLotNumber and ispreshipmentCase = 1    
    group by InternalotNumber;    
   print @MaxLotCaseNumber      
    
     SELECT TOP 1 @Configuration = PO.ItemSize,          
       @Resource = FP.Resource,          
       @CustomerPO = PO.OrderNumber,          
       @CustomerReference = PO.CustomerReferenceNumber,          
       @InnerLotNumber = FP.InternalLotNumber,          
       @OuterLotNumber = FP.OuterLotno,          
       @CustomerLotNumber = PO.CustomerLotNumber,          
       @Manufacturingdate = FP.ManufacturingDate,          
       @ExpiryDate = FP.ExpiryDate,          
       @PalletNumber = @PalletID,          
       @BatchOrderNumber = FP.FGBatchOrderNo,      
       @PostingDateTime = @DateScanned,          
       @PreshipmentCases = CASE WHEN soc.SOLineCount=poc.POLineCount and isnull(packedCount.SONotPacked,0) = 0 and psiMax.MaxCaseNumber=@MaxLotCaseNumber THEN psiMax.Qty ELSE 0 END,          
       @Quantity = CT.CasesPacked,    
       @TotalQuantity = CT2.TotalCases,  --splitBatch    
       @ReferenceItemNumber = FP.ItemNumber,          
       @SalesOrdernumber = FP.PONumber,          
       @InnerBoxCapacity = PO.innerboxcapacity          
   FROM #finalpackingtemp FP          
   JOIN PurchaseOrderItem PO WITH (NOLOCK) ON PO.PONumber = FP.PONumber AND PO.ItemNumber = FP.ItemNumber AND FP.Size = PO.ItemSize    
   JOIN (select count(CaseNumber) as CasesPacked,InternalotNumber     
  from PurchaseOrderItemCases WITH (NOLOCK)       
  where InternalotNumber = @InternalLotNumber and palletid=@PalletID       
  group by InternalotNumber) CT on ct.InternalotNumber = FP.InternalLotNumber      
 JOIN (select count(CaseNumber) as TotalCases,InternalotNumber  --splitBatch    
  from PurchaseOrderItemCases WITH (NOLOCK)       
  where InternalotNumber = @InternalLotNumber     
  group by InternalotNumber) CT2 on ct.InternalotNumber = FP.InternalLotNumber      
     
  -- PSI cases handing logic    
   -- calculate how many PSI packed for this FG & size    
   JOIN #tempPalletMaxCase psiMax on psiMax.ItemNumber=FP.ItemNumber AND psiMax.Size=FP.Size and psiMax.PONumber=FP.PONumber    
   -- detect is fully packed for this FG & size    
   join #tempSOLineCount soc on soc.HartalegaCommonSize=fp.Size and soc.ItemId= fp.ItemNumber     
   join #tempPOlineCount poc on poc.ItemSize=fp.Size and poc.ItemNumber= fp.ItemNumber    
   left join (select COUNT(casenumber) as SONotPacked,ponumber,Size,ItemNumber    
   from purchaseorderitemcases with(nolock)    
   where ispreshipmentCase = 1 and InternalotNumber is null and Palletid is null    
   group by ponumber,Size,ItemNumber) packedCount    
  on packedcount.PONumber = FP.PONumber and packedcount.Size = fp.Size and packedCount.ItemNumber=fp.ItemNumber    
   WHERE FP.InternalLotNumber = @InternalLotNumber       
    
  END    
    
 IF @FunctionIdentifier <> 'SPPBC' --Surgical Packing Plan  
 BEGIN  
    /** List all Reference Batch from InternalLotNumber **/          
    /** FloorSystem Method: AXPostingBLL.GetScanMultipleBatchInfoforPosting(SerialNumber)          
         EXEC USP_FP_Get_ScanMultipleBatchInfoforPosting @InternalLotNumber **/          
    SELECT Row_number() OVER (ORDER BY (SELECT 1)) AS Id, BT.SerialNumber, BT.Size, BT.BatchNumber, FPB.BoxesPacked, BT.GloveType      
    INTO #finalpackingSMBPtemp FROM Batch BT WITH (NOLOCK) INNER JOIN FinalPackingbatchinfo FPB WITH (NOLOCK) ON BT.SerialNumber = FPB.SerialNumber          
    WHERE FPB.InternalLotNumber = @InternalLotNumber          
    --print '238'      
    --Reference Batch 1        
    SELECT @ReferenceBatchNumber1 = SerialNumber,        
    @ReferenceBatchSequence1 = (SELECT Count(SerialNumber) + 1 FROM dbo.AXPostingLog with (nolock) WHERE SerialNumber=a.SerialNumber),        
    @RefItemNumber1 = GloveType,        
    @RefNumberOfPieces1 = CASE WHEN @Quantity <> @TotalQuantity THEN ROUND(AVG(CAST(@InnerBoxCapacity * BoxesPacked * @Quantity / @TotalQuantity AS DECIMAL)) * 2, 0) / 2    
         ELSE @InnerBoxCapacity * BoxesPacked END --splitBatch  
    FROM #finalpackingSMBPtemp a WHERE Id = 1        
    GROUP BY SerialNumber,GloveType,BoxesPacked  
    SET @SerialNumber = @ReferenceBatchNumber1 --Set for AXPostingLog        
  
    --print '246'      
    --Reference Batch 2        
    SELECT @ReferenceBatchNumber2 = ISNULL(SerialNumber,''),        
    @ReferenceBatchSequence2 = ISNULL((SELECT Count(SerialNumber) + 1 FROM dbo.AXPostingLog with (nolock) WHERE SerialNumber=b.SerialNumber),0),        
    @RefItemNumber2 = ISNULL(GloveType,0),        
    @RefNumberOfPieces2 = CASE WHEN @Quantity <> @TotalQuantity AND @ReferenceBatchNumber2 <> '' THEN ROUND(AVG(CAST(@InnerBoxCapacity * BoxesPacked * @Quantity / @TotalQuantity AS DECIMAL)) * 2, 0) / 2    
         ELSE ISNULL(@InnerBoxCapacity * BoxesPacked,'') END --splitBatch  
    FROM #finalpackingSMBPtemp b WHERE Id = 2        
    GROUP BY SerialNumber,GloveType,BoxesPacked  
        
       --Reference Batch 3        
       SELECT @ReferenceBatchNumber3 = ISNULL(SerialNumber,''),        
       @ReferenceBatchSequence3 = ISNULL((SELECT Count(SerialNumber) + 1 FROM dbo.AXPostingLog with (nolock) WHERE SerialNumber=c.SerialNumber),0),        
       @RefItemNumber3 = ISNULL(GloveType,0),        
       @RefNumberOfPieces3 = CASE WHEN @Quantity <> @TotalQuantity AND @ReferenceBatchNumber3 <> '' THEN ROUND(AVG(CAST(@InnerBoxCapacity * BoxesPacked * @Quantity / @TotalQuantity AS DECIMAL)) * 2, 0) / 2    
         ELSE ISNULL(@InnerBoxCapacity * BoxesPacked,'') END --splitBatch      
    FROM #finalpackingSMBPtemp c WHERE Id = 3        
    GROUP BY SerialNumber,GloveType,BoxesPacked  
        
       --Reference Batch 4        
    SELECT @ReferenceBatchNumber4 = ISNULL(SerialNumber,''),        
    @ReferenceBatchSequence4 = ISNULL((SELECT Count(SerialNumber) + 1 FROM dbo.AXPostingLog with (nolock) WHERE SerialNumber=d.SerialNumber),0),        
    @RefItemNumber4 = ISNULL(GloveType,0),        
    @RefNumberOfPieces4 = CASE WHEN @Quantity <> @TotalQuantity AND @ReferenceBatchNumber4 <> '' THEN ROUND(AVG(CAST(@InnerBoxCapacity * BoxesPacked * @Quantity / @TotalQuantity AS DECIMAL)) * 2, 0) / 2    
         ELSE ISNULL(@InnerBoxCapacity * BoxesPacked,'') END --splitBatch         
    FROM #finalpackingSMBPtemp d WHERE Id = 4        
    GROUP BY SerialNumber,GloveType,BoxesPacked  
        
       --Reference Batch 5        
    SELECT @ReferenceBatchNumber5 = ISNULL(SerialNumber,''),        
    @ReferenceBatchSequence5 = ISNULL((SELECT Count(SerialNumber) + 1 FROM dbo.AXPostingLog with (nolock) WHERE SerialNumber=e.SerialNumber),0),        
    @RefItemNumber5 = ISNULL(GloveType,0),        
    @RefNumberOfPieces5 = CASE WHEN @Quantity <> @TotalQuantity AND @ReferenceBatchNumber5 <> '' THEN ROUND(AVG(CAST(@InnerBoxCapacity * BoxesPacked * @Quantity / @TotalQuantity AS DECIMAL)) * 2, 0) / 2    
         ELSE ISNULL(@InnerBoxCapacity * BoxesPacked,'') END --splitBatch     
    FROM #finalpackingSMBPtemp e WHERE Id = 5       
    GROUP BY SerialNumber,GloveType,BoxesPacked   
       
       DROP TABLE #finalpackingSMBPtemp    
  END  
  ELSE   
  BEGIN  
  SELECT Row_number() OVER (ORDER BY (SELECT 1)) AS Id, SPD.SerialNumber, SPP.ItemSize, SPD.GloveSize, SPD.BatchNumber, SPD.ReservedQty, SPD.GloveCode, SPP.SamplingPcsQty, SPP.RequiredPcsQty  
  INTO #finalpackingSPPBCtemp FROM SurgicalPackingPlan SPP WITH (NOLOCK) JOIN SurgicalPackingPlanDetails SPD on SPP.SurgicalPackingPlanId = SPD.SurgicalPackingPlanId  
  WHERE SPP.InternalLotNo = @InternalLotNumber AND SPP.PlanStatus = 3 --Surgical Packing Plan  
  SELECT Top 1 @SumGloveSampleQuantity = SamplingPcsQty from #finalpackingSPPBCtemp  
  SET @SumGloveSampleQuantity = ROUND(AVG(CAST(@Quantity AS DECIMAL) / @TotalQuantity * @SumGloveSampleQuantity), 0)  
  END  
  
    END        
   -- print '277'        
    /** FloorSystem Method: AXPostingBLL.GetBatchSequence(SerialNumber)          
       EXEC USP_GET_BATCHSEQUENCE SerialNumber **/          
   if @FunctionIdentifier = 'SMBP' OR @FunctionIdentifier = 'SPPBC'  
   BEGIN        
    SELECT @Sequence = 0-- Count(SerialNumber) + 1 FROM dbo.AXPostingLog WHERE SerialNumber = @ReferenceBatchNumber1         
   END        
   ELSE        
   BEGIN          
     SELECT @Sequence = Count(SerialNumber) + 1 FROM dbo.AXPostingLog with (nolock) WHERE SerialNumber = @BatchNumber-- and ServiceName <> 'SMBP'          
   END        
   --print '281'   
      
 /** Mantis# 0008589: Plant 7 Web Admin Surgical SPPBC does not generate quality order correctly **/  
 /** For Surgical, no PSI cases defined in PurchaseOrderItemCases **/  
 /** This part will detect last pallet defined in PurchaseOrderItemCases by PoNo and size **/  
 /** Then count PreshipmentCases from PurchaseOrderItem  by PoNo and ItemSize **/  
 IF @FunctionIdentifier = 'SPPBC'  
 BEGIN  
  DECLARE @LastCasenumber INT  
    DECLARE @LastPalletId NVARCHAR(10)      
    SELECT @LastCasenumber = Max(CaseNumber) FROM PurchaseOrderItemCases WITH (NOLOCK) where PONumber = @SALESORDERNUMBER and size = @Size --0008589     
  SELECT @LastPalletId = PalletId FROM PurchaseOrderItemCases WITH (NOLOCK) where PONumber = @SALESORDERNUMBER and CaseNumber = @LastCasenumber and size = @Size  
  IF @LastPalletId = @PalletID AND @row = @COUNT  
  BEGIN  
   DECLARE @strCases NVARCHAR(4000)   --0008589  
   SET @Preshipment=1  
   SELECT @strCases = Preshipmentcases FROM PurchaseOrderItem WITH (NOLOCK) where PONumber = @SALESORDERNUMBER and ItemSize = @Size  --0008589  
   SELECT @Preshipmentcases = SUM(len(@strCases) - len(replace(@strCases, ',', '')) +1)  
  END  
 END  
 /** Mantis# 0008589: Plant 7 Web Admin Surgical SPPBC does not generate quality order correctly **/  
  
 /** Open batch flag for NGC1.5 **/  
 IF (@FunctionIdentifier = 'SBC')  
 BEGIN  
  --IF (SELECT COUNT(1) FROM AXPostingLog with (NOLOCK) WHERE SerialNumber = @BATCHNUMBER AND IsConsolidated = 1) > 0  
  --BEGIN  
  -- SET @IsConsolidated = 1  
  --END  
    
  SET @IsConsolidated = dbo.Ufn_DOT_GET_IsConsolidated(@BATCHNUMBER,@PlantNo);  
  --select  @BATCHNUMBER,@IsConsolidated,'SBC' --debug  
 END  
 ELSE IF (@FunctionIdentifier = 'SMBP')  
 BEGIN  
  --IF (SELECT COUNT(1) FROM AXPostingLog with (NOLOCK) WHERE SerialNumber = @ReferenceBatchNumber1 AND IsConsolidated = 1) > 0  
  --BEGIN  
  -- SET @IsConsolidated = 1  
  --END  
  SET @IsConsolidated = dbo.Ufn_DOT_GET_IsConsolidated(@ReferenceBatchNumber1,@PlantNo);  
  --select  @ReferenceBatchNumber1,@IsConsolidated,'SMBP' -- debug  
 END  
             
     /** AX Posting parent, child & AXPostingLog staging table          
      EXEC USP_DOT_CreateFLOORAXINTPARENTTABLE **/          
   BEGIN          
   INSERT INTO [dbo].[Dot_FloorAXIntParentTable]          
      ([BatchCardNumber]          
      ,[BatchNumber]          
      ,[CreationTime]          
      ,[CreatorUserId]          
      ,[DeleterUserId]          
      ,[DeletionTime]          
      ,[ErrorMessage]          
      ,[FSIdentifier]          
      ,[FunctionIdentifier]          
      ,[IsDeleted]          
      ,[LastModificationTime]          
      ,[LastModifierUserId]          
      ,[ProcessingStatus]          
      ,[PlantNo]          
      ,[ProdId]          
      ,[ReferenceBatchNumber1]          
      ,[ReferenceBatchNumber2]          
      ,[ReferenceBatchNumber3]          
      ,[ReferenceBatchNumber4]          
      ,[ReferenceBatchNumber5]          
      ,[ReferenceBatchSequence1]          
      ,[ReferenceBatchSequence2]          
      ,[ReferenceBatchSequence3]          
      ,[ReferenceBatchSequence4]          
      ,[ReferenceBatchSequence5]          
      ,[Sequence]          
      ,[PalletId]      
      ,[PalletSerialNo]  
      ,[FGQuantity]    --Surgical Packing Plan  
      ,[Preshipment]    --Surgical Packing Plan  
      ,[PreshipmentCases]   --Surgical Packing Plan  
      ,[GloveSampleQuantity]  --Surgical Packing Plan  
      ,[IsConsolidated])  --NGC 1.5 Open Batch flag  
    VALUES (@BATCHCARDNUMBER, @BATCHNUMBER, Getdate(), 1, NULL, NULL, '', @FSIDENTIFIER,   
 case when @IsMTS = 0 then @FUNCTIONIDENTIFIER   
   else case when @FUNCTIONIDENTIFIER='SMBP' then 'MMTS'  
    else 'MTS' end  
 end, 0, Getdate(), 1, 1, @PLANTNO, NULL, @REFERENCEBATCHNUMBER1,          
    @REFERENCEBATCHNUMBER2, @REFERENCEBATCHNUMBER3, @REFERENCEBATCHNUMBER4, @REFERENCEBATCHNUMBER5, @REFERENCEBATCHSEQUENCE1, @REFERENCEBATCHSEQUENCE2,          
    @REFERENCEBATCHSEQUENCE3, @REFERENCEBATCHSEQUENCE4, @REFERENCEBATCHSEQUENCE5, @SEQUENCE, @PalletId, @PalletSerialNo,  
    @QUANTITY, @PRESHIPMENT, @PRESHIPMENTCASES, @SumGloveSampleQuantity,  --Surgical Packing Plan        
    @IsConsolidated) --NGC 1.5 Open Batch flag  
   
   SET @PARENTREFRECID = (SELECT @@IDENTITY);  

   --HSB Open batch to default Resource
   IF @Resource is null
   BEGIN
	SET @Resource = @PlantNo+'-FP'
   END
     
   IF @FunctionIdentifier = 'SPPBC' --Surgical Packing Plan  
   BEGIN     
    DECLARE @SPPROW INT = 1;                                            
 DECLARE @SPPCOUNT INT;                                        
    DECLARE @ACCGloveSampleQuantity INT = 0                                     
 SET @SPPCOUNT = (SELECT MAX(Id) FROM #finalpackingSPPBCtemp);                                
 WHILE (@SPPROW <= @SPPCOUNT)                                        
 BEGIN     
  Select @SPPBatchCardNumber = BatchNumber, @SPPBatchNumber = SerialNumber, @PickingListQuantity = ReservedQty , @Configuration = ItemSize,  
  @GloveSize = GloveSize, @GloveSampleQuantity = ROUND(AVG(CAST(ReservedQty AS DECIMAL)/((RequiredPcsQty+SamplingPcsQty)/2))*(SamplingPcsQty/2), 0)  
  FROM #finalpackingSPPBCtemp WITH (NOLOCK) where Id = @SPPROW  
  group by BatchNumber,SerialNumber,ReservedQty,ItemSize,GloveSize,Id,SamplingPcsQty  
  
  SET @Configuration = CASE  
   WHEN @Configuration LIKE '%,%' THEN   
    LEFT(SUBSTRING(@Size, PATINDEX('%[0-9.-]%', @Configuration), 8000),  
    PATINDEX('%[^0-9.-]%', SUBSTRING(@Configuration, PATINDEX('%[0-9.-]%', @Configuration), 8000) + 'X') -1)   
   ELSE @Configuration                       
  END  
  SELECT @BatchSequence = Count(SerialNumber) + 1 FROM dbo.AXPostingLog with (nolock) WHERE SerialNumber = @SPPBatchNumber  
  
  SET @GloveSampleQuantity = ROUND(AVG(CAST(@Quantity AS DECIMAL) / @TotalQuantity * @GloveSampleQuantity), 0)  
  
  IF @SPPROW < @SPPCOUNT  
  BEGIN  
   SET @ACCGloveSampleQuantity = @ACCGloveSampleQuantity + @GloveSampleQuantity  
  END  
  ELSE  
  BEGIN  
   SET @GloveSampleQuantity = @SumGloveSampleQuantity - @ACCGloveSampleQuantity  
    END    
  -- always use origial ReservedQty - allocation sample qty, Max He 02/12/2021    
  SET @PickingListQuantity = @PickingListQuantity - @GloveSampleQuantity   
  
   -- check individual detail batch is it open batch or not  
  --IF (SELECT COUNT(1) FROM AXPostingLog with (NOLOCK) WHERE SerialNumber = @SPPBatchNumber AND IsConsolidated = 1) > 0  
  --BEGIN  
   SET @IsConsolidatedMultipleBatch = dbo.Ufn_DOT_GET_IsConsolidated(@SPPBatchNumber,@PlantNo);  
  --END  

  /** EXEC USP_DOT_CreateFGRAFJournal SPPBC **/  
  EXEC Usp_dot_createfgrafjournal @BATCHORDERNUMBER, @REFERENCEITEMNUMBER, @CONFIGURATION, @WAREHOUSE, @RESOURCE, @CUSTOMERPO, @CUSTOMERREFERENCE, @SALESORDERNUMBER,          
  @INNERLOTNUMBER, @OUTERLOTNUMBER, @CUSTOMERLOTNUMBER, @PRESHIPMENT, @PRESHIPMENTCASES, @POSTINGDATETIME, @QUANTITY, @PARENTREFRECID, @LOCATION,   
  @PALLETNUMBER, @ExpiryDate, @ManufacturingDate, @IsMTS, @ItemNumber, @RefNumberOfPieces1, @RefNumberOfPieces2,          
  @RefNumberOfPieces3, @RefNumberOfPieces4, @RefNumberOfPieces5, @RefItemNumber1, @RefItemNumber2, @RefItemNumber3, @RefItemNumber4,          
  @RefItemNumber5, @SPPBatchCardNumber, @SPPBatchNumber, @PickingListQuantity, @BatchSequence, @GloveSize, @GloveSampleQuantity,@BaseQty;  
  /** AXPostingLog SPPBC **/  
  EXEC dbo.Usp_save_axpostinglog @FunctionIdentifier, @PostingType, @PostingDateTime, @BATCHCARDNUMBER, @SPPBatchNumber, @IsPostedToAX, @IsPostedInAX, @Sequence, @ExceptionCode, @TransactionID, @Area, @IsConsolidatedMultipleBatch    
    
  -- As long as have 1 batch is new batch card set IsConsolidated = 1 then parent staging table consider as new batch and handle in WebAdmin2  
  IF @IsConsolidated = 0 AND @IsConsolidatedMultipleBatch = 1  
  BEGIN  
   SET @IsConsolidated = 1;  
  END  
  SET @SPPROW = @SPPROW + 1   
 END -- while loop end for insert SPPBC FG detail info   
 IF @IsConsolidated = 1 -- update parent table if has new batch card(consolidated=1)   
 BEGIN  
  --select @PARENTREFRECID,'Update IsConsolidated for SPPBC mix with open batch secnario only'; -- debug  
  UPDATE Dot_FloorAXIntParentTable set IsConsolidated=@IsConsolidated where Id=@PARENTREFRECID;  
 END  
   
 DROP TABLE #finalpackingSPPBCtemp                                     
   END  
   ELSE  
   BEGIN    
    /** EXEC USP_DOT_CreateFGRAFJournal SBC/SMBP **/  
    EXEC Usp_dot_createfgrafjournal @BATCHORDERNUMBER, @REFERENCEITEMNUMBER, @CONFIGURATION, @WAREHOUSE, @RESOURCE, @CUSTOMERPO, @CUSTOMERREFERENCE, @SALESORDERNUMBER,          
  @INNERLOTNUMBER, @OUTERLOTNUMBER, @CUSTOMERLOTNUMBER, @PRESHIPMENT, @PRESHIPMENTCASES, @POSTINGDATETIME, @QUANTITY, @PARENTREFRECID,          
  @LOCATION, @PALLETNUMBER, @ExpiryDate, @ManufacturingDate, @IsMTS, @ItemNumber, @RefNumberOfPieces1, @RefNumberOfPieces2,          
  @RefNumberOfPieces3, @RefNumberOfPieces4, @RefNumberOfPieces5, @RefItemNumber1, @RefItemNumber2, @RefItemNumber3, @RefItemNumber4,          
  @RefItemNumber5, @SPPBatchCardNumber, @SPPBatchNumber, @PickingListQuantity, @BatchSequence, @GloveSize, @GloveSampleQuantity,@BaseQty;  
          
  /** dbo.AXPostingLog **/       
  IF @FunctionIdentifier = 'SMBP'    
  BEGIN    
   SELECT @BATCHCARDNUMBER = BatchNumber from batch with (nolock) where SerialNumber = @ReferenceBatchNumber1   
   -- check ReferenceBatchNumber1 is it open batch or not  
   SET @IsConsolidatedMultipleBatch = dbo.Ufn_DOT_GET_IsConsolidated(@ReferenceBatchNumber1,@PlantNo);  
   --SELECT @IsConsolidatedMultipleBatch=case when COUNT(1)>0 then 1 else 0 end FROM AXPostingLog with (NOLOCK) WHERE SerialNumber = @ReferenceBatchNumber1 AND IsConsolidated = 1  
   EXEC dbo.Usp_save_axpostinglog @FunctionIdentifier, @PostingType, @PostingDateTime, @BATCHCARDNUMBER, @ReferenceBatchNumber1, @IsPostedToAX, @IsPostedInAX, @Sequence, @ExceptionCode, @TransactionID, @Area, @IsConsolidatedMultipleBatch         
   IF @ReferenceBatchNumber2 is not null    
   BEGIN   
    -- check ReferenceBatchNumber2 is it open batch or not  
    SET @IsConsolidatedMultipleBatch = dbo.Ufn_DOT_GET_IsConsolidated(@ReferenceBatchNumber2,@PlantNo);  
    --SELECT @IsConsolidatedMultipleBatch=case when COUNT(1)>0 then 1 else 0 end FROM AXPostingLog with (NOLOCK) WHERE SerialNumber = @ReferenceBatchNumber2 AND IsConsolidated = 1  
    SELECT @BATCHCARDNUMBER = BatchNumber from batch with (nolock) where SerialNumber = @ReferenceBatchNumber2    
    EXEC dbo.Usp_save_axpostinglog @FunctionIdentifier, @PostingType, @PostingDateTime, @BATCHCARDNUMBER, @ReferenceBatchNumber2, @IsPostedToAX, @IsPostedInAX, @Sequence, @ExceptionCode, @TransactionID, @Area, @IsConsolidatedMultipleBatch    
    IF @ReferenceBatchNumber3 is not null    
    BEGIN  
     -- check ReferenceBatchNumber3 is it open batch or not  
     SET @IsConsolidatedMultipleBatch = dbo.Ufn_DOT_GET_IsConsolidated(@ReferenceBatchNumber3,@PlantNo);  
     --SELECT @IsConsolidatedMultipleBatch=case when COUNT(1)>0 then 1 else 0 end FROM AXPostingLog with (NOLOCK) WHERE SerialNumber = @ReferenceBatchNumber3 AND IsConsolidated = 1  
     SELECT @BATCHCARDNUMBER = BatchNumber from batch with (nolock) where SerialNumber = @ReferenceBatchNumber3    
     EXEC dbo.Usp_save_axpostinglog @FunctionIdentifier, @PostingType, @PostingDateTime, @BATCHCARDNUMBER, @ReferenceBatchNumber3, @IsPostedToAX, @IsPostedInAX, @Sequence, @ExceptionCode, @TransactionID, @Area, @IsConsolidatedMultipleBatch         
     IF @ReferenceBatchNumber4 is not null    
     BEGIN  
      -- check ReferenceBatchNumber4 batch is it open batch or not  
      SET @IsConsolidatedMultipleBatch = dbo.Ufn_DOT_GET_IsConsolidated(@ReferenceBatchNumber4,@PlantNo);  
      --SELECT @IsConsolidatedMultipleBatch=case when COUNT(1)>0 then 1 else 0 end FROM AXPostingLog with (NOLOCK) WHERE SerialNumber = @ReferenceBatchNumber4 AND IsConsolidated = 1  
      SELECT @BATCHCARDNUMBER = BatchNumber from batch with (nolock) where SerialNumber = @ReferenceBatchNumber4    
      EXEC dbo.Usp_save_axpostinglog @FunctionIdentifier, @PostingType, @PostingDateTime, @BATCHCARDNUMBER, @ReferenceBatchNumber4, @IsPostedToAX, @IsPostedInAX, @Sequence, @ExceptionCode, @TransactionID, @Area, @IsConsolidatedMultipleBatch        
      IF @ReferenceBatchNumber5 is not null    
      BEGIN  
       -- check ReferenceBatchNumber5 is it open batch or not  
       SET @IsConsolidatedMultipleBatch = dbo.Ufn_DOT_GET_IsConsolidated(@ReferenceBatchNumber5,@PlantNo);  
       --SELECT @IsConsolidatedMultipleBatch=case when COUNT(1)>0 then 1 else 0 end FROM AXPostingLog with (NOLOCK) WHERE SerialNumber = @ReferenceBatchNumber5 AND IsConsolidated = 1  
       SELECT @BATCHCARDNUMBER = BatchNumber from batch with (nolock) where SerialNumber = @ReferenceBatchNumber5    
       EXEC dbo.Usp_save_axpostinglog @FunctionIdentifier, @PostingType, @PostingDateTime, @BATCHCARDNUMBER, @ReferenceBatchNumber5, @IsPostedToAX, @IsPostedInAX, @Sequence, @ExceptionCode, @TransactionID, @Area, @IsConsolidatedMultipleBatch        
      END    
     END    
    END         
   END    
  END    
  ELSE    
  BEGIN       
   EXEC dbo.Usp_save_axpostinglog @FunctionIdentifier, @PostingType, @PostingDateTime, @BATCHCARDNUMBER, @SerialNumber, @IsPostedToAX, @IsPostedInAX, @Sequence, @ExceptionCode, @TransactionID,  @Area, @IsConsolidated          
  END      
   END            
   END          
   SET @ROW = @ROW + 1        
 SET @AccQty = @AccQty + @Quantity --#EWN qty validation with staging    
    -- Reset value        
   SET @InternalLotNumber='';          
   --SET @DateStockOut=null;        
   SET @BatchCardNumber='';        
   SET @BatchNumber='';         
   SET @FSIdentifier=null;        
   SET @FunctionIdentifier=null;        
   SET @ReferenceBatchNumber1=null;          
   SET @ReferenceBatchNumber2=null;          
   SET @ReferenceBatchNumber3=null;          
   SET @ReferenceBatchNumber4=null;          
   SET @ReferenceBatchNumber5=null;          
   SET @ReferenceBatchSequence1 = 0          
   SET @ReferenceBatchSequence2 = 0          
   SET @ReferenceBatchSequence3 = 0          
   SET @ReferenceBatchSequence4 = 0          
   SET @ReferenceBatchSequence5 = 0          
   SET @Sequence = 0;          
   SET @BatchOrderNumber=null;        
   SET @ReferenceItemNumber=null;        
   SET @Configuration=null;        
   SET @Warehouse = 'FG'          
   SET @Resource=null;        
   SET @CustomerPO=null;        
   --SET @CustomerReference=null;        
   --SET @SalesOrdernumber=null;        
   SET @InnerLotNumber=null;        
   SET @OuterLotNumber=null;        
   SET @CustomerLotNumber=null;        
   --SET @Preshipment = 0          
   SET @Preshipmentcases = 0          
   SET @InnerBoxCapacity = 0          
   SET @PostingDateTime = null          
   SET @Quantity = 0        
   SET @TotalQuantity = 0      --splitBatch    
   SET @ParentRefRecId = 0          
   SET @Location = ''          
   --SET @PalletNumber = ''          
   SET @ExpiryDate = null          
   SET @Manufacturingdate = null          
   --SET @IsMTS = 0          
   --SET @ItemNumber = NULL          
   SET @CreateDateTime = GETDATE()          
   --SET @PONumber =''          
   SET @PreshipmentCaseCount = 0          
   SET @RefNumberOfPieces1 = 0 --For SMBP          
   SET @RefNumberOfPieces2 = 0 --For SMBP          
   SET @RefNumberOfPieces3 = 0 --For SMBP          
   SET @RefNumberOfPieces4 = 0 --For SMBP          
   SET @RefNumberOfPieces5 = 0 --For SMBP          
   SET @RefItemNumber1 = NULL --For SMBP          
   SET @RefItemNumber2 = NULL --For SMBP          
   SET @RefItemNumber3 = NULL --For SMBP          
   SET @RefItemNumber4 = NULL --For SMBP          
   SET @RefItemNumber5 = NULL --For SMBP          
   SET @PostingType = 'DOTFGJournalContract'          
   SET @SerialNumber = ''        
   SET @IsPostedToAX = 1          
   SET @IsPostedInAX = 1          
   SET @ExceptionCode = NULL          
   SET @TransactionID = '-1'          
   SET @Area = 'PS'  
   SET @SPPBatchCardNumber = ''  --Surgical Packing Plan  
   SET @SPPBatchNumber = ''   --Surgical Packing Plan  
   SET @PickingListQuantity = 0  --Surgical Packing Plan  
   SET @BatchSequence = 0    --Surgical Packing Plan  
   SET @GloveSize = ''    --Surgical Packing Plan     
   SET @SumGloveSampleQuantity = 0 --Surgical Packing Plan     
   SET @GloveSampleQuantity = 0  --Surgical Packing Plan     
    -- Reset value        
    
END   -- while loop end      
   
 -- clean up        
 if OBJECT_ID('tempdb.dbo.#temptable') IS NOT NULL         
 BEGIN      
  DROP TABLE #temptable;         
 END    
      
 if OBJECT_ID('tempdb.dbo.#temptablePSI') IS NOT NULL         
 BEGIN      
  DROP TABLE #temptablePSI;        
 END    
        
 if OBJECT_ID('tempdb.dbo.#tempSOLineCount') IS NOT NULL         
 BEGIN      
  DROP TABLE #tempSOLineCount;        
 END       
         
 if OBJECT_ID('tempdb.dbo.#tempPOlineCount') IS NOT NULL         
 BEGIN      
  DROP TABLE #tempPOlineCount;        
 END      
    
 if OBJECT_ID('tempdb.dbo.#tempPalletMaxCase') IS NOT NULL         
 BEGIN      
  DROP TABLE #tempPalletMaxCase;        
 END       
    
 -- mark inventory 360 pallet complete table scan time  
 --update Inv360_CompletedPallet set DateScanned=GETDATE() where Id=@PalletCompletedId;  
  
 --if OBJECT_ID('tempdb.dbo.#tempPalletCompleted') IS NOT NULL         
 --BEGIN      
 -- DROP TABLE #tempPalletCompleted;        
 --END    
     
 END TRY          
          
 BEGIN CATCH          
 DECLARE @ErrorMessage NVARCHAR(4000);          
 DECLARE @ErrorSeverity INT;          
 DECLARE @ErrorState INT;          
 SELECT @ErrorMessage = Error_message(),          
   @ErrorSeverity = Error_severity(),          
   @ErrorState = Error_state();    
 Insert into FGReceivedPallet_Error(ScanDate, PalletID, ErrorMsg)    
 values(GETDATE(), @PalletID, 'DOT-'+@ErrorMessage)     
 RAISERROR (@ErrorMessage, @ErrorSeverity,@ErrorState);         
          
 END CATCH;          
          
 IF @@TRANCOUNT > 0     
 BEGIN         
 COMMIT TRANSACTION;      
    
 --#EWN qty validation with staging    
 IF @EWNQty = @AccQty    
 BEGIN    
  SET @Return=1;    
  Insert into FGReceivedPallet_Error(ScanDate, PalletID, ErrorMsg)    
  values(GETDATE(), @PalletID, 'DOT-Insert Success.')    
 END     
 ELSE    
 BEGIN    
  DECLARE @qtyStaging INT     
  SET @qtyStaging = (Select sum(Quantity) from DOT_FGJournalTable with (nolock) where IsDeleted=0 and palletnumber=@PalletID and salesordernumber=@PONumber     
       and ReferenceItemNumber = @ItemNumber);    
  IF @EWNQty = @qtyStaging    
  BEGIN    
   SET @Return=1;    
   Insert into FGReceivedPallet_Error(ScanDate, PalletID, ErrorMsg)    
   values(GETDATE(), @PalletID, 'DOT-Insert Success.')    
  END    
  ELSE    
  BEGIN    
   SET @Return=0;     
   Insert into FGReceivedPallet_Error(ScanDate, PalletID, ErrorMsg)    
   values(GETDATE(), @PalletID, 'DOT-Total quantity not tally with EWN, please re-scan!')    
  END    
 END    
    
 END        
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_GET_GLOVECATEGORY]...';


GO
  
-- =======================================================  
-- Name:             USP_DOT_GET_GLOVECATEGORY
-- Purpose:          To Get GloveCategory FROM Glove Code  
-- =======================================================  
-- Change History  
-- Date         Author     Comments  
-- -----        ------     -----------------------------  
-- 24/08/2014   NarendraNath    SP created.  
-- 26/03/2018   Azrul			SP updated.  
-- =======================================================  
CREATE PROCEDURE [dbo].[USP_DOT_GET_GLOVECATEGORY]  
(  
 @Glovecode NVARCHAR(50)  
   
)  
AS  
BEGIN  
 -- original script start --
 --SELECT GLOVECATEGORY FROM AX_AVAGLOVECODETABLE WITH(NOLOCK) WHERE GLOVECODE=@Glovecode  
 -- original script end --
 SELECT g.GLOVECATEGORY FROM DOT_FSGloveCode as g WITH(NOLOCK) LEFT JOIN 
							 DOT_FSItemMaster as m WITH(NOLOCK) ON g.ItemRecordId = m.Id 
 WHERE m.ItemId=@Glovecode  
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_GET_OutputTime]...';


GO
-- =========================================
-- Name:   USP_DOT_GET_OutputTime
-- Purpose:   Get HBC Output Time
-- =========================================
-- Change History  
-- Date    Author   Comments  
-- -----   ------   ------------------------
-- 30/04/2018  Azrul Amin    SP created.  
-- 02/01/2019  Azrul Amin    SP altered.  
-- =========================================
CREATE PROCEDURE [dbo].[USP_DOT_GET_OutputTime]  
( 
	@HBCReprintHours int
) 
AS  
BEGIN   
 SET NOCOUNT ON;  

DECLARE @Table TABLE(Time NVARCHAR(4))
DECLARE @i TINYINT = CONVERT(VARCHAR(2), getdate(), 108)

WHILE(@HBCReprintHours <> 0)
	BEGIN
		IF (@i = 0)
		BEGIN
			SET @i = 24
		END
		SET @i = @i - 1
		INSERT INTO @Table
		SELECT  @i
		SET @HBCReprintHours = @HBCReprintHours - 1
	END
	SELECT FORMAT(CONVERT(DATETIME,Time+':00',108),'HH00','en-us') AS Time FROM @Table ORDER BY Time
 SET NOCOUNT OFF;  
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_GET_PT_OR_QC_QITestResult]...';


GO
-- ==================================================================================================  
-- Name:   [USP_DOT_GET_PT_OR_QC_QITestResult]  
-- Purpose:   Get PT or QC Scan QI Test Result to detect double QAI result  
-- ==================================================================================================  
-- Change History  
-- Date               Author                     Comments  
-- -----   ------   ---------------------------------------------------------------------------------  
--  06, 01,2019    Max He       SP created.  
--  03, 17,2021   Azrul       Include surgical glove.  
--  12, 01,2021   Azrul       Include PTPF glove.  
-- ==================================================================================================  
CREATE   PROCEDURE [dbo].[USP_DOT_GET_PT_OR_QC_QITestResult]  
 @serialNumber numeric(10,0)  
  
 --set @serialNumber='1210563335'  
AS  
BEGIN  
 SET NOCOUNT ON;   
 declare @QCLastModDate datetime    
 declare @QCFirstModDate datetime    
 declare @PTLastModDate DATETIME    
 declare @QITestResult varchar(100)    
 declare @WasherScanInCount int    
 declare @DryerScanInCount int    
 declare @QCScanInCount int    
 declare @PTScanInCount int    
 declare @QITestResultCount int    
 Declare @QCType nchar(40)  
 Declare @serialStr nvarchar(20) = CAST(@SerialNumber as nvarchar(20))    
 DECLARE @isPTPF BIT = 0
 select @QCFirstModDate=min(LastModifiedOn) from QCYieldAndPacking WITH(NOLOCK) where serialnumber=@serialNumber    
 select @QCLastModDate=max(LastModifiedOn) from QCYieldAndPacking WITH(NOLOCK) where serialnumber=@serialNumber    
 select @PTLastModDate=max(LastModifiedOn) from PTScanBatchCard with(nolock) where serialnumber=@serialNumber    
 select @WasherScanInCount=count(1) from WasherScanBatchCard with(nolock) where ScanBatchEndDateTime is not null and SerialNumber=@serialNumber;    
 select @DryerScanInCount=count(1) from DryerScanBatchCard with(nolock) where ScanBatchEndDateTime is not null and SerialNumber=@serialNumber;    
 SELECT @PTScanInCount=count(1) FROM PTScanBatchCard with(nolock) WHERE serialnumber = @serialnumber;    
 select @QCScanInCount=count(1) from QCYieldAndPacking WITH(NOLOCK) where serialnumber=@serialNumber;    
 select @QITestResultCount=count(1) from QAI with(nolock) where QAIDate is not null and SerialNumber = @SerialNumber and QAIScreenName='ScanQITestResult';    
 select @isPTPF=(SELECT ISNULL(c.PTGLOVE, 0) FROM Batch (nolock) b LEFT JOIN AX_AVAGLOVECODETABLE_EXTENSION (NOLOCK) c ON c.GLOVECODE=b.GloveType WHERE b.SerialNumber=@SerialNumber)  
  
  IF EXISTS(SELECT 1 FROM  QCYieldandPacking with(nolock) WHERE serialNumber = @SerialNumber) --OQC    
  BEGIN    
   -- Try Get latest QC_QI Test Result    
   select top 1 @QITestResult = QITestResult    
   from QAI with(nolock)     
   where SerialNumber = @SerialNumber     
   --and QAIDate > @QCLastModDate  -- OLD code    
   and QAIDate > @QCLastModDate and @QCLastModDate >= ISNULL(@PTLastModDate, @QCLastModDate) -- Pang:Check if last QC date > last PT date    
   and QAIScreenName='ScanQITestResult'    
   order by qaiid desc;    
    
   --select latest QCType    
   select top 1 @QCType = b.RouteCategory    
   from QAI a with(nolock) join DOT_FSQCTypeTable b with(nolock) on a.QCType = b.QCType    
   where a.SerialNumber = @SerialNumber and a.QITestResult = 'Pass' and b.IsDeleted=0 and b.Stopped=0    
   order by qaiid desc;    
    
   IF EXISTS (SELECT 1 FROM PTScanBatchCard with(nolock) WHERE serialnumber = @serialnumber) --PT    
   BEGIN       
    if isnull(@QITestResult,'') = ''    
    BEGIN    
 -- If exam glove remain current logic  
    IF (NOT EXISTS (select 1 FROM DOT_FloorD365HRGLOVERPT a with(nolock) join DOT_FSItemMaster b WITH (NOLOCK)    
     on a.GloveCode = b.ItemId WHERE a.serialNo = @serialStr AND b.ItemType=109)  AND @isPTPF = 0)
 BEGIN  
  --  Try Get latest PT_QI Test Result and QCType: Pang add - start    
  IF EXISTS (SELECT TOP 1 1    
  FROM QAI with(nolock)     
  WHERE SerialNumber = @SerialNumber             
  AND QAIDate > @PTLastModDate and QITestResult = 'Pass' --Pang, get the QAI Test result with last PT scan in date    
  AND QAIScreenName='ScanQITestResult'     
  ORDER BY qaiid ASC)    
  BEGIN     
  SELECT @QITestResult = 'Pass'    
  END    
  --  PangYS add - end    
  ELSE    
  BEGIN    
  select top 1 @QITestResult = QITestResult    
  from QAI with(nolock)     
  where SerialNumber = @SerialNumber     
  --Try Get latest PT_QI Test Result and QCType    
  --Max, get the QAI Test result with last PT scan in date and first QC scan in date    
  and QAIDate > @PTLastModDate  and QAIDate < @QCFirstModDate    
  and QAIScreenName='ScanQITestResult'    
  order by qaiid desc;    
  END    
  END    
  ELSE  
  BEGIN  -- If Surgical or PTPF get latest PTQI result  
  select top 1 @QITestResult = QITestResult    
  from QAI with(nolock)     
  where SerialNumber = @SerialNumber     
  and QAIDate > @PTLastModDate    
  and QAIScreenName='ScanQITestResult'    
  order by qaiid desc;    
  END  
  SELECT 'PTQI' as Stage,@QITestResult as QIResult,    
  @WasherScanInCount as WasherScanInCount,@DryerScanInCount as DryerScanInCount,@PTScanInCount as PTScanInCount,    
  @QCScanInCount as QCScanInCount,@QITestResultCount as QITestResultCount,@QCType as QCType;    
  END  
    ELSE    
     BEGIN    
      SELECT 'QCQI' as Stage,@QITestResult as QIResult,    
      @WasherScanInCount as WasherScanInCount,@DryerScanInCount as DryerScanInCount,@PTScanInCount as PTScanInCount,    
      @QCScanInCount as QCScanInCount,@QITestResultCount as QITestResultCount,@QCType as QCType;    
     End    
   END        
   ELSE  -- go for OQC route    
   BEGIN     
    SELECT 'QCQI' as Stage,@QITestResult as QIResult,    
    @WasherScanInCount as WasherScanInCount,@DryerScanInCount as DryerScanInCount,@PTScanInCount as PTScanInCount,    
    @QCScanInCount as QCScanInCount,@QITestResultCount as QITestResultCount,@QCType as QCType;    
   END    
  END    
 ELSE IF EXISTS (SELECT 1 FROM PTScanBatchCard with(nolock) WHERE serialnumber = @serialnumber) --PT    
  BEGIN    
   -- If exam glove remain current logic  
   IF (NOT EXISTS (select 1 FROM DOT_FloorD365HRGLOVERPT a with(nolock) join DOT_FSItemMaster b WITH (NOLOCK)    
     on a.GloveCode = b.ItemId WHERE a.serialNo = @serialStr AND b.ItemType=109) AND @isPTPF = 0)  
   BEGIN  
    --  Try Get latest PT_QI Test Result and QCType: Pang add - start    
    IF EXISTS (SELECT TOP 1 1    
  FROM QAI with(nolock)     
  WHERE SerialNumber = @serialNumber             
  AND QAIDate > @PTLastModDate and QITestResult = 'Pass' --Pang, get the QAI Test result with last PT scan in date    
  AND QAIScreenName='ScanQITestResult'     
  ORDER BY qaiid ASC)    
    BEGIN     
  SELECT @QITestResult = 'Pass'    
    END    
    --  PangYS add - end    
    ELSE    
    BEGIN    
  -- Try Get latest PT_QI Test Result and QCType    
  select top 1 @QITestResult = QITestResult    
  from QAI with(nolock)     
  where SerialNumber = @SerialNumber     
  and QAIDate > @PTLastModDate    
  and QAIScreenName='ScanQITestResult'    
  order by qaiid desc;    
    END  
 END  
 ELSE -- If Surgical or PTPF get latest PTQI result  
 BEGIN  
  select top 1 @QITestResult = QITestResult    
  from QAI with(nolock)     
  where SerialNumber = @SerialNumber     
  and QAIDate > @PTLastModDate    
  and QAIScreenName='ScanQITestResult'    
  order by qaiid desc;    
 END  
  
   --select latest QCType    
   select top 1 @QCType = b.RouteCategory    
   from QAI a with(nolock) join DOT_FSQCTypeTable b with(nolock) on a.QCType = b.QCType    
   where a.SerialNumber = @SerialNumber and a.QITestResult = 'Pass' and b.IsDeleted=0 and b.Stopped=0    
   order by qaiid desc;    
    
   SELECT 'PTQI' as Stage,@QITestResult as QIResult,    
   @WasherScanInCount as WasherScanInCount,@DryerScanInCount as DryerScanInCount,@PTScanInCount as PTScanInCount,    
   @QCScanInCount as QCScanInCount,@QITestResultCount as QITestResultCount,@QCType as QCType;    
  END    
 ELSE    
  BEGIN    
   SELECT NULL as Stage,@QITestResult as QIResult,    
   @WasherScanInCount as WasherScanInCount,@DryerScanInCount as DryerScanInCount,@PTScanInCount as PTScanInCount,    
   @QCScanInCount as QCScanInCount,@QITestResultCount as QITestResultCount,@QCType as QCType;    
  END    
     
    SET NOCOUNT OFF;    
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_GetAllBatchOrderDetailList]...';


GO
-- =============================================  
-- Author:  <Azrul>  
-- Create date: <19-May-2021>  
-- Description: <Get All Batch Orders>  
-- =============================================  
CREATE PROCEDURE [dbo].[USP_DOT_GetAllBatchOrderDetailList]  
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
  
select b.BatchOrderNumber,count(1) BatchCardCount,min(b.PostingDateTime) as StartPostingDate,max(b.PostingDateTime) as EndPostingDate, 
sum(b.RAFGoodQty) as SumRAFGoodQty,sum(b.RAFHBSample) as SumRAFHBSample,sum(b.RAFVTSample) as SumRAFVTSample,sum(b.RAFWTSample) as SumRAFWTSample,
sum(b.BatchWeight) as SumBatchWeight, FunctionIdentifier, b.ItemNumber, b.Configuration, a.PlantNo, b.Location
from DOT_FloorAxIntParentTable a with(nolock)
join DOT_RafStgTable b with(nolock) on a.id=b.ParentRefRecId
where a.IsDeleted=0 and b.IsDeleted=0
and FunctionIdentifier in ('hbc','srbc') --and a.D365BatchNumber <> 'n/a' and IsNull(a.D365BatchNumber, '') = ''
--and b.BatchOrderNumber = 'HNBON000372646'
and a.creationtime > '2021-05-01' and a.CreationTime < '2021-05-02'
and a.PlantNo = 'p7'
group by b.BatchOrderNumber, a.FunctionIdentifier, b.ItemNumber, b.Configuration, a.PlantNo, b.Location
order by min(b.PostingDateTime)


END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_GetAllBatchOrderList]...';


GO
-- =============================================  
-- Author:  <Azrul>  
-- Create date: <19-May-2021>  
-- Description: <Get All Batch Orders>
--exec [dbo].[USP_DOT_GetAllBatchOrderList] '2021-08-01 12:59:59:999'
-- =============================================  
CREATE PROCEDURE [dbo].[USP_DOT_GetAllBatchOrderList]  
  @CutOffTime varchar(100)
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
 DECLARE @sql varchar(max);  
  SET @sql = ' 
 select a.* from(
select b.BatchOrderNumber,count(1) BatchCardCount, MIN(b.PostingDateTime) as StartPostingDate, MAX(b.PostingDateTime) as EndPostingDate, 
sum(b.RAFGoodQty) as SumRAFGoodQty,sum(b.RAFHBSample) as SumRAFHBSample,sum(b.RAFVTSample) as SumRAFVTSample,sum(b.RAFWTSample) as SumRAFWTSample,
sum(b.BatchWeight) as SumBatchWeight, FunctionIdentifier, b.ItemNumber, b.Configuration, a.PlantNo, b.Location
from DOT_FloorAxIntParentTable a with(nolock)
join DOT_RafStgTable b with(nolock) on a.id=b.ParentRefRecId
where a.IsDeleted=0 and b.IsDeleted=0
and a.FunctionIdentifier in (''HBC'',''SRBC'',''PNBC'') 
and a.ProcessingStatus in (0,1,4,5) and a.IsDeleted=0 and a.IsMigratedFromAX6 = 0 
and ISNULL(a.ReferenceBatchNumber1,'''') <> ''RESAMPLE'' 
and a.AutoConsoleMarking = 1 and a.IsConsolidated = 1 and a.ConsoleMarkingTime <=''' + @CutOffTime + ''' 
group by b.BatchOrderNumber, a.FunctionIdentifier, b.ItemNumber, b.Configuration, a.PlantNo, b.Location
) a'

  EXEC (@sql + ' order by a.StartPostingDate') 
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_GetAllBatchOrderListForCGLV]...';


GO

-- =============================================  
-- Author:  <Amir>  
-- Create date: <26-Nov-2021>  
-- Description: <Get All Glove Change Batch Orders>
--exec [dbo].[USP_DOT_GetAllBatchOrderListForCGLV] '2021-08-01 12:59:59:999'
-- =============================================  
CREATE   PROCEDURE [dbo].[USP_DOT_GetAllBatchOrderListForCGLV]  
  @CutOffTime varchar(100)
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
 DECLARE @sql varchar(max);  
  SET @sql = ' 
 select a.* from(
select b.BatchOrderNumber,count(1) BatchCardCount, MIN(b.PostingDateTime) as StartPostingDate, MAX(b.PostingDateTime) as EndPostingDate, 
sum(b.RAFGoodQty) as SumRAFGoodQty,sum(b.RAFHBSample) as SumRAFHBSample,sum(b.RAFVTSample) as SumRAFVTSample,sum(b.RAFWTSample) as SumRAFWTSample,
sum(b.BatchWeight) as SumBatchWeight, FunctionIdentifier, b.ItemNumber, b.Configuration, a.PlantNo, b.Location, b.ChangedItemNumber
from DOT_FloorAxIntParentTable a with(nolock)
join DOT_RafStgTable b with(nolock) on a.id=b.ParentRefRecId
where a.IsDeleted=0 and b.IsDeleted=0
and a.FunctionIdentifier in (''CGLV'') 
and a.ProcessingStatus in (0,1,4,5) and a.IsDeleted=0 and a.IsMigratedFromAX6 = 0 
and ISNULL(a.ReferenceBatchNumber1,'''') <> ''RESAMPLE'' 
and a.AutoConsoleMarking = 1 and a.IsConsolidated = 1 and a.ConsoleMarkingTime <=''' + @CutOffTime + ''' 
group by b.BatchOrderNumber, a.FunctionIdentifier, b.ItemNumber, b.Configuration, a.PlantNo, b.Location, b.ChangedItemNumber
) a'

  EXEC (@sql + ' order by a.StartPostingDate') 
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_GetAllFGBatchOrderList]...';


GO
-- =============================================      
-- Author:  <Azrul>      
-- Create date: <19-May-2021>      
-- Description: <Get All Batch Orders>      
--exec [dbo].[USP_DOT_GetAllFGBatchOrderList] '2021-12-16 16:35:18.2080000', 1   
-- =============================================      
CREATE PROCEDURE [dbo].[USP_DOT_GetAllFGBatchOrderList]      
  @CutOffTime varchar(100),    
  @IsSp int    
AS      
BEGIN      
 -- SET NOCOUNT ON added to prevent extra result sets from      
 -- interfering with SELECT statements.      
 SET NOCOUNT ON;      
 DECLARE @sql varchar(max);      
 DECLARE @sqlFilter varchar(max);      
      
 IF (@IsSp = 1)    
 BEGIN    
 SET @sqlFilter = 'a.ConsolidationSequence = ''1'''    
 END    
 ELSE    
 BEGIN    
 SET @sqlFilter = 'a.ConsolidationSequence <> ''1'''    
 END    
    
  SET @sql = '     
  select a.* from(     
  select case when isnull(b.CustomerReference,'''')='''' then e.BatchId else b.CustomerReference end CustomerReference,  
  b.Configuration,b.BatchOrderNumber,a.FunctionIdentifier, a.PlantNo, b.Location, b.SalesOrderNumber,    
  case when a.FunctionIdentifier = ''SGBC'' then b.ReferenceItemNumber else b.ItemNumber end as ItemNumber,    
  count(1) BatchCardCount, sum(a.FGQuantity) as SumFGQty, 0 as SumSampleQty,  isnull(CAST(d.BaseQuantity as DECIMAL),b.BaseQty) as BaseQuantity,    
  min(b.PostingDateTime) as StartPostingDate, max(b.PostingDateTime) as EndPostingDate,a.ConsolidationSequence,     
  min(a.LastModificationTime) as LastModificationTime,  
  b.IsWTS --MTS  
  from DOT_FloorAxIntParentTable a with(nolock)    
  join DOT_FGJournalTable b with(nolock) on a.id=b.ParentRefRecId    
  left join DOT_FloorSalesLine d with(nolock) on d.SalesId = b.SalesOrderNumber and d.IsDeleted = 0     
  AND d.ItemId = case when a.FunctionIdentifier = ''SGBC'' then b.ReferenceItemNumber else b.ItemNumber end     
  AND b.CONFIGURATION = case when a.FunctionIdentifier = ''SPPBC'' then d.CustomerSize else d.HartalegaCommonSize end    
  AND  d.IsDeleted = 0   
  left join DOT_FloorD365BO e with(nolock) on e.BthOrderId = b.BatchOrderNumber and e.IsDeleted = 0   
  where FunctionIdentifier in (''SBC'',''SGBC'',''SMBP'',''SPPBC'',''MTS'',''MMTS'')    
  and a.ProcessingStatus in (0,1,4,5) and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0     
  and a.AutoConsoleMarking=1 and a.ConsoleMarkingTime <=''' + @CutOffTime + '''     
  and ' + @sqlFilter + '    
  group by b.CustomerReference,b.BatchOrderNumber, a.FunctionIdentifier, b.ItemNumber, b.ReferenceItemNumber,b.Configuration, a.PlantNo, b.Location,     
  b.SalesOrderNumber,d.BaseQuantity,a.ConsolidationSequence,b.isWTS,b.BaseQty,e.BatchId  
  ) a'    
    
  EXEC (@sql + ' order by a.LastModificationTime')     
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_GetAllFGJournalList]...';


GO
-- =============================================      
-- Author:  <Azrul>      
-- Create date: <19-May-2021>      
-- Description: <Get All FG>      
-- exec USP_DOT_GetAllFGJournalList '2021-12-26 23:59:59:999','HSBBON000000226',1   
-- =============================================      
CREATE PROCEDURE [dbo].[USP_DOT_GetAllFGJournalList]      
  @CutOffTime varchar(100),    
  @BatchOrder NVARCHAR(100),    
  @ConsolidationSequence NVARCHAR(100)    
AS      
BEGIN      
 -- SET NOCOUNT ON added to prevent extra result sets from      
 -- interfering with SELECT statements.      
 SET NOCOUNT ON;      
     
DECLARE @sql varchar(max);      
 SET @sql = '      
 select a.* from (    
select a.Id as ParentId,b.BatchOrderNumber, b.Configuration as Config, 0.00 as SampleQuantity, a.PlantNo, a.Sequence as SequenceNo, a.BatchNumber as SerialNo,      
isnull(CAST(d.BaseQuantity as DECIMAL),b.BaseQty) as BaseQuantity,  
CAST(b.Quantity as DECIMAL) as Qty,   
isnull(CAST(b.Quantity * d.BaseQuantity as DECIMAL),b.GloveQty) as GloveQuantity,  
b.PostingDateTime,     
case when isnull(b.CustomerReference,'''') = '''' then e.BatchId else b.CustomerReference end as CustRef,   
CAST(a.PreshipmentCases as DECIMAL) as PreshipmentCases, a.LastModificationTime    
from DOT_FloorAxIntParentTable a with(nolock)    
join DOT_FGJournalTable b with(nolock) on a.id = b.ParentRefRecId    
left join DOT_FloorSalesLine d with(nolock) on d.SalesId = b.SalesOrderNumber and d.IsDeleted = 0     
AND d.ItemId = case when a.FunctionIdentifier = ''SGBC'' then b.ReferenceItemNumber else b.ItemNumber end     
AND d.HartalegaCommonSize = b.Configuration    
left join DOT_FloorD365BO e with(nolock) on e.BthOrderId = b.BatchOrderNumber and e.IsDeleted = 0   
where a.FunctionIdentifier in (''SBC'',''SGBC'',''MTS'')    
and a.IsDeleted = 0 and a.IsMigratedFromAX6 = 0 and a.IsConsolidated = 1      
and a.AutoConsoleMarking=1 and a.ConsoleMarkingTime <=''' + @CutOffTime + '''     
and a.ProcessingStatus in (0,1,4,5) -- SBC/SGBC not console      
and b.BatchOrderNumber = ''' + @BatchOrder + '''     
and a.ConsolidationSequence = ''' + @ConsolidationSequence + '''     
) a'    
    
 EXEC (@sql + ' order by a.LastModificationTime')      
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_GetAllHBCResampleList]...';


GO
-- =============================================  
-- Author:  <Azrul>  
-- Create date: <16-Aug-2021>  
-- Description: <Get All HBC Resample>  
-- exec USP_DOT_GetAllHBCResampleList @CutOffTime=N'2021-08-18 15:45:42.815'
-- =============================================  
CREATE PROCEDURE [dbo].[USP_DOT_GetAllHBCResampleList]  
  @CutOffTime varchar(100)
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
 
DECLARE @sql varchar(max);  
 SET @sql = '  
 select a.* from (
select b.ParentRefRecId as ParentId, b.RAFGoodQty,b.Weightof10Pcs,b.RAFHBSample,b.RAFVTSample,b.RAFWTSample,BatchWeight,b.BatchOrderNumber, 
b.Resource,b.PostingDateTime, a.PlantNo, a.ReferenceBatchNumber1, a.BatchNumber, a.Sequence
from DOT_FloorAxIntParentTable a with(nolock)
join DOT_RafStgTable b with(nolock) on a.id=b.ParentRefRecId
where a.IsDeleted = 0 and b.IsDeleted = 0 and a.IsConsolidated = 1 
and a.FunctionIdentifier in (''HBC'') 
and ISNULL(a.ReferenceBatchNumber1,'''') = ''RESAMPLE'' 
and a.ProcessingStatus in (0,1,4,5) and a.IsDeleted=0 and a.IsMigratedFromAX6 = 0 
and a.AutoConsoleMarking=1 and a.ConsoleMarkingTime <=''' + @CutOffTime + ''' 
) a'

 EXEC (@sql + ' order by a.PostingDateTime') 
END

GO
PRINT N'Creating Procedure [dbo].[USP_DOT_GetAllIntegrationInquiryDetails]...';


GO
-- ================================================================    
-- Change History    
-- Date			Author		Comments    
-- -----		------		---------------------------------------    
-- 16/10/2019	Azrul		EXEC USP_DOT_GetAllIntegrationInquiryDetails 
-- ================================================================  
    
CREATE   PROCEDURE [dbo].[USP_DOT_GetAllIntegrationInquiryDetails]            
(            
 @filter varchar(max) = '1=1'       
)             
AS            
BEGIN          
DECLARE @sql varchar(max);   
SET @sql = 'SELECT 
	a.PostingDateTime [Posting Date Time]
	,a.BatchCardNumber [Batch Card Number]
	,a.BatchNumber [Batch Number]
	,a.Sequence
	,a.FunctionIdentifier [Function Identifier]
	,case when a.ProcessingStatus=0 then ''Not Start''
		else case when a.ProcessingStatus=1 then ''Ready''
			else case when a.ProcessingStatus=2 then ''In Progress''
				else case when a.ProcessingStatus=3 then ''Completed''
						else case when a.ProcessingStatus=4 then ''Error''
								else case when a.ProcessingStatus=5 then ''OnHold''
									else case when a.ProcessingStatus=6 then ''OutOfPeriod'' end
									end
								end
						end
				end
			end
		end as [Processing Status]
	,a.ErrorMessage [Error Message]
	,a.ReferenceBatchNumber1 [Reference Batch Number 1]
	,a.ReferenceBatchNumber2 [Reference Batch Number 2]
	,a.ReferenceBatchNumber3 [Reference Batch Number 3]
	,a.ReferenceBatchNumber4 [Reference Batch Number 4]
	,a.ReferenceBatchNumber5 [Reference Batch Number 5]
	,a.ReferenceBatchSequence1 [Reference Batch Sequence 1]
	,a.ReferenceBatchSequence2 [Reference Batch Sequence 2]
	,a.ReferenceBatchSequence3 [Reference Batch Sequence 3]
	,a.ReferenceBatchSequence4 [Reference Batch Sequence 4]
	,a.ReferenceBatchSequence5 [Reference Batch Sequence 5]
	,a.PalletId [Pallet No]
	,a.Id [Record Id]
	,a.FSIdentifier [FS->D365 Guid Ref]
	,a.PlantNo  [Plant No]
	,a.BatchOrderNumber as [Batch Order Number]
	,a.FGItemNo as [FG Item No]
	,a.ItemNumber as [Item Number]
	,a.Configuration as [Item Size]
	,a.Location as [Location]
	,a.Warehouse as [Warehouse]
	,a.SalesOrderNumber
	,a.Quantity
	,a.CustomerPO
	,a.CustomerReference as [Customer Reference]
	,a.InnerLotNumber
	,a.OuterLotNumber
	,a.CustomerLotNumber as [CustomerLot]
	,a.IsPSI as [Is PSI]
	,a.PreshipmentCases  as [PSI Cases]
	,a.PickingJournalId as [Picking Journal Id]
	,a.RAFJournalId as [RAF Journal Id]
	,a.RouteCardJournalId as [Route Card Journal Id]
	,a.RefNumberOfPieces1
	,a.RefItemNumber1
	,a.RefNumberOfPieces2
	,a.RefItemNumber2
	,a.RefNumberOfPieces3
	,a.RefItemNumber3
	,a.RefNumberOfPieces4
	,a.RefItemNumber4
	,a.RefNumberOfPieces5
	,a.RefItemNumber5
	,a.IsWTS
	,a.ResourceGroup
	,a.Shift
	,a.MovementJournalId as [Movement Journal Id]
	,a.QCType
	,a.TenPcsWeight
	,a.BatchWeight as [Batch Weight]
	,a.OperationNo as [Operation No]
	,a.HBBatchNumber as [Hotbox Batch Number]
	,a.RAFHBSample as [RAF HB Sample]
	,a.VTBatchNumber as [Visual Test Batch No]
	,a.RAFVTSample as [RAF VT Sample]
	,a.WTBatchNumber as [Wet Test Batch No]
	,a.RAFWTSample as [RAF WT Sample]
	,a.SampleWarehouse as [Sample Warehouse]
	,a.Resource
	,a.RouteCategory as [Route Category]
	,a.RejectedQuantity as [Rejected Qty]
	,a.SecondGradeQuantity as [Second Grade Qty]
	,a.RejectedSampleQuantity as [Rejected Sample Qty]

	,a.DeliveryDate
	,a.Pool
	,a.TransferJournalId as [Transfer Journal Id]
	,a.IsOrignalTemppack
FROM UFN_DOT_GetAllStagingParent() a WHERE ' + @filter 

EXEC ( @sql )     
END

GO
PRINT N'Update complete.';

