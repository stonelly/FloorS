/*
Deployment script for FloorSystem

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

--GO
--SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

--SET NUMERIC_ROUNDABORT OFF;


--GO
--:setvar DatabaseName "FloorSystem"
--:setvar DefaultFilePrefix "FloorSystem"
--:setvar DefaultDataPath "D:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
--:setvar DefaultLogPath "D:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

--GO
--:on error exit
--GO
--/*
--Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
--To re-enable the script after enabling SQLCMD mode, execute the following:
--SET NOEXEC OFF; 
--*/
--:setvar __IsSqlCmdEnabled "True"
--GO
--IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
--    BEGIN
--        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
--        SET NOEXEC ON;
--    END


--GO
--USE [$(DatabaseName)];


GO
PRINT N'Dropping Default Constraint unnamed constraint on [dbo].[DOT_FloorSales]...';


GO
ALTER TABLE [dbo].[DOT_FloorSales] DROP CONSTRAINT [DF__DOT_Floor__IsDel__5726DC2D];


GO
PRINT N'Starting rebuilding table [dbo].[PurchaseOrderItem]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_PurchaseOrderItem] (
    [PONumber]                    NVARCHAR (20)    NOT NULL,
    [PreshipmentPlan]             INT              NULL,
    [ItemNumber]                  NVARCHAR (40)    NULL,
    [ItemSize]                    NVARCHAR (30)    NULL,
    [ItemCases]                   INT              NULL,
    [InnersetLayout]              NVARCHAR (30)    NULL,
    [OuterSetLayout]              NVARCHAR (30)    NULL,
    [CustomerSize]                NVARCHAR (15)    NULL,
    [CustomerSizeDesc]            NVARCHAR (60)    NULL,
    [GrossWeight]                 NUMERIC (32, 16) NULL,
    [NettWeight]                  NUMERIC (32, 16) NULL,
    [CaseCapacity]                INT              NULL,
    [PalletCapacity]              INT              NULL,
    [InnerBoxCapacity]            INT              NULL,
    [CustomerLotNumber]           NVARCHAR (20)    NULL,
    [ItemName]                    NVARCHAR (60)    NULL,
    [MANUFACTURINGDATEBASIS]      INT              NULL,
    [POStatus]                    INT              NULL,
    [InnerProductCode]            NVARCHAR (30)    NULL,
    [OuterProductCode]            NVARCHAR (30)    NULL,
    [BrandName]                   NVARCHAR (30)    NULL,
    [Expiry]                      INT              NULL,
    [ProductReferenceNumber]      NVARCHAR (25)    NULL,
    [SpecialInnerCode]            INT              NULL,
    [SpecialInnerCodeCharacter]   NVARCHAR (15)    NULL,
    [GCLabelPrintingRequired]     INT              NULL,
    [AlternateGloveCode1]         NVARCHAR (50)    NULL,
    [AlternateGloveCode2]         NVARCHAR (50)    NULL,
    [AlternateGloveCode3]         NVARCHAR (50)    NULL,
    [CustomerName]                NVARCHAR (60)    NULL,
    [LastModifiedOn]              DATETIME         NOT NULL,
    [LocationId]                  INT              NOT NULL,
    [ItemStatus]                  BIT              NULL,
    [BarcodeVerificationRequired] INT              NULL,
    [GloveCode]                   NVARCHAR (50)    NULL,
    [OrderNumber]                 NVARCHAR (20)    NULL,
    [CustomerReferenceNumber]     NVARCHAR (60)    NULL,
    [ITEMTYPE]                    INT              NULL,
    [Preshipmentcases]            NVARCHAR (2000)  NULL,
    [Reference2]                  NVARCHAR (25)    NULL,
    [InventTransId]               NVARCHAR (25)    NULL,
    [SHIPPINGDATEREQUESTED]       DATETIME         NULL,
    [InnerLabelSetDateFormat]     NVARCHAR (20)    NULL,
    [OuterLabelSetDateFormat]     NVARCHAR (20)    NULL,
    [PKID]                        BIGINT           IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [FirstManufacuringDate]       DATETIME         NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_PurchaseOrderItem_PKID1] PRIMARY KEY CLUSTERED ([PKID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[PurchaseOrderItem])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_PurchaseOrderItem] ON;
        INSERT INTO [dbo].[tmp_ms_xx_PurchaseOrderItem] ([PKID], [PONumber], [PreshipmentPlan], [ItemNumber], [ItemSize], [ItemCases], [InnersetLayout], [OuterSetLayout], [InnerLabelSetDateFormat], [OuterLabelSetDateFormat], [CustomerSize], [CustomerSizeDesc], [GrossWeight], [NettWeight], [CaseCapacity], [PalletCapacity], [InnerBoxCapacity], [CustomerLotNumber], [ItemName], [MANUFACTURINGDATEBASIS], [POStatus], [InnerProductCode], [OuterProductCode], [BrandName], [Expiry], [ProductReferenceNumber], [SpecialInnerCode], [SpecialInnerCodeCharacter], [GCLabelPrintingRequired], [AlternateGloveCode1], [AlternateGloveCode2], [AlternateGloveCode3], [CustomerName], [LastModifiedOn], [LocationId], [ItemStatus], [BarcodeVerificationRequired], [GloveCode], [OrderNumber], [CustomerReferenceNumber], [ITEMTYPE], [Preshipmentcases], [Reference2], [InventTransId], [SHIPPINGDATEREQUESTED], [FirstManufacuringDate])
        SELECT   [PKID],
                 [PONumber],
                 [PreshipmentPlan],
                 [ItemNumber],
                 [ItemSize],
                 [ItemCases],
                 [InnersetLayout],
                 [OuterSetLayout],
                 [InnerLabelSetDateFormat],
                 [OuterLabelSetDateFormat],
                 [CustomerSize],
                 [CustomerSizeDesc],
                 [GrossWeight],
                 [NettWeight],
                 [CaseCapacity],
                 [PalletCapacity],
                 [InnerBoxCapacity],
                 [CustomerLotNumber],
                 [ItemName],
                 [MANUFACTURINGDATEBASIS],
                 [POStatus],
                 [InnerProductCode],
                 [OuterProductCode],
                 [BrandName],
                 [Expiry],
                 [ProductReferenceNumber],
                 [SpecialInnerCode],
                 [SpecialInnerCodeCharacter],
                 [GCLabelPrintingRequired],
                 [AlternateGloveCode1],
                 [AlternateGloveCode2],
                 [AlternateGloveCode3],
                 [CustomerName],
                 [LastModifiedOn],
                 [LocationId],
                 [ItemStatus],
                 [BarcodeVerificationRequired],
                 [GloveCode],
                 [OrderNumber],
                 [CustomerReferenceNumber],
                 [ITEMTYPE],
                 [Preshipmentcases],
                 [Reference2],
                 [InventTransId],
                 [SHIPPINGDATEREQUESTED],
                 [FirstManufacuringDate]
        FROM     [dbo].[PurchaseOrderItem]
        ORDER BY [PKID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_PurchaseOrderItem] OFF;
    END

DROP TABLE [dbo].[PurchaseOrderItem];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_PurchaseOrderItem]', N'PurchaseOrderItem';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_PurchaseOrderItem_PKID1]', N'PK_PurchaseOrderItem_PKID', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Index [dbo].[PurchaseOrderItem].[PONumber]...';


GO
CREATE NONCLUSTERED INDEX [PONumber]
    ON [dbo].[PurchaseOrderItem]([PONumber] ASC);


GO
PRINT N'Creating Synonym [dbo].[syMPStblRevisedSalesOrderFromFS]...';


GO
CREATE SYNONYM [dbo].[syMPStblRevisedSalesOrderFromFS] FOR [MPSLinkedServer].[MPSDB_D365].[dbo].[tblRevisedSalesOrderFromFS];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_EwPostingLog]...';


GO
ALTER TABLE [dbo].[DOT_EwPostingLog]
    ADD DEFAULT ((0)) FOR [IsDeleted];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_EwPostingLog]...';


GO
ALTER TABLE [dbo].[DOT_EwPostingLog]
    ADD DEFAULT ('00000000-0000-0000-0000-000000000000') FOR [PalletSerialNo];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_EwPostingLog]...';


GO
ALTER TABLE [dbo].[DOT_EwPostingLog]
    ADD DEFAULT ((0)) FOR [IsEwarenaviPosted];


GO
PRINT N'Creating Default Constraint [dbo].[DF__DOT_FGJou__IsMTS__1A3A8F95]...';


GO
ALTER TABLE [dbo].[DOT_FGJournalTable]
    ADD CONSTRAINT [DF__DOT_FGJou__IsMTS__1A3A8F95] DEFAULT ((0)) FOR [IsWTS];


GO
PRINT N'Creating Default Constraint [dbo].[DF__DOT_FGJou__Paren__67E419F2]...';


GO
ALTER TABLE [dbo].[DOT_FGJournalTable]
    ADD CONSTRAINT [DF__DOT_FGJou__Paren__67E419F2] DEFAULT ((0)) FOR [ParentRefRecId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FGJournalTable]...';


GO
ALTER TABLE [dbo].[DOT_FGJournalTable]
    ADD DEFAULT ((0)) FOR [BatchSequence];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FGJournalTable]...';


GO
ALTER TABLE [dbo].[DOT_FGJournalTable]
    ADD DEFAULT ((0.0)) FOR [BaseQty];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FGJournalTable]...';


GO
ALTER TABLE [dbo].[DOT_FGJournalTable]
    ADD DEFAULT ((0.0)) FOR [GloveQty];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FGJournalTable]...';


GO
ALTER TABLE [dbo].[DOT_FGJournalTable]
    ADD DEFAULT ((0.0)) FOR [GloveSampleQuantity];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FGJournalTable]...';


GO
ALTER TABLE [dbo].[DOT_FGJournalTable]
    ADD DEFAULT ((0.0)) FOR [PickingListQuantity];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FGSumLocationTableDetails]...';


GO
ALTER TABLE [dbo].[DOT_FGSumLocationTableDetails]
    ADD DEFAULT (N'') FOR [GloveSize];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FGSumTable]...';


GO
ALTER TABLE [dbo].[DOT_FGSumTable]
    ADD DEFAULT (CONVERT([bit],(0))) FOR [IsWTS];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FGSumTable]...';


GO
ALTER TABLE [dbo].[DOT_FGSumTable]
    ADD DEFAULT ((0.0)) FOR [BaseQuantity];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FGSumTableDetails]...';


GO
ALTER TABLE [dbo].[DOT_FGSumTableDetails]
    ADD DEFAULT (CONVERT([bigint],(0))) FOR [ParentRefRecId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FGSumTableDetails]...';


GO
ALTER TABLE [dbo].[DOT_FGSumTableDetails]
    ADD DEFAULT ((0)) FOR [ProcessingStatus];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorAxIntParentTable]...';


GO
ALTER TABLE [dbo].[DOT_FloorAxIntParentTable]
    ADD DEFAULT ((0)) FOR [PreshipmentCases];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorAxIntParentTable]...';


GO
ALTER TABLE [dbo].[DOT_FloorAxIntParentTable]
    ADD DEFAULT ('00000000-0000-0000-0000-000000000000') FOR [PalletSerialNo];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorAxIntParentTable]...';


GO
ALTER TABLE [dbo].[DOT_FloorAxIntParentTable]
    ADD DEFAULT ((0.0)) FOR [FGQuantity];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorAxIntParentTable]...';


GO
ALTER TABLE [dbo].[DOT_FloorAxIntParentTable]
    ADD DEFAULT (CONVERT([bit],(0))) FOR [IsAdjusted];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorAxIntParentTable]...';


GO
ALTER TABLE [dbo].[DOT_FloorAxIntParentTable]
    ADD DEFAULT ((0)) FOR [Preshipment];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorAxIntParentTable]...';


GO
ALTER TABLE [dbo].[DOT_FloorAxIntParentTable]
    ADD DEFAULT (CONVERT([bit],(0))) FOR [AutoConsoleMarking];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorAxIntParentTable]...';


GO
ALTER TABLE [dbo].[DOT_FloorAxIntParentTable]
    ADD DEFAULT (CONVERT([bit],(0))) FOR [IsConsolidated];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorAxIntParentTable]...';


GO
ALTER TABLE [dbo].[DOT_FloorAxIntParentTable]
    ADD DEFAULT ('0001-01-01T00:00:00.0000000') FOR [ConsoleMarkingTime];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorAxIntParentTable]...';


GO
ALTER TABLE [dbo].[DOT_FloorAxIntParentTable]
    ADD DEFAULT ('0') FOR [ConsolidationSequence];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorAxIntParentTable]...';


GO
ALTER TABLE [dbo].[DOT_FloorAxIntParentTable]
    ADD DEFAULT ((0.0)) FOR [GloveSampleQuantity];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorAxIntParentTable]...';


GO
ALTER TABLE [dbo].[DOT_FloorAxIntParentTable]
    ADD DEFAULT (N'') FOR [D365BatchNumber];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorAxIntParentTable]...';


GO
ALTER TABLE [dbo].[DOT_FloorAxIntParentTable]
    ADD DEFAULT ((0)) FOR [IsEwarenaviPosted];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorAxIntParentTable]...';


GO
ALTER TABLE [dbo].[DOT_FloorAxIntParentTable]
    ADD DEFAULT ((0)) FOR [IsMigratedFromAX6];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorAxIntParentTable]...';


GO
ALTER TABLE [dbo].[DOT_FloorAxIntParentTable]
    ADD DEFAULT (CONVERT([bit],(0))) FOR [IsCalculated];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorD365BO]...';


GO
ALTER TABLE [dbo].[DOT_FloorD365BO]
    ADD DEFAULT ((0)) FOR [ManufacturingDateOn];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorD365BO]...';


GO
ALTER TABLE [dbo].[DOT_FloorD365BO]
    ADD DEFAULT ((0)) FOR [GCLabel];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorD365BO]...';


GO
ALTER TABLE [dbo].[DOT_FloorD365BO]
    ADD DEFAULT ((0.0)) FOR [GrossWeight];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorD365BO]...';


GO
ALTER TABLE [dbo].[DOT_FloorD365BO]
    ADD DEFAULT ((0)) FOR [GlovesInnerboxNo];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorD365BO]...';


GO
ALTER TABLE [dbo].[DOT_FloorD365BO]
    ADD DEFAULT ((0)) FOR [LotVerification];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorD365BO]...';


GO
ALTER TABLE [dbo].[DOT_FloorD365BO]
    ADD DEFAULT ((0)) FOR [PreShipmentPlan];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorD365BO]...';


GO
ALTER TABLE [dbo].[DOT_FloorD365BO]
    ADD DEFAULT ((0)) FOR [InnerboxinCaseNo];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorD365BO]...';


GO
ALTER TABLE [dbo].[DOT_FloorD365BO]
    ADD DEFAULT ((0)) FOR [Expiry];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorD365BO]...';


GO
ALTER TABLE [dbo].[DOT_FloorD365BO]
    ADD DEFAULT ((0)) FOR [SpecialInnerCode];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorD365BO]...';


GO
ALTER TABLE [dbo].[DOT_FloorD365BO]
    ADD DEFAULT ((0.0)) FOR [NetWeight];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorD365BO]...';


GO
ALTER TABLE [dbo].[DOT_FloorD365BO]
    ADD DEFAULT ((0)) FOR [PalletCapacity];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorD365BO]...';


GO
ALTER TABLE [dbo].[DOT_FloorD365BO]
    ADD DEFAULT ((0)) FOR [MadeToStockStatus];


GO
PRINT N'Creating Default Constraint [dbo].[DF__DOT_Floor__Recor__681987B0]...';


GO
ALTER TABLE [dbo].[DOT_FloorD365BOResource]
    ADD CONSTRAINT [DF__DOT_Floor__Recor__681987B0] DEFAULT ((0)) FOR [RecordId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_FloorD365HRGLOVERPT]...';


GO
ALTER TABLE [dbo].[DOT_FloorD365HRGLOVERPT]
    ADD DEFAULT ((0)) FOR [SeqNo];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_InventBatchSum]...';


GO
ALTER TABLE [dbo].[DOT_InventBatchSum]
    ADD DEFAULT ((0.0)) FOR [CountedQty];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_InventJournalBatchNo]...';


GO
ALTER TABLE [dbo].[DOT_InventJournalBatchNo]
    ADD DEFAULT ((0.0)) FOR [AdjustmentQty];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_InventJournalBatchNo]...';


GO
ALTER TABLE [dbo].[DOT_InventJournalBatchNo]
    ADD DEFAULT (CONVERT([bigint],(0))) FOR [TransId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_InventJournalBatchNo]...';


GO
ALTER TABLE [dbo].[DOT_InventJournalBatchNo]
    ADD DEFAULT (CONVERT([bigint],(0))) FOR [JournalId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_InventJournalBatchNo]...';


GO
ALTER TABLE [dbo].[DOT_InventJournalBatchNo]
    ADD DEFAULT (N'') FOR [Warehouse];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_InventJournalTable]...';


GO
ALTER TABLE [dbo].[DOT_InventJournalTable]
    ADD DEFAULT ((0)) FOR [LineCount];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_InventJournalTable]...';


GO
ALTER TABLE [dbo].[DOT_InventJournalTable]
    ADD DEFAULT ((0)) FOR [Status];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_InventJournalTrans]...';


GO
ALTER TABLE [dbo].[DOT_InventJournalTrans]
    ADD DEFAULT ((0.0)) FOR [CountedQty];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_InventJournalTrans]...';


GO
ALTER TABLE [dbo].[DOT_InventJournalTrans]
    ADD DEFAULT (N'') FOR [D365CountingJournalNo];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_InventJournalTrans]...';


GO
ALTER TABLE [dbo].[DOT_InventJournalTrans]
    ADD DEFAULT ((0.0)) FOR [AdjustmentQty];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_InventJournalTrans]...';


GO
ALTER TABLE [dbo].[DOT_InventJournalTrans]
    ADD DEFAULT ((0)) FOR [Status];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_InventJournalTrans]...';


GO
ALTER TABLE [dbo].[DOT_InventJournalTrans]
    ADD DEFAULT ((0.0)) FOR [OnHandQty];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_InventJournalTrans]...';


GO
ALTER TABLE [dbo].[DOT_InventJournalTrans]
    ADD DEFAULT (CONVERT([bigint],(0))) FOR [JournalId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_LocationConsoleMaster]...';


GO
ALTER TABLE [dbo].[DOT_LocationConsoleMaster]
    ADD DEFAULT (N'') FOR [LocationName];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_PickingSumTable]...';


GO
ALTER TABLE [dbo].[DOT_PickingSumTable]
    ADD DEFAULT ((0)) FOR [referenceBatchStatus3];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_PickingSumTable]...';


GO
ALTER TABLE [dbo].[DOT_PickingSumTable]
    ADD DEFAULT ((0)) FOR [referenceBatchStatus1];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_PickingSumTable]...';


GO
ALTER TABLE [dbo].[DOT_PickingSumTable]
    ADD DEFAULT ((0)) FOR [referenceBatchStatus2];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_RafSumTable]...';


GO
ALTER TABLE [dbo].[DOT_RafSumTable]
    ADD DEFAULT ('0001-01-01T00:00:00.0000000') FOR [PostingDateTime];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_RafSumTable]...';


GO
ALTER TABLE [dbo].[DOT_RafSumTable]
    ADD DEFAULT ((0)) FOR [RecordCount];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_RafSumTableDetails]...';


GO
ALTER TABLE [dbo].[DOT_RafSumTableDetails]
    ADD DEFAULT ((0.0)) FOR [RAFVTSample];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_RafSumTableDetails]...';


GO
ALTER TABLE [dbo].[DOT_RafSumTableDetails]
    ADD DEFAULT (CONVERT([bigint],(0))) FOR [ParentRefRecId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_RafSumTableDetails]...';


GO
ALTER TABLE [dbo].[DOT_RafSumTableDetails]
    ADD DEFAULT ((0.0)) FOR [GloveQty];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_RafSumTableDetails]...';


GO
ALTER TABLE [dbo].[DOT_RafSumTableDetails]
    ADD DEFAULT ((0.0)) FOR [RAFHBSample];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_RafSumTableDetails]...';


GO
ALTER TABLE [dbo].[DOT_RafSumTableDetails]
    ADD DEFAULT ((0.0)) FOR [RAFWTSample];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_RwkBatchOrderCreationChildTable]...';


GO
ALTER TABLE [dbo].[DOT_RwkBatchOrderCreationChildTable]
    ADD DEFAULT ((0)) FOR [isRWKDeleted];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_RwkcrSumTable]...';


GO
ALTER TABLE [dbo].[DOT_RwkcrSumTable]
    ADD DEFAULT ((0.0)) FOR [BatchWeight];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_RwkcrSumTable]...';


GO
ALTER TABLE [dbo].[DOT_RwkcrSumTable]
    ADD DEFAULT ((0.0)) FOR [RAFHBSample];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_RwkcrSumTable]...';


GO
ALTER TABLE [dbo].[DOT_RwkcrSumTable]
    ADD DEFAULT ((0.0)) FOR [RAFWTSample];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_RwkcrSumTable]...';


GO
ALTER TABLE [dbo].[DOT_RwkcrSumTable]
    ADD DEFAULT ((0.0)) FOR [RejectedQuantity];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_RwkcrSumTable]...';


GO
ALTER TABLE [dbo].[DOT_RwkcrSumTable]
    ADD DEFAULT ((0.0)) FOR [SecondGradeQuantity];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_RwkcrSumTable]...';


GO
ALTER TABLE [dbo].[DOT_RwkcrSumTable]
    ADD DEFAULT ((0.0)) FOR [Weightof10Pcs];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_RwkcrSumTable]...';


GO
ALTER TABLE [dbo].[DOT_RwkcrSumTable]
    ADD DEFAULT ((0.0)) FOR [RAFGoodQty];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_RwkcrSumTable]...';


GO
ALTER TABLE [dbo].[DOT_RwkcrSumTable]
    ADD DEFAULT ((0.0)) FOR [RAFVTSample];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_RwkcrSumTable]...';


GO
ALTER TABLE [dbo].[DOT_RwkcrSumTable]
    ADD DEFAULT ((0.0)) FOR [RejectedSampleQuantity];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_ScheduleJobsV2]...';


GO
ALTER TABLE [dbo].[DOT_ScheduleJobsV2]
    ADD DEFAULT ((0)) FOR [IntervalSeconds];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_ScheduleJobsV2]...';


GO
ALTER TABLE [dbo].[DOT_ScheduleJobsV2]
    ADD DEFAULT (CONVERT([bit],(0))) FOR [RepeatForever];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_ScheduleJobsV2]...';


GO
ALTER TABLE [dbo].[DOT_ScheduleJobsV2]
    ADD DEFAULT ((0)) FOR [Priority];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_ScheduleJobsV2]...';


GO
ALTER TABLE [dbo].[DOT_ScheduleJobsV2]
    ADD DEFAULT ((0)) FOR [UIBatchSeq];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_ScheduleJobsV2]...';


GO
ALTER TABLE [dbo].[DOT_ScheduleJobsV2]
    ADD DEFAULT ((0)) FOR [JobCategory];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DOT_TransferJournal]...';


GO
ALTER TABLE [dbo].[DOT_TransferJournal]
    ADD DEFAULT ((0)) FOR [IsOrignalTemppack];


GO
PRINT N'Creating Statistic [dbo].[DOT_FloorD365BO].[_dta_stat_2042051530_12_21_8_3]...';


GO
CREATE STATISTICS [_dta_stat_2042051530_12_21_8_3]
    ON [dbo].[DOT_FloorD365BO]([ProdPoolId], [Size], [IsDeleted], [BthOrderId]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FloorD365BO].[_dta_stat_2042051530_12_21_8_9_3]...';


GO
CREATE STATISTICS [_dta_stat_2042051530_12_21_8_9_3]
    ON [dbo].[DOT_FloorD365BO]([ProdPoolId], [Size], [IsDeleted], [ItemId], [BthOrderId]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FloorD365BO].[_dta_stat_2042051530_2_12_21]...';


GO
CREATE STATISTICS [_dta_stat_2042051530_2_12_21]
    ON [dbo].[DOT_FloorD365BO]([BatchId], [ProdPoolId], [Size]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FloorD365BO].[_dta_stat_2042051530_21_9_12]...';


GO
CREATE STATISTICS [_dta_stat_2042051530_21_9_12]
    ON [dbo].[DOT_FloorD365BO]([Size], [ItemId], [ProdPoolId]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FloorD365BO].[_dta_stat_2042051530_21_9_2_3_8]...';


GO
CREATE STATISTICS [_dta_stat_2042051530_21_9_2_3_8]
    ON [dbo].[DOT_FloorD365BO]([Size], [ItemId], [BatchId], [BthOrderId], [IsDeleted]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FloorD365BO].[_dta_stat_2042051530_3_12_21]...';


GO
CREATE STATISTICS [_dta_stat_2042051530_3_12_21]
    ON [dbo].[DOT_FloorD365BO]([BthOrderId], [ProdPoolId], [Size]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FloorD365BO].[_dta_stat_2042051530_9_12]...';


GO
CREATE STATISTICS [_dta_stat_2042051530_9_12]
    ON [dbo].[DOT_FloorD365BO]([ItemId], [ProdPoolId]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FloorD365BO].[_dta_stat_2042051530_9_21_3_12]...';


GO
CREATE STATISTICS [_dta_stat_2042051530_9_21_3_12]
    ON [dbo].[DOT_FloorD365BO]([ItemId], [Size], [BthOrderId], [ProdPoolId]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FloorSales].[_dta_stat_610499553_17_22_12]...';


GO
CREATE STATISTICS [_dta_stat_610499553_17_22_12]
    ON [dbo].[DOT_FloorSales]([SalesId], [WorkflowStatus], [IsDeleted]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FloorSales].[_dta_stat_610499553_17_4_12_22]...';


GO
CREATE STATISTICS [_dta_stat_610499553_17_4_12_22]
    ON [dbo].[DOT_FloorSales]([SalesId], [CustomerRef], [IsDeleted], [WorkflowStatus]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FloorSales].[_dta_stat_610499553_4_22_12]...';


GO
CREATE STATISTICS [_dta_stat_610499553_4_22_12]
    ON [dbo].[DOT_FloorSales]([CustomerRef], [WorkflowStatus], [IsDeleted]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FloorSalesLine].[_dta_stat_642499667_13_2_14]...';


GO
CREATE STATISTICS [_dta_stat_642499667_13_2_14]
    ON [dbo].[DOT_FloorSalesLine]([IsDeleted], [CONFIGURATION], [ItemId]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FloorSalesLine].[_dta_stat_642499667_14_12_13]...';


GO
CREATE STATISTICS [_dta_stat_642499667_14_12_13]
    ON [dbo].[DOT_FloorSalesLine]([ItemId], [ITEMTYPE], [IsDeleted]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FloorSalesLine].[_dta_stat_642499667_2_12]...';


GO
CREATE STATISTICS [_dta_stat_642499667_2_12]
    ON [dbo].[DOT_FloorSalesLine]([CONFIGURATION], [ITEMTYPE]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FloorSalesLine].[_dta_stat_642499667_2_14_23_12]...';


GO
CREATE STATISTICS [_dta_stat_642499667_2_14_23_12]
    ON [dbo].[DOT_FloorSalesLine]([CONFIGURATION], [ItemId], [SalesId], [ITEMTYPE]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FloorSalesLine].[_dta_stat_642499667_2_14_23_13]...';


GO
CREATE STATISTICS [_dta_stat_642499667_2_14_23_13]
    ON [dbo].[DOT_FloorSalesLine]([CONFIGURATION], [ItemId], [SalesId], [IsDeleted]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FloorSalesLine].[_dta_stat_642499667_23_12_13_2]...';


GO
CREATE STATISTICS [_dta_stat_642499667_23_12_13_2]
    ON [dbo].[DOT_FloorSalesLine]([SalesId], [ITEMTYPE], [IsDeleted], [CONFIGURATION]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FloorSalesLine].[_dta_stat_642499667_23_2_12]...';


GO
CREATE STATISTICS [_dta_stat_642499667_23_2_12]
    ON [dbo].[DOT_FloorSalesLine]([SalesId], [CONFIGURATION], [ITEMTYPE]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FSBrandHeaders].[_dta_stat_674499781_1_28_15]...';


GO
CREATE STATISTICS [_dta_stat_674499781_1_28_15]
    ON [dbo].[DOT_FSBrandHeaders]([Id], [ItemId], [IsDeleted]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FSBrandHeaders].[_dta_stat_674499781_15_1]...';


GO
CREATE STATISTICS [_dta_stat_674499781_15_1]
    ON [dbo].[DOT_FSBrandHeaders]([IsDeleted], [Id]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FSBrandHeaders].[_dta_stat_674499781_28_15]...';


GO
CREATE STATISTICS [_dta_stat_674499781_28_15]
    ON [dbo].[DOT_FSBrandHeaders]([ItemId], [IsDeleted]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FSBrandLines].[_dta_stat_904254263_13_29]...';


GO
CREATE STATISTICS [_dta_stat_904254263_13_29]
    ON [dbo].[DOT_FSBrandLines]([HartalegaCommonSize], [ItemId]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FSBrandLines].[_dta_stat_904254263_2_29_13]...';


GO
CREATE STATISTICS [_dta_stat_904254263_2_29_13]
    ON [dbo].[DOT_FSBrandLines]([BaseQuantity], [ItemId], [HartalegaCommonSize]);


GO
PRINT N'Creating Statistic [dbo].[DOT_FSItemMaster].[_dta_stat_866500465_13_8]...';


GO
CREATE STATISTICS [_dta_stat_866500465_13_8]
    ON [dbo].[DOT_FSItemMaster]([Name], [ItemId]);


--GO
--PRINT N'Creating Foreign Key [dbo].[FK_AbpPermissions_AbpRoles_RoleId]...';


--GO
--ALTER TABLE [dbo].[AbpPermissions] WITH NOCHECK
--    ADD CONSTRAINT [FK_AbpPermissions_AbpRoles_RoleId] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[AbpRoles] ([Id]) ON DELETE CASCADE;


--GO
--PRINT N'Creating Foreign Key [dbo].[FK_AbpPermissions_AbpUsers_UserId]...';


--GO
--ALTER TABLE [dbo].[AbpPermissions] WITH NOCHECK
--    ADD CONSTRAINT [FK_AbpPermissions_AbpUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AbpUsers] ([Id]) ON DELETE CASCADE;


--GO
--PRINT N'Creating Foreign Key [dbo].[FK_AbpRoleClaims_AbpRoles_RoleId]...';


--GO
--ALTER TABLE [dbo].[AbpRoleClaims] WITH NOCHECK
--    ADD CONSTRAINT [FK_AbpRoleClaims_AbpRoles_RoleId] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[AbpRoles] ([Id]) ON DELETE CASCADE;


--GO
--PRINT N'Creating Foreign Key [dbo].[FK_AbpRoles_AbpUsers_CreatorUserId]...';


--GO
--ALTER TABLE [dbo].[AbpRoles] WITH NOCHECK
--    ADD CONSTRAINT [FK_AbpRoles_AbpUsers_CreatorUserId] FOREIGN KEY ([CreatorUserId]) REFERENCES [dbo].[AbpUsers] ([Id]);


--GO
--PRINT N'Creating Foreign Key [dbo].[FK_AbpRoles_AbpUsers_DeleterUserId]...';


--GO
--ALTER TABLE [dbo].[AbpRoles] WITH NOCHECK
--    ADD CONSTRAINT [FK_AbpRoles_AbpUsers_DeleterUserId] FOREIGN KEY ([DeleterUserId]) REFERENCES [dbo].[AbpUsers] ([Id]);


--GO
--PRINT N'Creating Foreign Key [dbo].[FK_AbpRoles_AbpUsers_LastModifierUserId]...';


--GO
--ALTER TABLE [dbo].[AbpRoles] WITH NOCHECK
--    ADD CONSTRAINT [FK_AbpRoles_AbpUsers_LastModifierUserId] FOREIGN KEY ([LastModifierUserId]) REFERENCES [dbo].[AbpUsers] ([Id]);


--GO
--PRINT N'Creating Foreign Key [dbo].[FK_AbpSettings_AbpUsers_UserId]...';


--GO
--ALTER TABLE [dbo].[AbpSettings] WITH NOCHECK
--    ADD CONSTRAINT [FK_AbpSettings_AbpUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AbpUsers] ([Id]);


--GO
--PRINT N'Creating Foreign Key [dbo].[FK_AbpTenants_AbpEditions_EditionId]...';


--GO
--ALTER TABLE [dbo].[AbpTenants] WITH NOCHECK
--    ADD CONSTRAINT [FK_AbpTenants_AbpEditions_EditionId] FOREIGN KEY ([EditionId]) REFERENCES [dbo].[AbpEditions] ([Id]);


--GO
--PRINT N'Creating Foreign Key [dbo].[FK_AbpTenants_AbpUsers_CreatorUserId]...';


--GO
--ALTER TABLE [dbo].[AbpTenants] WITH NOCHECK
--    ADD CONSTRAINT [FK_AbpTenants_AbpUsers_CreatorUserId] FOREIGN KEY ([CreatorUserId]) REFERENCES [dbo].[AbpUsers] ([Id]);


--GO
--PRINT N'Creating Foreign Key [dbo].[FK_AbpTenants_AbpUsers_DeleterUserId]...';


--GO
--ALTER TABLE [dbo].[AbpTenants] WITH NOCHECK
--    ADD CONSTRAINT [FK_AbpTenants_AbpUsers_DeleterUserId] FOREIGN KEY ([DeleterUserId]) REFERENCES [dbo].[AbpUsers] ([Id]);


--GO
--PRINT N'Creating Foreign Key [dbo].[FK_AbpTenants_AbpUsers_LastModifierUserId]...';


--GO
--ALTER TABLE [dbo].[AbpTenants] WITH NOCHECK
--    ADD CONSTRAINT [FK_AbpTenants_AbpUsers_LastModifierUserId] FOREIGN KEY ([LastModifierUserId]) REFERENCES [dbo].[AbpUsers] ([Id]);


--GO
--PRINT N'Creating Foreign Key [dbo].[FK_AbpUserRoles_AbpUsers_UserId]...';


--GO
--ALTER TABLE [dbo].[AbpUserRoles] WITH NOCHECK
--    ADD CONSTRAINT [FK_AbpUserRoles_AbpUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AbpUsers] ([Id]) ON DELETE CASCADE;


--GO
--PRINT N'Creating Foreign Key [dbo].[FK_AbpUsers_AbpUsers_CreatorUserId]...';


--GO
--ALTER TABLE [dbo].[AbpUsers] WITH NOCHECK
--    ADD CONSTRAINT [FK_AbpUsers_AbpUsers_CreatorUserId] FOREIGN KEY ([CreatorUserId]) REFERENCES [dbo].[AbpUsers] ([Id]);


--GO
--PRINT N'Creating Foreign Key [dbo].[FK_AbpUsers_AbpUsers_DeleterUserId]...';


--GO
--ALTER TABLE [dbo].[AbpUsers] WITH NOCHECK
--    ADD CONSTRAINT [FK_AbpUsers_AbpUsers_DeleterUserId] FOREIGN KEY ([DeleterUserId]) REFERENCES [dbo].[AbpUsers] ([Id]);


--GO
--PRINT N'Creating Foreign Key [dbo].[FK_AbpUsers_AbpUsers_LastModifierUserId]...';


--GO
--ALTER TABLE [dbo].[AbpUsers] WITH NOCHECK
--    ADD CONSTRAINT [FK_AbpUsers_AbpUsers_LastModifierUserId] FOREIGN KEY ([LastModifierUserId]) REFERENCES [dbo].[AbpUsers] ([Id]);


GO
PRINT N'Altering Trigger [dbo].[trg_insert_avabrandlines_ins]...';


GO
DISABLE TRIGGER [dbo].[trg_insert_avabrandlines_ins]
    ON [dbo].[DOT_FSBrandLines];


GO
PRINT N'Altering Trigger [dbo].[trg_insert_avabrandlines_upd]...';


GO
DISABLE TRIGGER [dbo].[trg_insert_avabrandlines_upd]
    ON [dbo].[DOT_FSBrandLines];


GO
PRINT N'Creating Trigger [dbo].[DuplicatePallet_Checking]...';


GO


CREATE TRIGGER [dbo].[DuplicatePallet_Checking]
ON [dbo].[DOT_FGJournalTable]
AFTER INSERT
AS 
 IF (ROWCOUNT_BIG() = 0)
 Return;	
 BEGIN
 Declare @Transqty Int
Select @Transqty = Count(1) 
 FROM DOT_FGJournalTable a with (nolock)
join DOT_FloorAxIntParentTable p with(nolock) on a.ParentRefRecId=p.Id
join inserted b on a.PalletNumber = b.PalletNumber
and a.InnerLotNumber = b.InnerLotNumber
and a.Configuration = b.Configuration
and a.SalesOrderNumber = b.SalesOrderNumber
and a.ReferenceItemNumber = b.ReferenceItemNumber
and a.Quantity = b.Quantity
and a.BatchNumber = b.BatchNumber   --additional filter checkings for SPP
and a.GloveSize = b.GloveSize		--additional filter checkings for SPP
and a.Preshipment = b.Preshipment	--additional filter checkings for SPP
where p.IsDeleted=0
IF(@Transqty>1)

 Begin
	RAISERROR (N'Duplicated Pallet %d.',  10,  1,@TransQty ); -- Second argument. 
	ROLLBACK;
 End
END
GO
PRINT N'Creating Trigger [dbo].[DuplicateBOResource_Checking]...';


GO
CREATE TRIGGER [dbo].[DuplicateBOResource_Checking]
ON [dbo].[DOT_FloorD365BOResource]
AFTER INSERT
AS 
 if (ROWCOUNT_BIG() =0)
 return;
 begin
    declare @Transqty as int;
	select 
		@Transqty = count(1)
		from DOT_FloorD365BOResource a with(nolock) 
		join inserted b on a.BatchOrderId=b.BatchOrderId and a.Resource=b.Resource and a.ResourceGrp=b.ResourceGrp
		group by a.BatchOrderId,a.Resource,a.ResourceGrp
	 if(@Transqty>1)
	 Begin
		RAISERROR (N'Unusual Resource is to create %d.',  10,  1,@Transqty ); -- Second argument. 
		rollback;
	 End
END
GO
PRINT N'Altering View [dbo].[VW_GloveDimensionBrands]...';


GO


-- =============================================

-- Author: pang yik siu
-- modified date: <11 Jan 2021>
-- Description:   CR Glove Dimension Add TMP brands
-- =============================================
ALTER VIEW [dbo].[VW_GloveDimensionBrands] AS

	SELECT 
		a.Id, a.GloveCode, b.[Desc] AS BrandName, NULL ItemId, CAST(1 AS bit) AS TMPBrand
	FROM  GloveDimensionTMPBrandMapping a (nolock)
		JOIN CodeMaster (nolock) b ON a.TMPBrandCodeMasterId = b.CodeMasterId
	WHERE b.CodeMasterType = 'MAT.App.eFloor.CodeMaster.CodeMasterType.GloveDimensionTMPBrand'

	UNION

	SELECT 
		fs.Id, fs.GloveCode, [Name] AS BrandName, fs.ItemId, CAST(0 AS bit) AS TMPBrand
	FROM DOT_FSItemMaster AS fs WITH(NOLOCK) INNER JOIN
		DOT_FSBrandHeaders AS bh WITH(NOLOCK) ON fs.ItemId = bh.ItemId
	WHERE (fs.IsDeleted = 0) AND (bh.IsDeleted = 0)
GO
PRINT N'Creating Function [dbo].[ufn_GetForQCEfficiencyReport]...';


GO



CREATE FUNCTION [dbo].[ufn_GetForQCEfficiencyReport] (@SerialNumber NUMERIC) 

RETURNS @TempSummaryTable TABLE
(
	QCID INT,
	ID INT IDENTITY(1, 1)
	,ProcessInd NVARCHAR(10)
	,BalancePcs DECIMAL(18, 3)
	,PackedPcs DECIMAL(18, 3)
	,RejectPcs DECIMAL(18, 3)
	,GloveTransferPcs DECIMAL(18, 3)
	,SumPackedPcs DECIMAL(18, 3)
	,SumRejectPcs DECIMAL(18, 3)
	,SumGloveTransferPcs DECIMAL(18, 3)
	,ProcessDate DATETIME
)

AS
BEGIN

	DECLARE @TempBatchProcesses TABLE(
		QCID INT,
		ProcessInd NVARCHAR(10)
		,Pcs DECIMAL(18, 3)
		,ProcessDate DATETIME
		,ItemId NVARCHAR(80)
		,BatchStatus NVARCHAR(30)
		)

	DECLARE @TempProcessingTable TABLE(
		QCID INT,
		ID INT IDENTITY(1, 1)
		,ProcessInd NVARCHAR(10)
		,Pcs DECIMAL(18, 3)
		,ProcessDate DATETIME
		,ItemId NVARCHAR(80)
		,BatchStatus NVARCHAR(30)
		)

	--inser pn info
	INSERT INTO @TempBatchProcesses
	SELECT NULL as ID,'PN'
		,TotalPCs
		,BatchCardDate
		,NULL
		,NULL
	FROM Batch WITH(NOLOCK)
	WHERE SerialNumber = @SerialNumber

	--insert qc info
	INSERT INTO @TempBatchProcesses
	SELECT ID, 'QC'
		,(InnerBoxCount * PackingSize)
		,BatchEndTime
		,NULL
		,BatchStatus
	FROM QCYieldAndPacking WITH(NOLOCK)
	WHERE SerialNumber = @SerialNumber
	AND BatchEndTime IS NOT NULL

	--insert pt info
	INSERT INTO @TempBatchProcesses
	SELECT NULL as ID, 'PT'
		,ROUND((BatchWeight*10000)/TenPcsWeight,-1)--(BatchWeight/TenPcsWeight) * 10000 -- yiksiu: FIx PT rounding issue
		,LastModifiedOn
		,NULL
		,NULL
	FROM PTScanBatchCard WITH(NOLOCK)
	WHERE SerialNumber = @SerialNumber
	AND LastModifiedOn IS NOT NULL

	--insert fp info excluding from fp change batch card
	INSERT INTO @TempBatchProcesses
	SELECT NULL as ID, 'FP'
		--,(c.InnerBoxCapacity * a.BoxesPacked)
		,CASE WHEN a.BoxesPacked = 0 THEN a.Pcs ELSE (c.InnerBoxCapacity * a.BoxesPacked) END
		,PackDate
		,a.InternalLotNumber
		,NULL
	FROM FinalPackingBatchInfo a WITH(NOLOCK)
	INNER JOIN FinalPacking b WITH(NOLOCK) ON a.InternalLotNumber = b.InternalLotNumber
	INNER JOIN PurchaseOrderItem c WITH(NOLOCK) ON b.PONumber = c.PONumber
		AND b.Size = c.ItemSize
		AND b.ItemNumber = c.ItemNumber
	WHERE a.SerialNumber = @SerialNumber
	AND a.InternalLotNumber 
	NOT IN (SELECT InternalLotNumber FROM FPChangeBatchCard WITH(NOLOCK) WHERE NewSerialNumber = @SerialNumber)

	--insert fp info from fp change batch card 
	INSERT INTO @TempBatchProcesses
	SELECT NULL as ID, 'FP'
		,(c.InnerBoxCapacity * a.BoxesPacked)
		,d.LastModifiedOn
		,b.ItemNumber
		,NULL
	FROM FinalPackingBatchInfo a WITH(NOLOCK)
	INNER JOIN FinalPacking b WITH(NOLOCK) ON a.InternalLotNumber = b.InternalLotNumber
	INNER JOIN PurchaseOrderItem c WITH(NOLOCK) ON b.PONumber = c.PONumber
	INNER JOIN FPChangeBatchCard d WITH(NOLOCK) ON d.ChangeBatchCardId = 
	(SELECT TOP 1 ChangeBatchCardId FROM FPChangeBatchCard WITH(NOLOCK) WHERE NewSerialNumber = a.SerialNumber AND InternalLotNumber = a.InternalLotNumber)
		AND b.Size = c.ItemSize
		AND b.ItemNumber = c.ItemNumber
	WHERE a.SerialNumber = @SerialNumber

	-- insert Glove Transfer (Add GloveTransfer module (PSI glove))
	INSERT INTO @TempBatchProcesses
	SELECT NULL as ID, 'GT'
		,a.AssignedQuantity
		,a.ModifiedDate
		,NULL
		,NULL
	FROM GloveTransferRequestAssignment a (NOLOCK)
	JOIN GloveTransferRequestDetail b (NOLOCK) ON a.GloveTransferRequestDetailId = b.GloveTransferRequestDetailId 
	JOIN GloveTransferRequest c (NOLOCK) ON b.GloveTransferRequestId = c.GloveTransferRequestId
	WHERE a.SerialNumber = @SerialNumber
		AND c.GloveTransferAssignmentStatus = 1 -- Confirmed the register list. before sent to PSI personal. PSI personal will confirm again once received (GloveTransferReceiptStatus)
	-- // Approved > Register serialNo > Confirmed  -- SerilaNo always in approved status
		--AND c.GloveTransferRequestStatus = 2 -- glove request always approved 

	--Azman 27082020 Surgical Packing Plan Start

	INSERT INTO @TempBatchProcesses
	select NULL as ID, 'SPP', A.ReservedQty, A.CreatedDate, NULL, NULL from SurgicalPackingPlanDetails (nolock) A
	INNER JOIN SurgicalPackingPlan (nolock) B ON A.SurgicalPackingPlanId = B.SurgicalPackingPlanId
	WHERE B.PlanStatus = 1
	AND A.SerialNumber = @SerialNumber

	--Azman 27082020 Surgical Packing Plan End

	--insert id based on process date
	INSERT INTO @TempProcessingTable
	SELECT QCID, ProcessInd, Pcs, ProcessDate, ItemId, BatchStatus FROM @TempBatchProcesses ORDER BY ProcessDate ASC

	DECLARE @Iteration INT
	DECLARE @IterationMax INT
	DECLARE @ProcessInd NVARCHAR(10)
	DECLARE @Pcs DECIMAL(18, 3)
	DECLARE @PrevPcs DECIMAL(18, 3)
	DECLARE @ProcessDate DATETIME
	DECLARE @BalancePcs DECIMAL(18, 3)
	DECLARE @PrevBalancePcs DECIMAL(18, 3)
	DECLARE @PNProcessDate DATETIME
	DECLARE @ItemId NVARCHAR(80)
	DECLARE @SumPackedPcs DECIMAL(18, 3)
	DECLARE @SumRejectPcs DECIMAL(18, 3)
	DECLARE @SumGloveTransferPcs DECIMAL(18, 3)
	DECLARE @BatchStatus NVARCHAR(30)
	DECLARE @PrevBatchStatus NVARCHAR(30)
	DECLARE @RejectPcs DECIMAL(18, 3)
	DECLARE @FPisZero varchar(5) = 0
	DECLARE @QCID INT

	SELECT @BalancePcs = Pcs, @PNProcessDate = ProcessDate FROM @TempProcessingTable WHERE ProcessInd = 'PN'

	SELECT @IterationMax = COUNT(ID) FROM @TempProcessingTable

	--for pn/start pcs
	INSERT INTO @TempSummaryTable
	VALUES (@QCID,'PN',@BalancePcs,0,0,0,0,0,0,@PNProcessDate)

	SET @Iteration = 1
	
	WHILE (@Iteration) <= (@IterationMax)  
	BEGIN
		--select current processing data
		SELECT 
		@QCID = QCID,
		@ProcessInd = ProcessInd
			,@Pcs = Pcs
			,@ProcessDate = ProcessDate
			,@ItemId = ItemId
			,@BatchStatus = BatchStatus
		FROM @TempProcessingTable
		WHERE ID = @Iteration
		
		SELECT @PrevBalancePcs = BalancePcs
		FROM @TempSummaryTable
		WHERE ID = @Iteration - 1

		SELECT @PrevBatchStatus = BatchStatus, @PrevPcs = Pcs
		FROM @TempProcessingTable
		WHERE ID = @Iteration - 1

		SELECT @SumPackedPcs = SUM(PackedPcs), @SumRejectPcs = SUM(RejectPcs), @SumGloveTransferPcs = SUM(GloveTransferPcs)
		FROM @TempSummaryTable
		
		IF (@BalancePcs >= 0)
		BEGIN
			IF (@ProcessInd = 'FP')
			BEGIN
				
				--Azman 02/09/2020 SPP Enhancement
				IF EXISTS(SELECT 1 FROM SurgicalPackingPlan WITH(NOLOCK) WHERE InternalLotNo = @ItemId AND PlanStatus IN (2,3))
				BEGIN
					SET @Pcs = @Pcs
					SET @ProcessInd = @ProcessInd + '(S)'
				END
				ELSE IF EXISTS(SELECT 1 FROM FinalPacking A WITH(NOLOCK) INNER JOIN AX_AVABRANDHEADER B WITH(NOLOCK) ON A.ItemNumber = B.ITEMID WHERE A.InternalLotNumber = @ItemId AND B.HSB_WIPITEMTYPE = 8)
				BEGIN
					SET @Pcs = @Pcs /2
					SET @ProcessInd = @ProcessInd + '(S)'
				END
				
				SET @BalancePcs = @PrevBalancePcs - @Pcs

				INSERT INTO @TempSummaryTable
				VALUES (@QCID,@ProcessInd,@BalancePcs,@Pcs,0,0,@SumPackedPcs+@Pcs,@SumRejectPcs,@SumGloveTransferPcs,@ProcessDate)

				/*
				--if it is surgical, pcs is divided by 2
				IF EXISTS(SELECT 1 FROM AX_AVABRANDHEADER WITH(NOLOCK) WHERE ITEMID = @ItemId AND HSB_WIPITEMTYPE = 8)
				BEGIN
					SET @Pcs = @Pcs / 2
					SET @ProcessInd = @ProcessInd + '(S)'
				END
				
				SET @BalancePcs = @PrevBalancePcs - @Pcs

				INSERT INTO @TempSummaryTable
				VALUES (@ProcessInd,@BalancePcs,@Pcs,0,0,@SumPackedPcs+@Pcs,@SumRejectPcs,@SumGloveTransferPcs,@ProcessDate)
				*/
			END
			ELSE IF (@ProcessInd = 'QC' OR @ProcessInd = 'PT')
			BEGIN
			
				--if previous status is split batch, add prev pcs to current pcs
				IF (@PrevBatchStatus = 'Split Batch')
				BEGIN
					SET @Pcs = @Pcs + @PrevPcs
				END

				--if split batch or qc type changed, there is no rejection 
				IF (@BatchStatus = 'Split Batch') OR (@BatchStatus = 'QC Type Changed')
				BEGIN
					SET @BalancePcs = @PrevBalancePcs  
					SET @RejectPcs = 0

					IF (@BatchStatus = 'Split Batch')
						SET @ProcessInd = @ProcessInd + '(SB)'
					ELSE
						SET @ProcessInd = @ProcessInd + '(TC)'

					INSERT INTO @TempSummaryTable
					VALUES (@QCID,@ProcessInd,@BalancePcs,0,@RejectPcs,0,@SumPackedPcs,@SumRejectPcs,@SumGloveTransferPcs,@ProcessDate)
				END
				ELSE
				BEGIN
					--check if latest pcs is greater than prev balance pcs. if greater, take prev balance pcs as default
					IF (@Pcs > @PrevBalancePcs)
					BEGIN

						IF @PrevBalancePcs = 0
						BEGIN
							SET @BalancePcs=@Pcs
							INSERT INTO @TempSummaryTable
							VALUES (@QCID,@ProcessInd,@BalancePcs,0,isnull(@RejectPcs,0),0,0,0,0,@ProcessDate)
						END
						ELSE
						BEGIN
							SET @BalancePcs = @PrevBalancePcs
							INSERT INTO @TempSummaryTable
							VALUES (@QCID,@ProcessInd,@BalancePcs,0,0,0,@SumPackedPcs,@SumRejectPcs,@SumGloveTransferPcs,@ProcessDate)
						END
						
						--SET @BalancePcs = @PrevBalancePcs

	
					END
					ELSE
					BEGIN
						SET @BalancePcs = @Pcs
						SET @RejectPcs = (@PrevBalancePcs - @Pcs)

						INSERT INTO @TempSummaryTable
						VALUES (@QCID,@ProcessInd,@BalancePcs,0,@RejectPcs,0,@SumPackedPcs,@SumRejectPcs+@RejectPcs,@SumGloveTransferPcs,@ProcessDate)
					END
				END
			END
			ELSE IF (@ProcessInd = 'GT')
			BEGIN 
				SET @BalancePcs = @PrevBalancePcs - @Pcs

				INSERT INTO @TempSummaryTable
				VALUES (@QCID,@ProcessInd,@BalancePcs,0,0,@Pcs,@SumPackedPcs,@SumRejectPcs,@SumGloveTransferPcs+@Pcs,@ProcessDate)
			END
			ELSE IF (@ProcessInd = 'SPP') -- Added by Azman (SPP)
			BEGIN 
				SET @BalancePcs = @PrevBalancePcs - @Pcs

				INSERT INTO @TempSummaryTable
				VALUES (@QCID,@ProcessInd,@BalancePcs,@Pcs,0,0,0,0,0,@ProcessDate)
			END
		END
		

		SET @Iteration = @Iteration + 1
	END


	RETURN
END
GO
PRINT N'Altering Procedure [dbo].[proc_Rpt_Shipping_WorkOrder_Status]...';


GO

-- ======================================================================================================    
-- Author		=	  Yong Faat
-- Create date	=	  3rd April 2015
-- Description	=	 

--------------------------------------------------------------------------------------------------------

-- Updated By			=
-- Updated Date			= 
-- Updated Description  = 
-- 16/03/2021		Azman			eFS Stand
-- =======================================================================================================    

ALTER PROCEDURE [dbo].[proc_Rpt_Shipping_WorkOrder_Status]
(
	@Parameter Nvarchar(200)
)

AS
BEGIN

---------------------------------------------- * Get Packed data from the purchase Order item cases * -----------------------------------------------------		 
		
		DECLARE @tmpParam TABLE
		(
			Id int IDENTITY(1,1),
			StrValue nvarchar(200)
		)
		DECLARE @PONumber nvarchar(20)
		DECLARE @CustomerRef nvarchar(60)

		INSERT @tmpParam SELECT LTRIM(RTRIM(Item)) FROM dbo.SplitString(@Parameter, '|')
		SET @PONumber		= (SELECT StrValue FROM @tmpParam WHERE Id = 2)
		SET @CustomerRef	= (SELECT StrValue FROM @tmpParam WHERE Id = 1)

---------------------------------------------- * Get Packed data from the purchase Order item cases * -----------------------------------------------------		 
		
		IF OBJECT_ID('tempPurchaseOrderItemCases', 'U') IS NOT NULL
		BEGIN
		  DROP TABLE	tempPurchaseOrderItemCases
		END
		
		SELECT        PONumber,
					  ItemNumber,
					  Size, 
					  CustomerSize,
		              Count(PONumber) as Printed 
		INTO		  tempPurchaseOrderItemCases
		FROM          [PurchaseOrderItemCases] PIC
		WHERE         InternalotNumber IS NOT NULL AND PONumber = @PONumber
		GROUP BY      PONumber, ItemNumber, Size, CustomerSize
	
---------------------------------------------- * End Get Packed data from the purchase Order item cases * -----------------------------------------------------		 	
		
		
		SELECT		
					 h.BRANDNAME								AS ITEMNAME
					,h.GLOVECODE
					,sl.Salesid
					,st.CustomerRef
					,ISNULL(l.HartalegaCommonSize,poi.ItemSize) AS HartalegaCommonSize
					,sl.CUSTOMERSIZE							AS CONFIGURATION
					,sl.SalesQty
					,sl.ItemId
					,ISNULL(poic.Printed,0)						AS Printed

		FROM		dbo.SalesLineWorkOrder sl
		INNER JOIN dbo.SalesTable AS st ON sl.SalesId = st.SalesId
		LEFT JOIN AX_AVABRANDHEADER h on sl.ItemId = h.ITEMID
		LEFT JOIN VW_AX_AVABRANDLINE_SALESLINE l on l.ITEMID = h.ITEMID AND l.CUSTOMERSIZE = sl.CustomerSize
		LEFT JOIN PurchaseOrderItem poi 
			ON poi.PONumber = sl.Salesid
			AND poi.ItemNumber = sl.ItemId
			AND poi.CustomerSize = sl.CustomerSize
		LEFT JOIN	tempPurchaseOrderItemCases poic 
			ON poic.PONumber = sl.Salesid
			AND poic.ItemNumber = sl.ItemId
			AND poic.CustomerSize = sl.CustomerSize
		WHERE       st.CustomerRef = @CustomerRef AND sl.Salesid = @PONumber
				
		
		DROP TABLE	tempPurchaseOrderItemCases


END
GO
PRINT N'Altering Procedure [dbo].[usp_FP_POStatus_Update]...';


GO
  
  
-- =============================================  
-- Author:  Srikanth Balda  
-- Create date: 21 sep 2014  
-- Description: To Validate existance  
  
-- Author:  Pang YS  
-- Create date: 09 Mar 2021  
-- Description: eFS Std point to 9Dot tables update salestable  
-- =============================================  
ALTER PROCEDURE [dbo].[usp_FP_POStatus_Update]   
 -- Add the parameters for the stored procedure here  
 @PONumber nvarchar(20)  
AS  
BEGIN  
DECLARE @SOLintCount int  
DECLARE @PurchaseOrderItem int  
  
DECLARE @CaseCount int  
DECLARE @ItemNumber nvarchar(40)  
DECLARE @ItemSize nvarchar(30)  
DECLARE @ItemCases int  
SELECT ponumber, itemnumber, ItemSize,ItemCases into #Temp from purchaseorderitem where ponumber = @PONumber  
 WHILE((SELECT count(itemnumber) from #temp)>0)  
 BEGIN  
  SELECT @ItemNumber = (select top 1 itemnumber from #Temp)  
  SELECT @ItemSize = (select top 1 ItemSize from #Temp)  
  SELECT @ItemCases = ((select top 1 ItemCases from #Temp))  
  SELECT @CaseCount = count(casenumber) from purchaseorderitemcases   
  WHERE ponumber = @PONumber and itemnumber = @ItemNumber and Size = @ItemSize and internalotnumber is not null  
    
  IF(@ItemCases = @CaseCount)  
  BEGIN  
     UPDATE PURCHASEORDERITEM SET itemstatus = 1   
     WHERE ponumber = @PONumber and itemnumber = @ItemNumber and Itemsize = @ItemSize  
  END  
  DELETE from #temp where ponumber = @Ponumber and itemnumber = @ItemNumber and Itemsize = @ItemSize  
 END  
  
        -- Insert statements for procedure here  
SELECT @SOLintCount = Count(ItemId)  from vw_RPT_axsoline   
WHERE salesid = @PONumber  
  
  
SELECT @PurchaseOrderItem =Count(ItemNumber) from PurchaseOrderItem   
WHERE PONumber = @PONumber and ItemStatus =1  
  
 IF @SOLintCount = @PurchaseOrderItem  
 BEGIN    
   Update PurchaseOrder set POStatus = 'Closed', LastModifiedOn = GETDATE() where PONumber = @PONumber   
   --UPDATE SalesTable set WorkOrderStatus = 3 where SalesId = @PONumber  
   UPDATE SalesTable set DOT_WorkOrderStatus = '3' where SalesId = @PONumber  
 END  
  
drop table #Temp  
  
END
GO
PRINT N'Altering Procedure [dbo].[USP_INS_BatchAuditLog]...';


GO

-- =======================================================
-- Name:             [USP_INS_BatchAuditLog
-- Purpose:          Insert PT QC Process Audit Log
-- =======================================================
-- Change History
-- Date         Author     Comments
-- -----        ------     -----------------------------
-- 09/06/2020   Soon Siang SP created.
-- 20/07/2020   Return Audit Log ID
-- =======================================================
ALTER PROCEDURE [dbo].[USP_INS_BatchAuditLog]
(
	@SerialNumber		DECIMAL(15,0),
	@ReferenceID		INT,
	@Process			NVARCHAR(50),
	@ProcessFullName	NVARCHAR(255)
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @GlovePcs			INT,
			@ProcessDateTime	DATETIME = NULL

	DECLARE @TempSummaryTable TABLE
	(
		ID				INT,
		ProcessInd		NVARCHAR(10),
		BalancePcs		DECIMAL(18, 3),
		PackedPcs		DECIMAL(18, 3),
		RejectPcs		DECIMAL(18, 3),
		SumPackedPcs	DECIMAL(18, 3),
		SumRejectPcs	DECIMAL(18, 3),
		ProcessDate		DATETIME
	)

	INSERT INTO @TempSummaryTable
	(
		ID,
		ProcessInd,
		BalancePcs,
		PackedPcs,
		RejectPcs,
		SumPackedPcs,
		SumRejectPcs,
		ProcessDate
	)
	SELECT	ID,
			ProcessInd,
			BalancePcs,
			PackedPcs,
			RejectPcs,
			SumPackedPcs,
			SumRejectPcs,
			ProcessDate
	FROM dbo.ufn_GetBatchSummaryTable(@SerialNumber)

	SELECT TOP 1
		@GlovePcs = BalancePcs
	FROM @TempSummaryTable 
	ORDER BY ProcessDate DESC

	IF @Process = 'QI'
	BEGIN
		SELECT TOP 1
			@ProcessDateTime = QAIDate
		FROM QAI WITH(NOLOCK)
		WHERE QAIID = @ReferenceID
			AND QAIScreenName = 'ScanQITestResult'
	END

	IF @Process = 'QC'
	BEGIN
		SELECT TOP 1
			@ProcessDateTime = BatchStartTime
		FROM QCYieldAndPacking WITH(NOLOCK)
		WHERE Id = @ReferenceID
	END

	IF @Process = 'PT'
	BEGIN
		SELECT TOP 1
			@ProcessDateTime = LastModifiedOn
		FROM PTScanBatchCard WITH(NOLOCK)
		WHERE Id = @ReferenceID
	END

	INSERT INTO [dbo].[BatchAuditLog]
           ([SerialNumber]
           ,[Process]
           ,[ProcessFullName]
           ,[ProcessDatetime]
           ,[GlovePcs]
           ,[AuditDateTime])
     VALUES
           (@SerialNumber
           ,@Process
           ,@ProcessFullName
           ,@ProcessDateTime
           ,@GlovePcs
           ,GETDATE())

	SELECT SCOPE_IDENTITY()
END
GO
PRINT N'Altering Procedure [dbo].[OEE_SP_GetGloveQuantity]...';


GO
-- =============================================
-- Author:		<Azman Kasim>
-- Create date: <09/11/2021>
-- Description:	<OEE Hotbox>
-- =============================================
ALTER PROCEDURE [dbo].[OEE_SP_GetGloveQuantity]
	-- Add the parameters for the stored procedure here
	@OperationStartDate datetime,
	@OperationEndDate datetime,
	@LineId nchar(5)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT DISTINCT a.SerialNumber, a.QCType, a.BatchWeight, Cast(((a.BatchWeight*10000)/(Cast(a.TenPCsWeight as decimal(9,2)))) As Decimal(9,0)) As [Pcs],
	b.QCTYPEBeforeHotbox, b.HotboxVerifiedDate, b.IsHotbox12Month
	FROM [dbo].[Batch] a with (nolock)
	LEFT JOIN dbo.OEE_HotboxGlove b (nolock) ON a.SerialNumber = b.SerialNumber
	--WHERE (a.BatchCardDate BETWEEN '" + dataDTO.OperationStartDate.ToString("yyyy-MM-dd HH:mm:ss") + "' AND '" + dataDTO.OperationEndDate.ToString("yyyy-MM-dd HH:mm:ss") + "') 
	WHERE ((a.BatchCardDate >= @OperationStartDate) AND (a.BatchCardDate <= @OperationEndDate))
	AND a.BatchType IN ('T','RJ','2G') AND a.BatchWeight != 0 AND a.LineId = @LineId AND a.QCType IS NOT NULL 
	--AND ModuleId IN (1,2,19) AND SubModuleId IN (1,10,11,117,125)	
	AND ModuleId IN (1,2,19,22) 
	AND SubModuleId IN (1,10,11,117,125,139,141)
	--AND ((b.IsHotbox12Month = 0) OR (b.IsHotbox12Month IS NULL))

END
GO
PRINT N'Altering Procedure [dbo].[OEE_SP_GetGloveQuantity_Hotbox12Month]...';


GO
-- =============================================
-- Author:		<Azman Kasim>
-- Create date: <09/11/2021>
-- Description:	<OEE Hotbox>
-- =============================================
ALTER PROCEDURE [dbo].[OEE_SP_GetGloveQuantity_Hotbox12Month]
	-- Add the parameters for the stored procedure here
	@OperationStartDate datetime,
	@OperationEndDate datetime,
	@LineId nchar(5)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT DISTINCT a.SerialNumber, a.QCType, a.BatchWeight, Cast(((a.BatchWeight*10000)/(Cast(a.TenPCsWeight as decimal(9,2)))) As Decimal(9,0)) As [Pcs],
	b.QCTYPEBeforeHotbox
	FROM [dbo].[Batch] a with (nolock)
	LEFT JOIN dbo.OEE_HotboxGlove b (nolock) ON a.SerialNumber = b.SerialNumber
	WHERE ((b.HotboxVerifiedDate >= @OperationStartDate) AND (b.HotboxVerifiedDate <= @OperationEndDate))
	AND b.IsHotbox12Month = 1
	AND a.BatchType IN ('T','RJ','2G') 
	AND a.BatchWeight != 0 
	AND a.LineId = @LineId 
	AND a.QCType IS NOT NULL 
	--AND ModuleId IN (1,2,19) 
	--AND SubModuleId IN (1,10,11,117,125)
	AND ModuleId IN (1,2,19,22) 
	AND SubModuleId IN (1,10,11,117,125,139,141)
END
GO
PRINT N'Altering Procedure [dbo].[proc_Rpt_Get_ListOfOpenPONumber]...';


GO

  
-- ======================================================================================================      
-- Author  =   Yong Faat  
-- Create date =   10th March 2015  
-- Description =   To Get List of Glove Type  
-- exec [proc_Rpt_Get_ListOfGlove]  
  
--------------------------------------------------------------------------------------------------------  
  
-- Updated By   =  
-- Updated Date   =   
-- Updated Description  =   
  
-- =======================================================================================================      
  
ALTER PROCEDURE [dbo].[proc_Rpt_Get_ListOfOpenPONumber]  
  
  
  
AS  
BEGIN  
  
  
  SELECT  DISTINCT  
  
                     LTRIM(RTRIM(CustomerRef)) + ' ' + '|' + ' ' +  LTRIM(RTRIM(Salesid)) AS Parameter  
                
     FROM [dbo].[VW_AXSOline]  
              WHERE LEN(CustomerRef) > 0  --AND WorkOrderType <> 3
     ORDER BY Parameter  
     
END
GO
PRINT N'Altering Procedure [dbo].[proc_Rpt_Get_ListOfPONumber_ActualMTS]...';


GO

-- CREATED By			= yiksiu
-- CREATED Date			= 2018-10-24
-- CREATED Description  = GET SO list for Actual MTS. OBP allow work order type t sync to FS : Salestable.HSB_TYPEOFORDER 1:Normal OEM;2:Forecast MTS;3:Actual MTS   
-- Maizatul Mustapa   3/3/2022			change VW_AXSOLine to VW_AXSOLine_CRS after d365 BB Migration
-- =======================================================================================================    

ALTER PROCEDURE [dbo].[proc_Rpt_Get_ListOfPONumber_ActualMTS]


AS
BEGIN


		SELECT  DISTINCT
                LTRIM(RTRIM(a.CustomerRef)) + ' ' + '|' + ' ' +  LTRIM(RTRIM(a.SalesId)) AS Parameter              
        FROM VW_AXSOline_CRS a (NOLOCK) WHERE WorkOrderType = 3 -- ACTUAL MTS
			AND LEN(a.CustomerRef) > 0
			AND SALESSTATUS = 1
		ORDER BY Parameter			  			
END
GO
PRINT N'Altering Procedure [dbo].[proc_Rpt_Shipping_Traceability_BatchByMTSPO]...';


GO


-- ======================================================================================================    
-- Author		=	  Pang Yik Siu
-- Create date	=	  27 Nov 2018
-- Description	=	  Traceability by batch and filter by Purchase Order for Actual MTS order, support SMBP and split carton
-- exec [proc_Rpt_Shipping_Traceability_BatchByMTSPO] 
--------------------------------------------------------------------------------------------------------
-- Azman Kasim		27/03/2019			Surgical Glove Enhancement
-- Loo Kah Heng		28/03/2019			added new join column (vw.ItemId = FP.ItemNumber) to fix incorrect Customer Brand corresponded to InnerLotNumber
-- Maizatul Mustapa   3/3/2022			change VW_AXSOLine to VW_AXSOLine_CRS after d365 BB Migration
-- =======================================================================================================    

ALTER PROCEDURE [dbo].[proc_Rpt_Shipping_Traceability_BatchByMTSPO]
(
	 @Parameter nvarchar(200)-- = 'AB 180/17 | SO034032'
)

AS
BEGIN
			

	--DECLARE @Parameter Nvarchar(200) = 'MUN 97/99 | SO038423'
	DECLARE @tmpParam TABLE
	(
		Id int IDENTITY(1,1),
		StrValue nvarchar(200)
	)
	DECLARE @SalesId nvarchar(20)
	DECLARE @CustomerRef nvarchar(60)

	INSERT @tmpParam SELECT LTRIM(RTRIM(Item)) FROM dbo.SplitString(@Parameter, '|')
	SET @SalesId		= (SELECT StrValue FROM @tmpParam WHERE Id = 2)
	SET @CustomerRef	= (SELECT StrValue FROM @tmpParam WHERE Id = 1)

	DECLARE @BatchSerialNumber	numeric(15,0),
		@BatchLotNo			nvarchar(20),
		@PTBatchDate		datetime,
		@CustomerBrand		nvarchar(100),
		@CustomerSize		nvarchar(30),
		@InnerLotNo			nvarchar(40),
		@OuterLotNo			nvarchar(40),
		@StartCarton		int, 
		@EndCarton			int,
		@TotalCarton		int, 
		@CustomerReference	nvarchar(80),
		@CustomerOrderNo	nvarchar(20),
		@VERIFIED			nvarchar(5),
		@CurrentCarton		int,
		@i					int

	DECLARE @tmp TABLE (
			[id] int identity (1,1),
			[BatchSerialNumber] numeric(15,0),
			[BatchLotNo] nvarchar(20),
			[PTBatchDate] datetime,
			[CustomerBrand] nvarchar(100),
			[CustomerSize] nvarchar(30),
			[InnerLotNo]  nvarchar(40),
			[OuterLotNo]  nvarchar(40),
			[OriCartonNo] int, 
			[CustomerReference] nvarchar(80),
			[CustomerOrderNo] nvarchar(20),
			[VERIFIED] nvarchar(5),
			[Completed] [bit]
	)

	DECLARE @tblToShow TABLE (
			[BatchSerialNumber] numeric(15,0),
			[BatchLotNo] nvarchar(20),
			[PTBatchDate] datetime,
			[CustomerBrand] nvarchar(100),
			[CustomerSize] nvarchar(30),
			[InnerLotNo]  nvarchar(40),
			[OuterLotNo]  nvarchar(40),
			[StartCarton] int, 
			[EndCarton] int,
			[TotalCarton] int, 
			[CustomerReference] nvarchar(80),
			[CustomerOrderNo] nvarchar(20),
			[VERIFIED] nvarchar(5)
		)

	INSERT INTO @tmp
	SELECT	FPInfo.SerialNumber as [BatchSerialNumber], 
			B.BatchNumber as [BatchLotNo],	
			--(SELECT TOP 1 FORMAT([LastModifiedOn],'dd/MM/yyyy') 
			(SELECT TOP 1 [LastModifiedOn]
				FROM PTScanBatchCard 
				WHERE SerialNumber = B.SerialNumber 
				ORDER BY LastModifiedOn DESC) 
			as [PTBatchDate], 
			vw.ITEMNAME as [CustomerBrand], 
			vw.[CONFIGURATION] as [CustomerSize], 
			fp.InternalLotNumber as [InnerLotNo], 
			fp.OuterLotNo as [OuterLotNo], 
			OriCartonNo, 
			vw.CustomerRef as [CustomerReference], 
			vw.PurchOrderFormNum as [CustomerOrderNo], 	
			(CASE	WHEN fp.[LotVerificationResult] IS NULL THEN '' 
					WHEN fp.[LotVerificationResult] = 1 THEN 'PASS' 
					ELSE 'FAIL' 
			END) as VERIFIED, 
			0 
	FROM PurchaseOrderItemCasesSwapCarton POIC (NOLOCK)	
		JOIN FinalPacking FP  (NOLOCK) on poic.LotNo = fp.InternalLotNumber
		JOIN FinalPackingBatchInfo FPInfo (NOLOCK) ON FP.InternalLotNumber = FPInfo.InternalLotNumber AND poic.LotNo = FPInfo.InternalLotNumber
		--JOIN VW_AXSOline vw (NOLOCK) ON vw.SalesId = POIC.NewSalesId AND vw.HARTALEGACOMMONSIZE = poic.FGSize AND vw.WorkOrderType = '3'
		--JOIN VW_AXSOline vw (NOLOCK) ON vw.SalesId = POIC.NewSalesId AND vw.[CONFIGURATION] = poic.FGSize AND vw.WorkOrderType = '3'	
		JOIN VW_AXSOline_CRS vw (NOLOCK) ON vw.SalesId = POIC.NewSalesId AND vw.[CONFIGURATION] = poic.FGSize AND vw.WorkOrderType = '3' AND vw.ItemId = FP.ItemNumber -- KH 05/04
		JOIN Batch B (NOLOCK) on FPInfo.SerialNumber = B.SerialNumber	
	where NewSalesId = @SalesId
		AND vw.CustomerRef = @CustomerRef
		--AND FP.SerialNumber IS NOT NULL
	ORDER BY	[BatchSerialNumber], [InnerLotNo], 
				[OuterLotNo], OriCartonNo


	SET @i = 1

	-- While record at id=@i and completed = 0 is exist,
	-- begin to read each line of record in @tmp
	WHILE EXISTS (SELECT * FROM @tmp WHERE id=@i AND Completed = 0)
		BEGIN

			-- Set all variables to the current record at id = @i
			SELECT /*TOP 1*/	@BatchSerialNumber	= [BatchSerialNumber],
							@BatchLotNo			= [BatchLotNo],
							@PTBatchDate		= [PTBatchDate],
							@CustomerBrand		= [CustomerBrand],
							@CustomerSize		= [CustomerSize],
							@InnerLotNo			= [InnerLotNo],
							@OuterLotNo			= [OuterLotNo],
							@CurrentCarton		= [OriCartonNo],
							--@EndCarton		= [OriCartonNo],
							--@TotalCarton		= [OriCartonNo],
							@CustomerReference	= [CustomerReference],
							@CustomerOrderNo	= [CustomerOrderNo],
							@VERIFIED			= [VERIFIED]
			FROM @tmp
			WHERE id = @i AND Completed = 0

			-- if @currentcarton-1 does not exist in @tblToShow,
			--		and @CurrentCarton not equal to startcarton and endcarton in @tbtoShow (to eliminate repetition)
			-- add current record into the @tblToShow as a NEW record
			IF NOT EXISTS (	SELECT * FROM @tblToShow 
							WHERE BatchSerialNumber = @BatchSerialNumber 
									AND BatchLotNo = @BatchLotNo
									AND CustomerBrand = @CustomerBrand
									AND CustomerSize = @CustomerSize
									AND InnerLotNo = @InnerLotNo
									AND (EndCarton = @CurrentCarton - 1 
											OR EndCarton = @CurrentCarton
											OR StartCarton = @CurrentCarton ))

				BEGIN					
					SET @TotalCarton = 1
					INSERT INTO @tblToShow 
					VALUES (@BatchSerialNumber,
							@BatchLotNo,
							@PTBatchDate,
							@CustomerBrand,
							@CustomerSize,
							@InnerLotNo,
							@OuterLotNo,
							@CurrentCarton,
							@CurrentCarton,
							@TotalCarton,
							@CustomerReference,
							@CustomerOrderNo,
							@VERIFIED)
				END
			ELSE
				-- if @CurrentcCarton-1 EXIST in @tblToShow,
				-- change the EndCarton to @CurrentCarton
				-- calculate the TotalCarton
				BEGIN
					SELECT @StartCarton = StartCarton FROM @tblToShow 
							WHERE BatchSerialNumber = @BatchSerialNumber 
									AND BatchLotNo = @BatchLotNo
									AND CustomerBrand = @CustomerBrand
									AND CustomerSize = @CustomerSize
									AND InnerLotNo = @InnerLotNo
									AND EndCarton = @CurrentCarton - 1
					
					SET @TotalCarton = @CurrentCarton - @StartCarton + 1

					UPDATE	@tblToShow 
					SET		EndCarton = @CurrentCarton, TotalCarton = @TotalCarton
					WHERE	BatchSerialNumber = @BatchSerialNumber 
								AND BatchLotNo = @BatchLotNo
								AND CustomerBrand = @CustomerBrand
								AND CustomerSize = @CustomerSize
								AND InnerLotNo = @InnerLotNo
								AND EndCarton = @CurrentCarton - 1
				END

			UPDATE @tmp
			SET Completed = 1
			WHERE ID = @i

			SET @i = @i + 1
		END
	
	IF OBJECT_ID('tempdb..#temptc') IS NOT NULL  
		DROP TABLE #temptc

	SELECT ROW_NUMBER() OVER (PARTITION BY InnerlotNo, StartCarton, EndCarton order by InnerlotNo) _row,* INTO #temptc FROM @tblToShow ORDER BY InnerLotNo, BatchSerialNumber

	SELECT 
		'BatchSerialNumber'		= BatchSerialNumber 
		,'BatchLotNo'			= BatchLotNo
		,'PTBatchDate'			= PTBatchDate
		,'CustomerBrand'		= CustomerBrand
		,'CustomerSize'			= CustomerSize
		,'InnerLotNo'			= InnerLotNo
		,'OuterLotNo'			= OuterLotNo
		,'StartCarton'			= StartCarton
		,'EndCarton'			= EndCarton
		,'TotalCarton'			= TotalCarton
		,'CustomerReference'	= CustomerReference
		,'CustomerOrderNo'		= CustomerOrderNo
		,'VERIFIED'				= VERIFIED
	FROM
	(
		SELECT 
		STUFF ((
			SELECT CHAR(10) + CAST(l2.BatchSerialNumber AS varchar(20))
				FROM #temptc l2
				WHERE l2.InnerLotNo = l1.InnerLotNo 
				AND l2.StartCarton = l1.StartCarton
				AND l2.EndCarton = l1.EndCarton
				FOR XML PATH ('')), 1, 1, '') AS BatchSerialNumber
		, STUFF ((
			SELECT CHAR(10) + CAST(l2.BatchLotNo AS varchar(20))
				FROM #temptc l2
				WHERE l2.InnerLotNo = l1.InnerLotNo 
				AND l2.StartCarton = l1.StartCarton
				AND l2.EndCarton = l1.EndCarton
				FOR XML PATH ('')), 1, 1, '') AS BatchLotNo
		,l1._row,l1.PTBatchDate,l1.CustomerBrand,l1.CustomerSize,l1.InnerLotNo,l1.OuterLotNo,l1.StartCarton,l1.EndCarton,l1.TotalCarton,l1.CustomerReference,l1.CustomerOrderNo,l1.VERIFIED
		FROM #temptc l1 
	) drv
	WHERE _row = 1
	ORDER BY CustomerBrand, CustomerSize, InnerLotNo

	IF OBJECT_ID('tempdb..#temptc') IS NOT NULL  
		DROP TABLE #temptc
		
END
GO
PRINT N'Altering Procedure [dbo].[usp_FP_ValidateSerialNumberGloveCode]...';


GO
  
-- =============================================  
-- Author:  Srikanth Balda  
-- Create date: 21 sep 2014  
-- Description: To Validate existance  
  
-- =============================================  
ALTER PROCEDURE [dbo].[usp_FP_ValidateSerialNumberGloveCode]  
 -- Add the parameters for the stored procedure here  
(  
 @SerialNumber numeric,  
 @GloveCode nvarchar(50),  
 @Size nvarchar(30),  
 @ALTERNATEGLOVECODE1 nvarchar(50),  
 @ALTERNATEGLOVECODE2 nvarchar(50),  
 @ALTERNATEGLOVECODE3 nvarchar(50),  
 @InnerBoxCapacity int  
)  
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.  
 SET NOCOUNT ON;  
 DECLARE @PackingSize int  
  
 IF exists (select 1 from qcyieldandpacking where serialnumber = @SerialNumber)  
  BEGIN   
   SELECT @PackingSize = PackingSize from qcyieldandpacking WHERE Serialnumber = @SerialNumber  
  END  
 ELSE IF exists (select 1 from QAI where serialnumber = @SerialNumber)  
  BEGIN  
   SELECT @PackingSize = PackingSize from QAI WHERE Serialnumber = @SerialNumber  
  END  
 -- Insert statements for procedure here  
 select a.serialNumber,a.BatchNumber,b.BthOrder as BatchOrder,a.QAIDate, a.isFPBatchSplit,a.LineId,a.BatchCardDate,a.GloveType,a.size from Batch a  
 left join DOT_FloorD365HRGLOVERPT b on a.SerialNumber = b.SerialNo  
 where a.SerialNumber = @SerialNumber   
 and a.GloveType in (@GloveCode,@ALTERNATEGLOVECODE1,@ALTERNATEGLOVECODE2,@ALTERNATEGLOVECODE3)   
 and a.size = @size    
    
END
GO
PRINT N'Altering Procedure [dbo].[USP_GET_BatchDetails_ScanIn]...';


GO
-- ========================================================================================
-- Name:			[USP_GET_BatchDetails_ScanIn]
-- Purpose: 		<Get Batch details based on Serial No>
-- ========================================================================================
-- Change History
-- Date               Author                     Comments
-- -----   ------   -----------------------------------------------------------------------
-- <9 June,2014> 	<Amrinder Singh>	         SP created.
-- <27 Sep,2014>    <Nagaraju>					 Added Batchnumber condition to get WaterBatchCard
--[USP_GET_BatchDetails_ScanIn] 2140000761
--
-- <02 July,2018>   Max He						Change to D365 design
-- ========================================================================================
ALTER PROCEDURE [dbo].[USP_GET_BatchDetails_ScanIn]

(

	   @serialNo NUMERIC(10,0)

)

AS

BEGIN

	-- SET NOCOUNT ON added to prevent extra result sets from

	-- interfering with SELECT statements.

	SET NOCOUNT ON;    

	------DECLARE @BatchNumber Varchar(50);
	
	------SET @BatchNumber = (SELECT top(1) BatchNumber from Batch where SerialNumber= @serialNo) 

	--------Print @BatchNumber

	------IF (LEFT(@BatchNumber,3)='PWT')
	
	------BEGIN

	------	SELECT TOP 1 b.BatchNumber, b.GloveType,  sm.Name, b.Size, b.TenPCsWeight, b.BatchWeight, b.TotalPCs, b.QCType, qtm.DESCRIPTION AS QCTypeDescription, --pl.LineId AS Line,

	------	ISNULL(pt.ReworkCount,-1) AS Rework, b.PTBatchWeight, b.PTTenPCsWeight FROM Batch b

	------	JOIN ShiftMaster sm ON sm.ShiftId=b.ShiftId 

	------	-- JOIN ProductionLine pl ON pl.LineId = b.LineId

	------	LEFT JOIN DOT_FSQCTypeTable qtm ON qtm.QCType = b.QCType 

	------	LEFT JOIN PTScanBatchCard  pt ON pt.SerialNumber = b.SerialNumber 

	------	WHERE b.SerialNumber=@serialNo ORDER BY pt.Id DESC
	------END
	
	------ELSE
	
		SELECT TOP 1 b.BatchNumber, b.GloveType, b.LineId AS Line, sm.Name, b.Size, b.TenPCsWeight, b.BatchWeight,
		 b.TotalPCs, b.QCType, qtm.DESCRIPTION AS QCTypeDescription,
		ISNULL(pt.ReworkCount,-1) AS Rework, b.PTBatchWeight, b.PTTenPCsWeight, ISNULL(cast(axgc.HotBox as int),0) AS HotBox,
		 ISNULL(cast(axgc.Protein as int),0) AS Protein , ISNULL(cast(axgc.Powder as int),0) AS Powder, BatchType, b.PackedPcs FROM Batch b (nolock)
		LEFT JOIN ShiftMaster sm (nolock) ON sm.ShiftId=b.ShiftId 
		LEFT JOIN DOT_FSQCTypeTable qtm (nolock) ON qtm.QCType = b.QCType 
		LEFT JOIN PTScanBatchCard  pt (nolock) ON pt.SerialNumber = b.SerialNumber
		LEFT JOIN DOT_FSItemMaster im (nolock) ON b.GloveType = im.ItemId 
		LEFT JOIN DOT_FSGloveCode axgc (nolock)ON im.Id = axgc.ItemRecordId 
		--LEFT JOIN AX_AVAGLOVECODETABLE axgc ON axgc.GLOVECODE = b.GloveType
		WHERE b.SerialNumber=@serialNo ORDER BY pt.Id DESC
	SET NOCOUNT OFF;
	

END
GO
PRINT N'Altering Procedure [dbo].[USP_GET_BatchStatus]...';


GO
-- ========================================================================================
-- Name:			[USP_GET_BatchStatus]
-- Purpose: 		<Get Batch Status based on Serial No>
-- ========================================================================================
-- Change History
-- Date               Author                     Comments
-- -----   ------   -----------------------------------------------------------------------
-- <9 June,2014> 	<Amrinder Singh>	         SP created.

ALTER PROCEDURE [dbo].[USP_GET_BatchStatus]
(
	   @serialNo    NUMERIC(10,0)
)
AS
BEGIN
	SET NOCOUNT ON;    	
	SELECT SerialNumber FROM Batch b JOIN DOT_FSQCTypeTable aqt ON aqt.QCTYPE = b.QCType WHERE aqt.DESCRIPTION = 'STRAIGHT PACK' AND 
	b.SerialNumber = @serialNo
	SET NOCOUNT OFF;
END
GO
PRINT N'Altering Procedure [dbo].[USP_GET_PurchaseOrderDropDownList]...';


GO

ALTER PROCEDURE [dbo].[USP_GET_PurchaseOrderDropDownList]
(
	@WorkOrderStatus	NVARCHAR(10) = NULL
)
AS
BEGIN
	/*=============================================
	 Author:		<Fusionex, Wei Meng>
	 Create date:	<12/02/2019>
	 Description:	<Get Purchase Order List>

	 Author:		<Quak MIng Wei>
	 Modified date:	<04/01/2021>
	 Description:	<Get Purchase Order List>
	 ============================================= */

	SET NOCOUNT ON;

	DECLARE @WorkOrderStatusTable Table
	(
		WorkOrderStatus	TINYINT
	)
	INSERT INTO @WorkOrderStatusTable
	--SELECT Item FROM ufnSplit(@WorkOrderStatus,',')
	SELECT Item - 1 FROM ufnSplit(@WorkOrderStatus,',') -- Changed to NGC WorkflowStatus enum  

	--SELECT DISTINCT
	--	 vw.SalesId AS [Key]
	--	,CONCAT(vw.CustomerRef, ' | ', vw.SalesId) AS [Value]
	--FROM [dbo].[VW_AXSOline] vw
	--INNER JOIN [dbo].[SalesTable] AS st
	--	ON st.SalesId = vw.SalesId
	--	AND st.CustomerRef = vw.CustomerRef
	--	AND st.WorkOrderType IN (1,2)
	--WHERE (@WorkOrderStatus IS NULL OR vw.WorkOrderStatus IN (SELECT WorkOrderStatus FROM @WorkOrderStatusTable))

	select DISTINCT  SalesId  AS [Key] ,CONCAT(CustomerRef, ' | ', SalesId) AS [Value] from dbo.DOT_FloorSales (NOLOCK)
	where SalesStatus in (1,2) and DocumentStatus >= 3
	and (@WorkOrderStatus IS NULL OR WorkflowStatus IN (Select WorkOrderStatus from @WorkOrderStatusTable))

END
GO
PRINT N'Altering Procedure [dbo].[Usp_QAI_Get_ChangeQctypeValidation]...';


GO

-- =============================================
-- Name:			Usp_QAI_Get_ChangeQctypeValidation
-- =============================================
-- Change History
-- Date    Author   Comments
-- -----   ------   -----------------------------
-- 10/06/2014 	NarendraNath	   SP created.
-- =============================================

ALTER PROCEDURE [dbo].[Usp_QAI_Get_ChangeQctypeValidation]
(
@QCTypeOld NVARCHAR(15),
@QCTypeNew NVARCHAR(15)
)

AS 
BEGIN
DECLARE @ValidationFlg INT
DECLARE @RouteCategory NVARCHAR (10)
	
	SET @RouteCategory = (select RouteCategory from DOT_FSQCTypeTable where QCType = @QCTypeNew)

	IF @RouteCategory = 'PT'
	BEGIN
		SELECT 0 --Bypass severity checking for PT
	END
	ELSE
	BEGIN
		SET @ValidationFlg =(
		(SELECT ColorCodeId FROM QCTypeColorCodeMapping  WITH (NOLOCK) WHERE QCType=@QCTypeOld)  -(SELECT ColorCodeId FROM QCTypeColorCodeMapping  WITH (NOLOCK) WHERE QCType=@QCTypeNew))

		SELECT CASE WHEN @ValidationFlg > 0 THEN 1 ELSE 0 END AS 'ValidationFlg'
	END
	
END
GO
PRINT N'Altering Procedure [dbo].[USP_QAI_GETSamplingSizes]...';


GO
-- =======================================================
-- Name:             USP_QAI_GETSamplingSizes Size
-- Purpose:          QAI GET Sampling Sizes
-- =======================================================
-- Change History
-- Date         Author     Comments
-- -----        ------     -----------------------------
-- 24/08/2014   NarendraNath    SP created.
-- 06/06/2017	YikSiu			Change VT process read EnumMaster table to populate result set
-- 01/03/2018	Azman			Add Value To and Size
-- =======================================================
ALTER PROCEDURE [dbo].[USP_QAI_GETSamplingSizes]
(
	@SamplingType NVARCHAR(100),
	@ScreenName NVARCHAR(100)	 
)
AS
BEGIN
	SELECT EnumText AS [Size], EnumValue As [Value]
	FROM EnumMaster WHERE EnumType = @SamplingType + '_' + @ScreenName
	--ORDER BY CAST(EnumValue AS INT)
	ORDER BY EnumValue ASC
END


--BEGIN
--IF @SamplingType='WTSamplingSize'
--	BEGIN	
--		IF @ScreenName= 'QAIResamplingScan'
--			BEGIN
--				SELECT 0 AS 'Size' 
--				UNION
--				SELECT 80 AS 'Size' 
--				UNION
--				SELECT 160 AS 'Size'
--			END
--		ELSE IF @ScreenName= 'ScanQITestResult'
--			BEGIN
--				SELECT 50 AS 'Size' 
--				UNION
--				SELECT 80 AS 'Size'
--				UNION
--				SELECT 125 AS 'Size'
--			END
--		ELSE
--			BEGIN
--				SELECT 80 AS 'Size' 
--				UNION
--				SELECT 125 AS 'Size'
--			END
--	END
--ELSE IF @SamplingType='VTSamplingSize'
--	BEGIN
--	IF @ScreenName= 'QAIResamplingScan'
--	BEGIN
--		SELECT 0 AS 'Size' 
--		UNION
--		SELECT 50 AS 'Size' 
--		UNION
--		SELECT 80 AS 'Size'
--	END
--	ELSE IF (@ScreenName='QAIScan' OR @ScreenName='QAIScanInnerTenPcs')
--	BEGIN
--		SELECT 10 AS 'Size' 
--		UNION
--		SELECT 50 AS 'Size' 
--		UNION
--		SELECT 80 AS 'Size'
--	END	
--		ELSE 
--			BEGIN
--				SELECT 50 AS 'Size' 
--				UNION
--				SELECT 80 AS 'Size'				
--			END

--END 
--END
GO
PRINT N'Altering Procedure [dbo].[usp_QAIChangeQCType_Save]...';


GO
-- =======================================================
-- Name:             usp_QAIChangeQCType_Save
-- Purpose:          Save Change QC Type Details
-- =======================================================
-- Change History
-- Date         Author     Comments
-- -----        ------     -----------------------------
-- 24/08/2014        NarendraNath    SP created
-- 23/07/2018		 Azrul			 SP altered
-- 20/11/2020	Chong KH	Qai Scanning enhancement
-- =======================================================
ALTER PROCEDURE [dbo].[usp_QAIChangeQCType_Save]
(
	@SerialNumber Nvarchar(10),
	@QAIInspectorId NVARCHAR(10),
	@ChangedQCType  NVARCHAR(50),
	@ChangeQCTypeReason  NVARCHAR(50),
	@workstationId NVARCHAR(20),
	@IsChangeQCType BIT,
	@AuthorizedBy INT
)
AS
BEGIN
BEGIN TRANSACTION;
BEGIN TRY	    
	
	DECLARE @QAIChangeReason NVARCHAR(20)
	DECLARE @NewQAIID INT
	DECLARE @QAIID INT		

	INSERT INTO QAI(SerialNumber,BatchNumber,QAIInspectorId,QCType,WTSampliingSize,InnerBox,TenPcsWeight,PackingSize, QAIDate,VTSamplingSize,
			QAIChangeReason,QITestResult,LastModifiedDateTime,WorkStationId,SubModuleId,QAIScreenName,IsAXPostingSuccess,QCTypeAuthorizedBy)
		SELECT SerialNumber,BatchNumber,@QAIInspectorId,@ChangedQCType,WTSampliingSize,InnerBox,TenPcsWeight,PackingSize, QAIDate,VTSamplingSize,
			@ChangeQCTypeReason,QITestResult,GETDATE(),@workstationId,SubModuleId,'QAIChangeQCType',1,@AuthorizedBy FROM QAI WHERE SerialNumber=@SerialNumber AND LastModifiedDateTime=(SELECT MAX(LastModifiedDateTime) FROM QAI WHERE
			SerialNumber=@SerialNumber)
					  
		SELECT @QAIID= SCOPE_IDENTITY();			

		SELECT @NewQAIID= QAIid FROM qai WHERE SerialNumber=@SerialNumber AND QAIid<> @QAIID 
		AND LastModifiedDateTime =(SELECT MAX(LastModifiedDateTime) FROM qai WHERE  SerialNumber=@SerialNumber AND QAIid<> @QAIID)

		INSERT INTO QAIDefectMapping
		SELECT @QAIID,DefectID,NoOfDefects FROM  QAIDefectMapping   WHERE QAIId=@NewQAIID

		 -- 20/11/2020 Qai Scanning enhancement Start
		INSERT INTO QAIDefectPositionMapping (QAIID,DefectID, DefectPositionId,NoOfDefects)
		SELECT @QAIID,DefectID, DefectPositionId,NoOfDefects FROM  QAIDefectPositionMapping   WHERE QAIId=@NewQAIID
		 -- 20/11/2020 Qai Scanning enhancement End

		UPDATE Batch set QAIDate=GETDATE(),LastModifiedOn=GETDATE() WHERE SerialNumber=@SerialNumber
		UPDATE b SET QCType= q.QCType FROM Batch b JOIN qai q ON b.SerialNumber=q.SerialNumber
		WHERE q.QAIId=@QAIID

		UPDATE Batch SET IsChangeQCType = @IsChangeQCType WHERE SerialNumber = @SerialNumber
END TRY
BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
	DECLARE @ErrorSeverity INT;
	DECLARE @ErrorState INT;
	SELECT 
        @ErrorMessage = ERROR_MESSAGE(),
        @ErrorSeverity = ERROR_SEVERITY(),
        @ErrorState = ERROR_STATE();
		RAISERROR (@ErrorMessage, 
					   @ErrorSeverity,
					   @ErrorState 
					   );

    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;
END CATCH;

IF @@TRANCOUNT > 0
  COMMIT TRANSACTION;

  END
GO
PRINT N'Altering Procedure [dbo].[USP_SAV_BatchCard]...';


GO
     
-- =======================================================  
-- Name:   USP_SAV_BatchCard  
-- Purpose:   Save offline batch details  
-- =======================================================  
-- Change History  
-- Date         Author     Comments  
-- -----        ------     -----------------------------  
-- 10/06/2014  Sujana    SP ALTERd.  
-- 06/10/2014  Nagaraju    Added QCtype for Submodule=3  
-- 6/10/2017  MyAdamas Added Submodule Reprint Reproduction =118 reproduction visual test and 119 reproduction water tight    
-- 23/1/2018  MyAdamas Alter SP parameter submoduleid to use screen name instead of screen ID  
-- 01/03/2018 Azman  Add ReProduction Module 1  
-- 15/07/2021 Azman  NGC 1.5 4 char LineId fix   
-- 12/01/2021      Vinoden  Change [AX_AVAQCTYPETABLE] to [DOT_FSQCTYPETABLE]  
-- 30/11/2021 Azrul Merged from NGC to HSB.
-- =======================================================  
ALTER PROCEDURE [dbo].[USP_SAV_BatchCard]  
  -- Add the parameters for the stored procedure here  
 @shift     INT,  
 @line     NVARCHAR(5),  
 @size     NVARCHAR(3),  
 @gloveType    NVARCHAR(50),  
 @batchWeight   DECIMAL(18,3),  
 @tenPcsWeight   DECIMAL(18,3),  
 @batchCardDate   DATETIME,  
 @isOnline    BIT,  
 @operatorId    NVARCHAR(10),  
 @workStationNumber  NVARCHAR(25),  
 @batchType    NCHAR(10),  
 @location    INT,  
 @module         NVARCHAR(50),  
 @subModule        NVARCHAR(50),  
 @authorizedBy      NVARCHAR(25),  
 @lostArea       NVARCHAR(15),  
 @site     NVARCHAR(20),  
 @shiftname    NVARCHAR(1),  
 @authorizedFor   INT  
AS  
BEGIN  
 BEGIN TRY  
  DECLARE @serialSequenceNumber AS INT  
  DECLARE @tempSerialNumber AS NUMERIC(25)  
  DECLARE @batchNumber AS NVARCHAR(20)  
  DECLARE @totalPcs AS INT  
  DECLARE @shiftStartDate NVARCHAR(8)  
  DECLARE @QCType NVARCHAR(50)  
  DECLARE @LineId VARCHAR(4)  
  DECLARE @ShiftCurrentDate NVARCHAR(8)  
  SET @ShiftCurrentDate = CONVERT(VARCHAR(8), GETDATE(), 112)  
  IF ((@subModule = 3) OR (@subModule = 119))  -- #Azman 22/02/2018 Add ReproductionWT Module  
   SET @QCType = (SELECT TOP(1) QCType FROM DOT_FSQCTypeTable WHERE DESCRIPTION = 'PT' AND STOPPED = 0)  
  ELSE  
   SET @QCType = NULL  
  -- If Shift is not supplied, select shift from Shift master and assign ShiftStart date  
  IF @shift = 0  
  BEGIN  
   SET @shiftname = dbo.Ufn_GetCurrentShift('PN')  
   SET @shift = (SELECT ShiftId from Shiftmaster where Name = @shiftname AND GroupType = 'PN' AND IsDeleted = 0)  
   SET @shiftStartDate = dbo.Ufn_GetShiftStartDate(@shiftname)  
  END  
   --- If Shift is supplied assign ShiftStart date  
  ELSE  
  SET @shiftStartDate = dbo.Ufn_GetShiftStartDate(@shiftname)  
  SET @serialSequenceNumber = Next VALUE FOR SerialNumberSeq  
    
  -- Set batch Type from Enum Master  
  SET @batchType = (SELECT EnumValue from EnumMaster where EnumText = @batchType and EnumType = 'BatchType')  
  
  -- Generate Serial Number  
  SET @tempSerialNumber = @site + RIGHT(CONVERT(VARCHAR(8), GETDATE(), 1),2) + FORMAT(@serialSequenceNumber,'0000000')  
  -- Calculate Total Pieces  
  SET @totalPcs = (@batchWeight /@tenPcsWeight )*10000  
  -- Generate Batch Number  
  --TOTT ID 40, 148 CR changes as below.  
  --Ror batch type -> Tumbling - PrintLostBatchCard,Tumbling - PrintWaterTightBatchCard,Tumbling - PrintVisualTestBatchCard @shiftStartDate should be current date  
  
  --Azman 150721 - Fix on 4 char LineId  
  SET @LineId = CASE LEN(@line)   
    WHEN 2 THEN '0'+RIGHT(CAST(@Line as VARCHAR(5)),1)   
    WHEN 3 THEN  RIGHT(CAST(@Line as VARCHAR(5)),2)   
    WHEN 4 THEN  RIGHT(CAST(@Line as VARCHAR(5)),3)   
   END  
  SET @batchNumber= CASE @subModule WHEN 1 THEN   
        RTRIM(@shiftname) + @LineId + '/'+ @shiftStartDate+ '/' + @size  
        WHEN 2  THEN   
        RTRIM(@batchType) + RIGHT('0'+CAST(@location AS VARCHAR(2)),2) + '/' + @ShiftCurrentDate + '/' + @size  
        WHEN 3  THEN  
        RTRIM(CASE @batchType WHEN 'PWT' Then 'P'WHEN 'QWT' Then 'Q'WHEN 'OWT' Then 'O'WHEN 'PSW' Then 'I' END)+ RIGHT('0'+CAST(@location AS VARCHAR(2)),2) +'/' + @ShiftCurrentDate+ '/' + @size  
        WHEN 4  THEN  
        RTRIM(@batchType) + RIGHT('0'+CAST(@location AS VARCHAR(2)),2) +'/' + @shiftStartDate + '/' + @size  
        WHEN 5  THEN  
        RTRIM(@batchType) + RIGHT('0'+CAST(@location AS VARCHAR(2)),2) +'/' + @ShiftCurrentDate + '/' + @size  
        WHEN 119 THEN -- #Azman 01/03/2018 Add ReproductionWT Module  
        RTRIM(@shiftname) + @LineId + '/'+ @shiftStartDate+ '/' + @size  
        WHEN 123 THEN -- #Azman 01/03/2018 Add ReproductionVT Module  
        RTRIM(@shiftname) + @LineId + '/'+ @shiftStartDate+ '/' + @size  
        END  
  BEGIN TRANSACTION  
   -- Insert in to Batch table  
   INSERT INTO Batch (SerialNumber,BatchNumber,ShiftId,LineId,GloveType,Size,TierSide,BatchWeight,TenPCsWeight,  
   BatchLostArea,BatchCardDate,QCType,QAIDate,BypassReasonId,ReferenceNumber ,ReWorkCount ,IsReprint ,IsOnline ,TotalPCs ,  
   ModuleId ,SubModuleId ,LocationId ,BatchType ,AuthorizedBy ,LastModifiedOn ,WorkStationId,  
   IsFPBatchSplit ,BatchCardCurrentLocation,AuthorizedFor )VALUES(@tempSerialNumber,@batchNumber,@shift,@line,@gloveType,  
   @size,NULL,@batchWeight,@tenPcsWeight,@lostArea,@batchCardDate,@QCType,Null,NULL ,  
   NULL,0,NULL,0,@totalPcs,@module,@subModule,@location ,@batchType ,  
   @authorizedBy,@batchCardDate,@workStationNumber,NULL,'PN',@authorizedFor)  
   -- Insert in to Log Table  
   INSERT INTO BatchLog VALUES(@tempserialNumber,@operatorId,@location,GETDATE())  
   IF ((@subModule = 3) OR (@subModule = 119))  -- #Azman 22/02/2018 Add ReproductionWT Module  
   BEGIN  
   INSERT INTO QAI (QAIDate,QAIInspectorId,SerialNumber,BatchNumber,QCType,TenPcsWeight,LastModifiedDateTime,WorkStationId,SubModuleId,IsAXPostingSuccess)  
   VALUES (@batchCardDate,@operatorId,@tempSerialNumber,@batchNumber,@QCType,@tenPcsWeight,GETDATE(),@workStationNumber,@SubModule,1)  
   UPDATE Batch SET QAIDate = GETDATE() WHERE SerialNumber = @tempSerialNumber  
   END  
 -- Return Serial Number and Batch Number  
 SELECT @batchNumber AS 'BatchNumber' ,@tempSerialNumber AS 'SerialNumber'  
 END TRY  
 BEGIN CATCH  
  IF @@TRANCOUNT > 0  
   ROLLBACK TRANSACTION;  
   THROW;  
 END CATCH;  
 IF @@TRANCOUNT > 0  
 COMMIT TRANSACTION;  
END
GO
PRINT N'Altering Procedure [dbo].[USP_SEL_GloveSize]...';


GO

  
-- =============================================  
  
-- Name:   USP_SEL_GloveSize  
  
-- Purpose:   Get Glove Sizes  
  
-- =============================================  
  
-- Change History  
  
-- Date    Author   Comments  
  
-- -----   ------   -----------------------------  
  
-- 11/07/2014  Ruhi Gupta    SP created.  
-- 14/01/2019 Azman Kasim  D365 Integration  
-- =============================================  
  
ALTER PROCEDURE [dbo].[USP_SEL_GloveSize]   
  
 -- Add the parameters for the stored procedure here  
  
 @GloveType  nvarchar(50),  
  
 @LineNumber  NVARCHAR(5) = null  
  
  
  
AS  
  
BEGIN  
  
  
  
BEGIN TRANSACTION;  
  
  
  
BEGIN TRY  
  
 --SELECT DISTINCT Configuration  
  
 --FROM AX_AVALINECONFIGURATIONINFORMATION  
  
 --WHERE GloveCode = @GloveType  
  
 --and dbo.ufn_GetLineNumber(Resource_) = @LineNumber   
 --and stopped = 0    
  
 SELECT HartalegaCommonSize as [Configuration]  
 FROM [dbo].[DOT_FSBrandHeaders] A (nolock)
 INNER JOIN [dbo].[DOT_FSBrandLines] B (nolock) ON A.Id = B.BrandHeaderId  
 where GloveCode = @GloveType  
  
  
  
  
 SET NOCOUNT OFF  
  
END TRY  
  
BEGIN CATCH  
  
   IF @@TRANCOUNT > 0  
  
        ROLLBACK TRANSACTION;  
  
END CATCH;  
  
  
  
IF @@TRANCOUNT > 0  
  
  COMMIT TRANSACTION;  
  
  
  
  END
GO
PRINT N'Altering Procedure [dbo].[USP_SEL_Line_ALL_LocationAndGloveType]...';


GO


-- =======================================================
-- Name:			[USP_SEL_Line_ALL_LocationAndGloveType]
-- Purpose: 		Get Line based on location and glove type
-- =======================================================
-- Change History
-- Date         Author     Comments
-- -----        ------     -----------------------------
-- 05/10/2017 	MyAdamas	   SP Created.
-- 07/06/2018   Azman Kasim	   GloveType length updated from 40 -> 50
-- 11/10/2018   Azrul		   Line No read from Resource staging table
-- =======================================================
ALTER PROCEDURE [dbo].[USP_SEL_Line_ALL_LocationAndGloveType]
	-- Add the parameters for the stored procedure here
	 @location		NVARCHAR(20),
	 @glovetype		NVARCHAR(50),
	 @size			NVARCHAR(8)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT DISTINCT
	SUBSTRING(res.ResourceGrp,3,3) as LineNumber
	FROM 
	 DOT_FloorD365BO AS bo WITH (NOLOCK) LEFT JOIN 
	 DOT_FloorD365BOResource AS res WITH (NOLOCK) ON bo.BthOrderId = res.BatchOrderId  and res.IsDeleted=0
	WHERE 
	bo.ProdPoolId = 'Glove' AND bo.ProdStatus = 'StartedUp'
	AND bo.ReworkBatch = 'No' 
	AND bo.IsDeleted=0 
	AND SUBSTRING(res.ResourceGrp,1,2) = @location
	AND bo.ItemId = @glovetype AND bo.Size = @size
	AND substring(res.ResourceGrp,3,3) in (select line.linenumber from LocationMaster as loc JOIN
										   LineMaster as line ON loc.LocationId = line.LocationId where loc.LocationName = @location)
	ORDER BY
	SUBSTRING(res.ResourceGrp,3,3)

		--SELECT  LineId as 'LineNumber' FROM ProductionLine pl 
		-- JOIN LocationMaster lom ON  PL.LocationId=lom.LocationId
		-- JOIN LineMaster lm ON lm.LocationId = lom.LocationId AND pl.LineId=lm.LineNumber
		-- WHERE pl.IsDeleted = 0 AND lom.IsDeleted = 0 AND lom.LocationName=@location
		-- --AND ((pl.LTGloveType=@glovetype AND pl.LTGloveSize=@size) OR (pl.LTAltGlove=@glovetype AND pl.LTGloveSize=@size)  OR (pl.LBGloveType=@glovetype AND pl.LBGloveSize=@size) OR (pl.LBAltGlove=@glovetype AND  pl.LBGloveSize=@size) OR (pl.RTGloveType=@glovetype AND pl.RTGloveSize=@size) OR (pl.RTAltGlove=@glovetype AND pl.RTGloveSize=@size) OR (pl.RBGloveType=@glovetype AND pl.RBGloveSize=@size) OR (pl.RBAltGlove=@glovetype AND pl.RBGloveSize=@size))
		-- AND ((pl.LTGloveType=@glovetype AND pl.LTGloveSize=@size) 
		-- OR (pl.LTAltGlove=@glovetype) 
		-- OR (pl.LBGloveType=@glovetype AND pl.LBGloveSize=@size) 
		-- OR (pl.LBAltGlove=@glovetype) 
		-- OR (pl.RTGloveType=@glovetype AND pl.RTGloveSize=@size) 
		-- OR (pl.RTAltGlove=@glovetype) 
		-- OR (pl.RBGloveType=@glovetype AND pl.RBGloveSize=@size) 
		-- OR (pl.RBAltGlove=@glovetype))
	 
		 --SELECT  LineId as 'LineNumber' FROM ProductionLine pl 
		 --JOIN LocationMaster lom ON  PL.LocationId=lom.LocationId
		 --JOIN LineMaster lm ON lm.LocationId = lom.LocationId AND pl.LineId=lm.LineNumber
		 --WHERE pl.IsDeleted = 0 AND lom.IsDeleted = 0 AND lom.LocationName=@location
		 --AND ((pl.LTGloveType=@glovetype AND pl.LTGloveSize=@size) OR (pl.LTAltGlove=@glovetype AND pl.LTGloveSize=@size)  OR (pl.LBGloveType=@glovetype AND pl.LBGloveSize=@size) OR (pl.LBAltGlove=@glovetype AND  pl.LBGloveSize=@size) OR (pl.RTGloveType=@glovetype AND pl.RTGloveSize=@size) OR (pl.RTAltGlove=@glovetype AND pl.RTGloveSize=@size) OR (pl.RBGloveType=@glovetype AND pl.RBGloveSize=@size) OR (pl.RBAltGlove=@glovetype AND pl.RBGloveSize=@size))
		 -- ORDER BY  LineId
	  
	SET NOCOUNT OFF;
END
GO
PRINT N'Altering Procedure [dbo].[USP_SEL_QCType]...';


GO
  
-- =============================================================  
-- Name:             USP_SEL_QCType  
-- Purpose:          Get list of QC Type and QC Type Description  
-- =============================================================  
-- Change History  
-- Date				Author			Comments  
-- ----------       ------			---------------------------- 
-- 02/08/2014       NarendraNath    SP created.  
-- 03/05/2018		Azrul			SP altered.
-- =============================================================  
--IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_SEL_QCType]') AND type in (N'P', N'PC'))
--DROP PROCEDURE [dbo].[USP_SEL_QCType]
--GO
ALTER PROCEDURE [dbo].[USP_SEL_QCType]  
AS  
BEGIN  
       SET NOCOUNT ON;      
       BEGIN  
              SELECT  QCTYPE AS QCType, [DESCRIPTION] AS [Description], [ROUTECATEGORY] AS [RouteCategory] FROM dbo.DOT_FSQCTypeTable  WITH (NOLOCK) WHERE STOPPED=0 ORDER BY QCType  
       END      
       SET NOCOUNT OFF;  
END
GO
PRINT N'Creating Procedure [dbo].[GRP_HSB_Rpt_OutStandingSalesOrderReport]...';


GO




-- ======================================================================================================    
-- Author		=	  Chung Peng
-- Create date	=	  25 Sept 2015
-- Description	=	  OutStandingSalesOrderReport
-- exec [proc_Rpt_Packing_TMPPackCapacityReportForPlant] 

--------------------------------------------------------------------------------------------------------

-- Updated By			= FX
-- Updated Date			= 27 March 2018
-- Updated Description  = Add case logic to check surgical glove then use hartalegacommonsize or configurationsize 
--						  to map with purchase order item case size

--------------------------------------------------------------------------------------------------------

-- Updated By			= PANG YIK SIU
-- Updated Date			= 2018-04-09
-- Updated Description  = update hartalegaCommonSize for all PurchaseOrderItem and PurchaseOrderItemCases, display Hartalega Size

-- Updated By:		yiksiu
-- Updated Date	: 22/10/2018
-- Updated Description:	OBP allow work order type t sync to FS : Salestable.HSB_TYPEOFORDER 1:Normal OEM;2:Forecast MTS;3:Actual MTS  
-- =======================================================================================================    
-- Updated By			= Vinoden
-- Update Date			= 03/06/2020
-- Update Description   = To specify the collation for the temp table to avoid collation conflicts
-- =======================================================================================================

CREATE PROCEDURE [dbo].[GRP_HSB_Rpt_OutStandingSalesOrderReport]
( 
	@StartDate Date, 
	@EndDate Date
)
As
BEGIN
---------------------------------------------- * Get OPEN purchase Order  -----------------------------------------------------		 
		IF OBJECT_ID('tempdb..#tempOPENPurchaseOrder' ) IS NOT NULL
			BEGIN
			  DROP TABLE	#tempOPENPurchaseOrder
			END
		CREATE TABLE #tempOPENPurchaseOrder ( PONumber nvarchar(20) collate SQL_Latin1_General_CP1_CI_AS not null) 
		
		IF OBJECT_ID('tempdb..#tempOPENPurchaseOrderLines' ) IS NOT NULL
			BEGIN
			  DROP TABLE	#tempOPENPurchaseOrderLines
			END
		CREATE TABLE #tempOPENPurchaseOrderLines ( PONumber nvarchar(20) collate SQL_Latin1_General_CP1_CI_AS not null,
				ItemNumber nvarchar(40) collate SQL_Latin1_General_CP1_CI_AS not null,
				Size nvarchar(10) collate SQL_Latin1_General_CP1_CI_AS not null, 
				PcsPerCase int,
				Printed int
				 ) 

		IF OBJECT_ID('tempdb..#FinalResult' ) IS NOT NULL
			BEGIN
			  DROP TABLE	#FinalResult
			END
		
		CREATE TABLE #FinalResult ( 
				Salesid			nvarchar(40), 
				CustomerRef		nvarchar(40), 
				ETD				DateTime,
				SalesName		nvarchar(80),
				ItemName		nvarchar(100) not null,
				GLOVECODE		nvarchar(50), 
				CONFIGURATION	 nvarchar(10) not null,
				SalesQty		 int,
				OutStandingCases int,
				OutStandingPcs   int,
				logicSection	nvarchar(1)
				 ) 

		Insert Into #tempOPENPurchaseOrder (PONumber) 
		Select PONumber From PurchaseOrder with(NOLOCK)
		Where POStatus ='Open'
		--AND PONumber='HNSAL0000622'
		--select * from #tempOPENPurchaseOrder
---------------------------------------------- *Get OPEN purchase Order * -----------------------------------------------------		 	

		Insert Into #tempOPENPurchaseOrderLines ( PONumber,ItemNumber,Size,PcsPerCase,Printed )					
		SELECT        POI.PONumber,
					  POI.ItemNumber,
					  POI.ItemSize, 
					  MAX(POI.CaseCapacity)* MAX(POI.InnerBoxCapacity),
					  Count (NULLIF (PIC.InternalotNumber,NULL)) as Printed
					 
		FROM          #tempOPENPurchaseOrder OPO with(NOLOCK) 
					  JOIN  [PurchaseOrderItem]  POI with(NOLOCK) on OPO.PONumber=POI.PONumber
					  LEFT JOIN [PurchaseOrderItemCases] PIC with(NOLOCK)
					  on PIC.PONumber = POI.PONumber AND  PIC.ItemNumber = POI.ItemNumber AND PIC.Size = POI.ItemSize	
							
		--WHERE         PIC.InternalotNumber is not null
		GROUP BY      POI.PONumber, POI.ItemNumber, POI.ItemSize  

		--Select * from #tempOPENPurchaseOrderLines order by PONumber 
		--return
		Select @StartDate = CAST(FORMAT(@StartDate,'yyyy-MM-dd') as Date)
		Select @EndDate = CAST(FORMAT(@EndDate,'yyyy-MM-dd') as Date)
		
--------------*Get OPEN order(Not started printing or Not finished printing) exist in both AX & Floor* -----------------------------------------------------		 	
	
		Insert Into #FinalResult (Salesid,CustomerRef,ETD,SalesName,ItemName,GLOVECODE,CONFIGURATION,SalesQty,OutStandingCases,OutStandingPcs,logicSection )		
		SELECT		
					axSoline.Salesid, axSoline.CustomerRef,	axSoline.STShippingDateConfirmed as ETD, 
					axSOline.SalesName, axSOline.ITEMNAME,axSOline.GLOVECODE,axSOline.HARTALEGACOMMONSIZE, axSOline.SalesQty,
					
					isNULL ((axSOline.SalesQty - isnull(OPOL.Printed,0)) ,0 )as OutStandingCases,
					ISNULL( isNULL (( axSOline.SalesQty - isnull(OPOL.Printed,0)) ,0 ) * (axSOline.avaBaseQty/NULLIF(axSOline.SalesQty,0)),0) as OutStandingPcs-----encounter by zero issue: ITRF:20210908011519270276
					,'A'
		FROM		dbo.[VW_AXSOline_CRS] axSoline
		INNER JOIN	#tempOPENPurchaseOrderLines OPOL 	on   axSoline.Salesid =OPOL.PONumber 
					AND OPOL.Size = axSoline.HARTALEGACOMMONSIZE	
					--AND OPOL.Size = CASE WHEN axSoline.ITEMTYPE = 8 -- Surgical Glove
					--					THEN axSoline.HARTALEGACOMMONSIZE 
					--					ELSE axSoline.CONFIGURATION 
					--				END
					AND OPOL.ItemNumber = axSoline.ItemId
		WHERE 
		
		axSoline.WorkOrderType <> 3
		AND
		( axSoline.STShippingDateConfirmed between 
			CAST(FORMAT(@StartDate,'yyyy-MM-dd') + ' '+ '00:00:00' AS datetime) AND CAST(FORMAT(@EndDate,'yyyy-MM-dd') + ' '+ '00:00:00' AS datetime) 
		)
				print 'BBB'
	
		--AND
		--(axSOline.SalesQty - isnull(OPOL.Printed,0)) >0
		--OR  (axSoline.STShippingDateConfirmed = '1900-01-01 00:00:00')  -- working code
--return
--------------------------------------------- 	*Get OPEN PO but size not started printing ( no data in floor sys or ratio change new size)------------------------------
		Insert Into #FinalResult (Salesid,CustomerRef,ETD,SalesName,ItemName,GLOVECODE,CONFIGURATION,SalesQty,OutStandingCases,OutStandingPcs,logicSection )		
		SELECT		
					axSoline.Salesid, axSoline.CustomerRef,	axSoline.STShippingDateConfirmed as ETD, 
					axSOline.SalesName, axSOline.ITEMNAME,axSOline.GLOVECODE,axSOline.HARTALEGACOMMONSIZE, axSOline.SalesQty,
					
					isNULL (axSOline.SalesQty,0) as OutStandingCases,
					ISNULL( isNULL ( axSOline.SalesQty ,0 ) * (axSOline.avaBaseQty/NULLIF(axSOline.SalesQty,0)),0) as OutStandingPcs-----encounter by zero issue: ITRF:20210908011519270276
					,'B'
		FROM		dbo.[VW_AXSOline_CRS] axSoline
		
		WHERE  
		
		axSoline.WorkOrderType <> 3
		AND
		( axSoline.STShippingDateConfirmed between 
			CAST(FORMAT(@StartDate,'yyyy-MM-dd') + ' '+ '00:00:00' AS datetime) AND CAST(FORMAT(@EndDate,'yyyy-MM-dd') + ' '+ '00:00:00' AS datetime) 
		)
		AND
			Not exists (  select distinct PONumber, ItemNumber, Size from PurchaseOrderItemCases POIC Where
			POIC.PONumber = axSoline.Salesid AND POIC.ItemNumber= axSoline.ItemId AND POIC.Size = axSoline.HARTALEGACOMMONSIZE )
																								--CASE WHEN axSoline.ITEMTYPE = 8 -- Surgical Glove
																								--			THEN axSoline.HARTALEGACOMMONSIZE
																								--			ELSE axSoline.CONFIGURATION	
																								--		END	    )


		Order by axSoline.Salesid

		print 'CCC'
--return		
---------------------------------------------- *Get SO keyed in but NOT start Printing* -----------------------------------------------------		 	
/*
		Insert Into #FinalResult (Salesid,CustomerRef,ETD,SalesName,ItemName,GLOVECODE,CONFIGURATION,SalesQty,OutStandingCases,OutStandingPcs,logicSection )		
		SELECT		
					axSoline.Salesid, axSoline.CustomerRef,	axSoline.STShippingDateConfirmed as ETD, 
					axSOline.SalesName, axSOline.ITEMNAME,axSOline.GLOVECODE,axSOline.CONFIGURATION, axSOline.SalesQty,
					
					isNULL (axSOline.SalesQty,0) as OutStandingCases,
					ISNULL( isNULL ( axSOline.SalesQty ,0 ) * (axSOline.avaBaseQty/axSOline.SalesQty),0) as OutStandingPcs
					,'C'
		FROM		dbo.[VW_AXSOline] axSoline
		
		WHERE 
			
		( axSoline.STShippingDateConfirmed between 
			CAST(FORMAT(@StartDate,'yyyy-MM-dd') + ' '+ '00:00:00' AS datetime) AND CAST(FORMAT(@EndDate,'yyyy-MM-dd') + ' '+ '00:00:00' AS datetime) 
		)
		AND
		axSOline.Salesid NOT IN (Select PONumber From PurchaseOrder with(NOLOCK) )
*/		
--return

---------------------------------------------- *Get Finished Printing but not SO packing/invoice yet -----------------------------------------------------		 	
---------------------------------------------- BEGIN This PORTION CAN REMOVE, NO USE ONLY for FUTURE PREPARATION 
-----------------------------------------------last final query already  filter outstand 0 alr---------------------------------
		IF OBJECT_ID('tempdb..#tempCLOSEDPurchaseOrder' ) IS NOT NULL
			BEGIN
			  DROP TABLE	#tempCLOSEDPurchaseOrder
			END
		CREATE TABLE #tempCLOSEDPurchaseOrder ( PONumber nvarchar(20) collate SQL_Latin1_General_CP1_CI_AS not null ) 
		Insert Into #tempCLOSEDPurchaseOrder (PONumber)		
		Select PONumber From PurchaseOrder with(NOLOCK) Where POStatus ='Closed'
		AND PONumber in (Select SalesID From dbo.[VW_AXSOline_CRS] axSoline)
		
		IF OBJECT_ID('tempdb..#tempCLOSEDPurchaseOrderLines' ) IS NOT NULL
			BEGIN
			  DROP TABLE	#tempCLOSEDPurchaseOrderLines
			END
		CREATE TABLE #tempCLOSEDPurchaseOrderLines ( PONumber nvarchar(20) collate SQL_Latin1_General_CP1_CI_AS not null,
				ItemNumber nvarchar(40) collate SQL_Latin1_General_CP1_CI_AS not null,
				Size nvarchar(10) collate SQL_Latin1_General_CP1_CI_AS not null, 
				PcsPerCase int,
				Printed int
				 ) 
		Insert Into #tempCLOSEDPurchaseOrderLines ( PONumber,ItemNumber,Size,PcsPerCase,Printed )					
		SELECT        PIC.PONumber,
					  PIC.ItemNumber,
					  PIC.Size, 
					  MAX(POI.CaseCapacity)* MAX(POI.InnerBoxCapacity),
		              Count(PIC.PONumber) as Printed 
		
		FROM          [PurchaseOrderItemCases] PIC with(NOLOCK)JOIN #tempCLOSEDPurchaseOrder CPO with(NOLOCK) on PIC.PONumber=CPO.PONumber
					  JOIN  [PurchaseOrderItem]  POI with(NOLOCK) on PIC.PONumber = POI.PONumber AND  PIC.ItemNumber = POI.ItemNumber 
							AND PIC.Size = POI.ItemSize
		WHERE         PIC.InternalotNumber is not null
		GROUP BY      PIC.PONumber, PIC.ItemNumber, PIC.Size 
		--select * from #tempCLOSEDPurchaseOrderLines
		--return 

		Insert Into #FinalResult (Salesid,CustomerRef,ETD,SalesName,ItemName,GLOVECODE,CONFIGURATION,SalesQty,OutStandingCases,OutStandingPcs,logicSection )		
		SELECT	axSoline.Salesid, axSoline.CustomerRef,	axSoline.STShippingDateConfirmed as ETD, 
				axSOline.SalesName, axSOline.ITEMNAME,axSOline.GLOVECODE,axSOline.HARTALEGACOMMONSIZE, axSOline.SalesQty,
					
				isNULL ((axSOline.SalesQty - isnull(CPOL.Printed,0)) ,0 )as OutStandingCases,
				ISNULL( isNULL (( axSOline.SalesQty - isnull(CPOL.Printed,0)) ,0 ) * (axSOline.avaBaseQty/NULLIF(axSOline.SalesQty,0)),0) as OutStandingPcs-----encounter by zero issue: ITRF:20210908011519270276
				,'D'	
		FROM		dbo.[VW_AXSOline_CRS] axSoline
		INNER JOIN	#tempCLOSEDPurchaseOrderLines CPOL 	on   axSoline.Salesid =CPOL.PONumber 	
					AND CPOL.Size = axSoline.HARTALEGACOMMONSIZE
					--AND CPOL.Size = CASE WHEN axSoline.ItemType = 8-- Surgical Glove
					--					THEN axSoline.HARTALEGACOMMONSIZE
					--					ELSE axSoline.CONFIGURATION 
					--				END
					AND CPOL.ItemNumber = axSoline.ItemId
		WHERE 
		
		axSoline.WorkOrderType <> 3
		AND
		( axSoline.STShippingDateConfirmed between 
			CAST(FORMAT(@StartDate,'yyyy-MM-dd') + ' '+ '00:00:00' AS datetime) AND CAST(FORMAT(@EndDate,'yyyy-MM-dd') + ' '+ '00:00:00' AS datetime) 
		)
		AND		
		axSOline.Salesid  IN (Select PONumber From PurchaseOrder with(NOLOCK)  Where POStatus ='Closed')
		--return
----------------------------------------------END This PORTION CAN REMOVE, NO USE ONLY for FUTURE PREPARATION---------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------

		Select * from #FinalResult Where OutStandingCases!=0 AND OutStandingPcs !=0
		Order by ETD, Salesid
		
		--Select ETD,Salesid, ItemName,CONFIGURATION, count(Salesid) from #FinalResult Where OutStandingCases!=0 AND OutStandingPcs !=0
		--Group by ETD,Salesid, ItemName,CONFIGURATION
		--Order by ETD, Salesid


		/*axSoline.Salesid not in 		
		(
			Select PONumber From PurchaseOrder with(NOLOCK) Where POStatus ='Closed'
		)*/
END
GO
PRINT N'Creating Procedure [dbo].[GRP_Rpt_Production_DailyDetailTumble]...';


GO





-- ======================================================================================================    
-- author : michael wong
-- TFS ticket : 57
-- source : this stored proc copied from proc_Rpt_Production_DailyDetailTumble

-- =======================================================================================================    

CREATE PROCEDURE [dbo].[GRP_Rpt_Production_DailyDetailTumble]
(
	@StartDate DATE, 
	@EndDate DATE, 
	@Qai INT,
	@ShiftTime INT,
	@Plant nvarchar(max),	
	@Line nvarchar(max),
	@GloveType nvarchar(max)
)

AS
BEGIN
	
;WITH tempQai AS
(
		SELECT * FROM
		(
			SELECT QAI.SerialNumber, QAI.InnerBox, QAI.PackingSize, QAI.QAIDate, ROW_NUMBER() OVER (PARTITION BY SerialNumber ORDER BY LastModifiedDateTime desc) _row
			FROM dbo.QAI with (nolock)
			WHERE QAIScreenName IN ('QAIScanInnerTenPcs','QAIScan', 'EditOnlineBatchCardInfo')
		) drv WHERE _row = 1
)	  

			SELECT * from 
			(
			select 
						case when Batch.QAIDate is null then 0 
							 when Batch.QAIDate = '' then 0 
						else 1 end as QAIIndicator,
						batch.SerialNumber,
						batch.BatchNumber,
						batch.GloveType,
						cast(Batch.BatchCardDate as time(0)) as [Time],
						Batch.TenPcsWeight,
						Batch.BatchWeight,
						Batch.TotalPCs,
						lm.LocationName, 
						Batch.BatchCardDate,
						Batch.LineId,
						tempQai.InnerBox,
						tempQai.PackingSize,
						batch.size

			from		Batch with (nolock)
			LEFT JOIN	tempQai
						ON Batch.SerialNumber = tempQai.SerialNumber
			left join locationmaster lm with (nolock) on (batch.locationid=lm.locationid)
			where		Batch.BatchType = 'T'
						AND
						Batch.BatchCardDate >=
						IIF( @ShiftTime = 0,CAST(FORMAT(@StartDate,'yyyy-MM-dd') + ' '+ '00:00:00' AS datetime),CAST(FORMAT(@StartDate,'yyyy-MM-dd') + ' '+ '07:00:00' AS datetime))
						AND Batch.BatchCardDate<=
						IIF( @ShiftTime = 0,CAST(FORMAT(@EndDate,'yyyy-MM-dd') + ' '+ '23:59:59' AS datetime),CAST(FORMAT(dateadd(day,1,@EndDate),'yyyy-MM-dd')  + ' ' + '06:59:59' AS datetime))
			)a
			where a.QAIIndicator = @Qai and
			 a.LocationName IN (SELECT Item FROM dbo.SplitString(@Plant, ',')) 
			and a.lineid IN (SELECT Item FROM dbo.SplitString(@LINE, ',')) 			
			and a.GloveType IN (SELECT Item FROM dbo.SplitString(@GloveType, ','))
			ORDER BY a.LineId, a.BatchCardDate

END
GO
PRINT N'Creating Procedure [dbo].[GRP_Rpt_QC_Efficiency]...';


GO







-- ======================================================================================================    
-- author : michael wong
-- TFS ticket : 
-- source : 

-- =======================================================================================================    

CREATE PROCEDURE [dbo].[GRP_Rpt_QC_Efficiency]
(
	@StartDate DATE, 
	@EndDate DATE, 
	@ShiftTime INT,
	@Plant nvarchar(max)	

)


AS
BEGIN
		
Create TABLE #tempQCEfficiency 
(
	
	serialnumberA numeric(15,0),
	QCIDA INT,
	ID INT 
	,ProcessInd NVARCHAR(10)
	,BalancePcs DECIMAL(18, 3)
	,PackedPcs DECIMAL(18, 3)
	,RejectPcs DECIMAL(18, 3)
	,GloveTransferPcs DECIMAL(18, 3)
	,SumPackedPcs DECIMAL(18, 3)
	,SumRejectPcs DECIMAL(18, 3)
	,SumGloveTransferPcs DECIMAL(18, 3)
	,ProcessDate DATETIME
)

Create TABLE #TempQCTarget (
		QCIDB INT,
		SerialnumberB numeric (15,0),
		QCTarget float	,
		--Duration int,
		Rework varchar(5),
		Defect nvarchar(max)
)

Create TABLE #TempQCYieldPacking (
		QCIDC INT,
		BatchStart Datetime,
		BatchEnd Datetime,
		QCGroupDescription nvarchar(100),
		ShiftName nvarchar(1),
		QCGroupCount INT,
		GloveType nvarchar(50),
		SerialNumberC numeric(15,0),
		BatchNumber nvarchar(20),
		BatchType nvarchar(20),
		ScanLastMod datetime,
		QCType nvarchar(50),
		Plant nvarchar(20)
)

Create TABLE #TempMasterQCList (
		Mast_QCID INT,
		Mast_Serialnumber numeric (15,0),
		Mast_Identifier nvarchar(20),
		Mast_BatchStartTime datetime,
		Mast_BatchEndTime datetime,
		Mast_ShiftIn  nvarchar(20),
		Mast_ShiftOut  nvarchar(20),
		Mast_Duration int,
		Mast_QcRework int
		
)


;WITH listOfSerial AS
(

		select *, row_number() over (order by serialnumber) as rownum  from ( 
			select distinct serialnumber
			from qcyieldandpacking b (nolock) join locationmaster lm (nolock) on (b.locationid=lm.locationid)
			where 						
			b.BatchStartTime >=IIF( @ShiftTime = 0,CAST(FORMAT(@StartDate,'yyyy-MM-dd') + ' '+ '00:00:00' AS datetime),CAST(FORMAT(@StartDate,'yyyy-MM-dd') + ' '+ '07:00:00' AS datetime))
			AND b.BatchStartTime<=IIF( @ShiftTime = 0,CAST(FORMAT(@EndDate,'yyyy-MM-dd') + ' '+ '23:59:59' AS datetime),CAST(FORMAT(dateadd(day,1,@EndDate),'yyyy-MM-dd')  + ' ' + '06:59:59' AS datetime))
			AND  lm.LocationName IN (SELECT Item FROM dbo.SplitString(@Plant, ',')) 
		) as t
		

/*
		select serialnumber,row_number() over (order by serialnumber) as rownum 
		from batch b (nolock) join locationmaster lm (nolock) on (b.locationid=lm.locationid)
		where 						
		b.BatchCardDate >=IIF( @ShiftTime = 0,CAST(FORMAT(@StartDate,'yyyy-MM-dd') + ' '+ '00:00:00' AS datetime),CAST(FORMAT(@StartDate,'yyyy-MM-dd') + ' '+ '07:00:00' AS datetime))
		AND b.BatchCardDate<=IIF( @ShiftTime = 0,CAST(FORMAT(@EndDate,'yyyy-MM-dd') + ' '+ '23:59:59' AS datetime),CAST(FORMAT(dateadd(day,1,@EndDate),'yyyy-MM-dd')  + ' ' + '06:59:59' AS datetime))
		AND  lm.LocationName IN (SELECT Item FROM dbo.SplitString(@Plant, ',')) 
	*/
		
)	 



	select * into #tempListOfSerial from listOfSerial
	declare @TableID int
	declare @serialnumber numeric(15,0)

	insert into #TempMasterQCList
	select  id as mast_id, serialnumber as mast_serialnumber, IIF(batchstatus='Split Batch','QC(SB)',IIF(batchstatus='QC Type Changed','QC(TC)','QC')) as mast_identifier,
	batchstarttime as mast_batchstarttime, batchendtime as mast_batchendtime,
	IIF(batchstarttime is null,'thisisnull', IIF (cast(batchstarttime as time)>='07:00:00' AND cast(batchstarttime as time)<'19:00:00' ,'A','B'  ) ),
	IIF(batchendtime is null,'thisisnull', IIF (cast(batchendtime as time)>='07:00:00' AND cast(batchendtime as time)<'19:00:00' ,'A','B'  ) ),
	datediff(second,b.BatchStartTime, b.BatchEndTime) as duration,b.reworkcount as Mast_QcRework
	from qcyieldandpacking b (nolock) join locationmaster lm (nolock) on (b.locationid=lm.locationid)
	where 						
	b.BatchStartTime >=IIF( @ShiftTime = 0,CAST(FORMAT(@StartDate,'yyyy-MM-dd') + ' '+ '00:00:00' AS datetime),CAST(FORMAT(@StartDate,'yyyy-MM-dd') + ' '+ '07:00:00' AS datetime))
	AND b.BatchStartTime<=IIF( @ShiftTime = 0,CAST(FORMAT(@EndDate,'yyyy-MM-dd') + ' '+ '23:59:59' AS datetime),CAST(FORMAT(dateadd(day,1,@EndDate),'yyyy-MM-dd')  + ' ' + '06:59:59' AS datetime))
	AND  lm.LocationName IN (SELECT Item FROM dbo.SplitString(@Plant, ',')) 

	while exists (select * from #tempListOfSerial)
	Begin
		select top 1 @TableID = rownum, @serialnumber=serialnumber
		from #tempListOfSerial
		order by rownum asc

		
		insert into  #tempQCEfficiency 
		select serialnumberA= @serialnumber,* from ufn_GetForQCEfficiencyReport(@serialnumber)
		--INSERT INTO #tempQCEfficiency
		--VALUES (@serialnumber,@BalancePcs,0,0,0,@SumPackedPcs,@SumRejectPcs,@SumGloveTransferPcs,@ProcessDate)
		
		INSERT INTO #TempQCTarget
		select qc.id, b.serialnumber, 
		case when ex.NUMOFTESTER=0
		then
		0 
		else
		(CAST((ex.PIECESHR * qc.QCGroupCount) AS decimal)/ex.NUMOFTESTER)/60
		END AS 'Actual QC Target',
		--datediff(second,qc.BatchStartTime, qc.BatchEndTime) as duration,
		CASE WHEN qc.ReworkCount>0 
			THEN 'Yes' 
			ELSE 'No' 
		END AS 'Rework',
		
		CASE WHEN qc.ReworkCount>0 
			THEN (SELECT ReasonText FROM ReasonMaster WHERE ReasonId = qc.ReworkReasonId) 
			ELSE ' ' 
		END AS 'Defect'
		FROM Batch b WITH (NOLOCK)
			JOIN QCYieldAndPacking qc WITH (NOLOCK)
				ON b.SerialNumber = qc.SerialNumber 
				JOIN
		(select D.QCType,C.GLOVECODE,C.NumOfTester,C.PiecesHR from (
					select B.GLOVECODE,A.NumOfTester,A.PiecesHR,A.QCTypeId from DOT_GLOVERELQCTYPE A (NOLOCK)
					JOIN VW_GloveCode B ON A.GloveRefRecId = B.AVAGLOVECODETABLE_ID
					) C
					JOIN DOT_FSQCTypeTable D (NOLOCK) ON C.QCTypeId = D.Id
					) ex ON ex.GLOVECODE = b.GloveType 
				 AND ex.QCType = qc.QCType 		 
		WHERE qc.BatchEndTime > qc.BatchStartTime 
				--AND qc.BatchTargetTime > qc.BatchStartTime 
				--AND CONVERT(DATE,qc.LastModifiedOn) BETWEEN '2021-04-01' AND '2021-04-02' 
				--ITSM TICKET 153900
				--AND qc.LastModifiedOn >=IIF( @ShiftTime = 0,CAST(FORMAT(@StartDate,'yyyy-MM-dd') + ' '+ '00:00:00' AS datetime),CAST(FORMAT(@StartDate,'yyyy-MM-dd') + ' '+ '07:00:00' AS datetime))
				--AND qc.LastModifiedOn<=IIF( @ShiftTime = 0,CAST(FORMAT(@EndDate,'yyyy-MM-dd') + ' '+ '23:59:59' AS datetime),CAST(FORMAT(dateadd(day,1,@EndDate),'yyyy-MM-dd')  + ' ' + '06:59:59' AS datetime))
				AND b.SerialNumber=@serialnumber


		Insert into #TempQCYieldPacking
		select qc.id, qc.BatchStartTime, qc.BatchEndTime ,  qcm.QCGroupDescription,sm.Name, qc.QCGroupCount,
		b.glovetype,qc.SerialNumber,b.BatchNumber, b.BatchType,max(pts.LastModifiedOn) as ScanLastMod,axqctype.description, lm.locationname
		from qcyieldandpacking qc (nolock)  
		left join qcgroupmaster qcm (nolock)  on (qc.QCGroupId=qcm.QCGroupId)
		left join shiftmaster sm (nolock)  on (qc.ShiftId=sm.shiftid)
		left join batch b (nolock)  on (b.serialnumber=qc.SerialNumber)
		left join ptscanbatchcard pts (nolock)  on(qc.SerialNumber = pts.SerialNumber)
		left join locationmaster lm (nolock)  on (qc.locationid=lm.locationid)
		left join AX_AVAQCTYPETABLE axqctype (nolock)   on (qc.qctype=axqctype.qctype)
		where qc.SerialNumber=@serialnumber
		group by 
		qc.id,qc.BatchStartTime,qc.BatchEndTime, qcm.QCGroupDescription,sm.Name,qc.QCGroupCount,
		b.glovetype,qc.SerialNumber,b.BatchNumber, b.BatchType,axqctype.description, lm.locationname

		delete #tempListOfSerial where rownum = @TableID
	End



	select * from #TempMasterQCList tmql
	left join #tempQCEfficiency tqc  on (tmql.Mast_QCID=tqc.QCIDA)
	left join #TempQCTarget qct on (tmql.Mast_QCID=qct.QCIDB)
	left join #TempQCYieldPacking qcyp on (tmql.Mast_QCID=qcyp.qcidC)
	where tmql.Mast_Identifier like 'QC%'
	--AND CONVERT(DATE,tqc.ProcessDate) >=IIF( @ShiftTime = 0,CAST(FORMAT(@StartDate,'yyyy-MM-dd') + ' '+ '00:00:00' AS datetime),CAST(FORMAT(@StartDate,'yyyy-MM-dd') + ' '+ '07:00:00' AS datetime))
	--AND CONVERT(DATE,tqc.ProcessDate)<=IIF( @ShiftTime = 0,CAST(FORMAT(@EndDate,'yyyy-MM-dd') + ' '+ '23:59:59' AS datetime),CAST(FORMAT(dateadd(day,1,@EndDate),'yyyy-MM-dd')  + ' ' + '06:59:59' AS datetime))
	order by tqc.serialnumberA, tqc.id,tqc.ProcessDate

	/*
	select * from #tempQCEfficiency tqc  
	left join #TempQCTarget qct on (tqc.QCIDA=qct.QCIDB)
	left join #TempQCYieldPacking qcyp on (tqc.QCIDA=qcyp.qcidC)
	where tqc.ProcessInd like 'QC%'
	--AND CONVERT(DATE,tqc.ProcessDate) >=IIF( @ShiftTime = 0,CAST(FORMAT(@StartDate,'yyyy-MM-dd') + ' '+ '00:00:00' AS datetime),CAST(FORMAT(@StartDate,'yyyy-MM-dd') + ' '+ '07:00:00' AS datetime))
	--AND CONVERT(DATE,tqc.ProcessDate)<=IIF( @ShiftTime = 0,CAST(FORMAT(@EndDate,'yyyy-MM-dd') + ' '+ '23:59:59' AS datetime),CAST(FORMAT(dateadd(day,1,@EndDate),'yyyy-MM-dd')  + ' ' + '06:59:59' AS datetime))
	order by tqc.serialnumberA, tqc.id,tqc.ProcessDate
	*/


	
	/*select serialnumber, sum(BalancePcs) as BalancePcs, sum(RejectPcs) as RejectPcs from #tempQCEfficiency 
	where ProcessInd='QC' and ProcessDate>='2021-04-01' and ProcessDate<='2021-04-02'
	group by serialnumber
	*/
	Drop table #tempListOfSerial  
	Drop table #tempQCEfficiency
	Drop table #TempQCTarget
	Drop table #TempQCYieldPacking
	Drop Table #TempMasterQCList
END
GO
PRINT N'Creating Procedure [dbo].[GRP_RPT_ReportForWasherYieldBatchDetail]...';


GO




CREATE PROCEDURE [dbo].[GRP_RPT_ReportForWasherYieldBatchDetail]	
(
	@Month DATETIME,
	@Washer int
)
AS
BEGIN
--==========================================================================================
--		Author		: <Fx>
--		Create date	: <28/09/2017>
--		Description	: <Washer Yield Batch Detail Report>
--===========================================================================================
-- Updated by			: Amira Fazilah
-- Updated date			: 30 Dec 2020
-- Update description	: To get the washer number by using Washer Number instead of WasherID
--===========================================================================================

	SET NOCOUNT ON;

	DECLARE @CurDateTime DATETIME = GETDATE()

	;WITH ResultCTE AS
	(
		SELECT 
			wsbc.SerialNumber															AS SerialNumber,
			b.BatchNumber																AS BatchNumber,
			b.GloveType																	AS GloveType,
			NULL																		AS Reason,
			CAST(wsbc.ScanBatchStartDateTime AS DATE)									AS Date,
			CAST(wsbc.StartTime AS TIME(0))												AS StartTime,
			CAST(ISNULL(wsbc.StopTime,@CurDateTime) AS TIME(0))							AS StopTime,	
			IsRework																	AS IsRework,
			NULL																		AS IsStoppage,
			NULL																		AS IsSchedule,
			wsbc.OperatorId																AS ID,
			em.Name																		AS Name,
			--wsbc.WasherProgram															AS Program,
			dfwp.WasherProgram															AS Program,
			CASE WHEN wsbc.StopTime IS NULL
			THEN 1
			ELSE 0
			END																			AS IsEndTimeNull
		FROM dbo.WasherScanBatchCard AS wsbc WITH (NOLOCK)
		INNER JOIN dbo.Batch AS b WITH (NOLOCK)
			ON wsbc.SerialNumber = b.SerialNumber
		INNER JOIN [WasherMaster] WM WITH (NOLOCK)
			ON wsbc.WasherId = WM.WasherId
		LEFT JOIN dbo.EmployeeMaster em WITH(NOLOCK)
			ON em.EmployeeId = wsbc.OperatorId
		INNER JOIN DOT_FSWashProgram AS dfwp WITH (NOLOCK)
			ON dfwp.Id = wsbc.WasherProgram 
		WHERE Month(ScanBatchStartDateTime) = MONTH(@Month)
			AND YEAR(ScanBatchStartDateTime) = YEAR(@Month)
			AND WM.WasherNumber = @Washer
			AND WM.IsDeleted = 0

		UNION

		SELECT 
			NULL																		AS SerialNumber,
			NULL																		AS BatchNumber,
			NULL																		AS GloveType,
			rm.ReasonText																AS Reason,
			CAST(wsd.StoppageStartDate AS DATE)											AS Date,
			CAST(wsd.StoppageStartDate AS TIME(0))										AS StartTime,
			CAST(ISNULL(wsd.StoppageEndDate,@CurDateTime) AS TIME(0))					AS StopTime,
			NULL																AS IsRework,
			CAST(1 AS BIT)																AS IsStoppage,
			rm.IsScheduled																AS IsSchedule,
			wsd.OperatorId																AS ID,
			em.Name																		AS Name,
			NULL																		AS Program,
			CASE WHEN wsd.StoppageEndDate IS NULL
			THEN 1
			ELSE 0
			END																			AS IsEndTimeNull
		FROM dbo.WasherStoppageData AS wsd WITH (NOLOCK)
		INNER JOIN dbo.ReasonMaster AS rm WITH (NOLOCK)
			ON wsd.ReasonId = rm.ReasonId
		INNER JOIN [WasherMaster] WM WITH (NOLOCK)
			ON wsd.WasherId = WM.WasherId
		LEFT JOIN dbo.EmployeeMaster em WITH(NOLOCK)
			ON em.EmployeeId = wsd.OperatorId
		WHERE MONTH(StoppageStartDate) = MONTH(@Month)
			AND YEAR(StoppageStartDate) = YEAR(@Month)
			AND WM.WasherNumber = @Washer
			AND WM.IsDeleted = 0
	)

	SELECT	SerialNumber,
			BatchNumber,
			GloveType,
			Reason,
			Date,
			StartTime,
			StopTime,
			CASE WHEN IsEndTimeNull = 1
			THEN
				CONVERT(VARCHAR(5), DATEDIFF(S, CAST(Date AS DATETIME) + CAST(StartTime AS DATETIME), @CurDateTime) / 3600)
					+ ':' +	CONVERT(VARCHAR(5), DATEDIFF(S, CAST(Date AS DATETIME) + CAST(StartTime AS DATETIME), @CurDateTime)%3600/60)
					+ ':' + CONVERT(VARCHAR(5), DATEDIFF(S, CAST(Date AS DATETIME) + CAST(StartTime AS DATETIME), @CurDateTime)%60)
			ELSE
				CASE WHEN StopTime < StartTime
				THEN
					CONVERT(VARCHAR(5), DATEDIFF(S, CAST(StartTime AS datetime), DATEADD(DAY,1,CAST(StopTime AS datetime))) / 3600)
					+ ':' +	CONVERT(VARCHAR(5), DATEDIFF(S, CAST(StartTime AS datetime), DATEADD(DAY,1,CAST(StopTime AS datetime)))%3600/60)
					+ ':' + CONVERT(VARCHAR(5), DATEDIFF(S, CAST(StartTime AS datetime), DATEADD(DAY,1,CAST(StopTime AS datetime)))%60)
				ELSE
					CONVERT(VARCHAR(5), DATEDIFF(S, StartTime, StopTime) / 3600)
					+ ':' +	CONVERT(VARCHAR(5), DATEDIFF(S, StartTime, StopTime)%3600/60)
					+ ':' + CONVERT(VARCHAR(5), DATEDIFF(S, StartTime, StopTime)%60)
				END
			END	AS Duration,
			IsRework,
			IsStoppage,
			IsSchedule,
			ID,
			Name,
			Program 
	FROM ResultCTE 
	ORDER BY Date, StartTime,StopTime

END
GO
PRINT N'Creating Procedure [dbo].[proc_Rpt_FinalPack_Plan]...';


GO
-- ======================================================================================================      
-- Author  =   9 Dots  
-- Create date =   9 Aug 2018  
-- Description =   Final Pack Plan Report   
-- exec [proc_Rpt_FinalPack_Plan]  
--------------------------------------------------------------------------------------------------------  
  
-- Updated By   = 9Dots Hafiz  
-- Updated Date   = 5/29/2019  
-- Updated Description  = 22/2--Created the query to get the needed value, 26/2--modified the query and add some field  
  
-- Updated By   = Pang YS  
-- Updated Date   = 4/12 Nov 2020  
-- Updated Description  = salesline sharing same FG and Size. quantity double itrf 20201030035416223040  
--        Shipment Plan Not Sync with FGBO in D365 itrf 20201113030915199194  
  
-- Updated By   = Pang YS  
-- Updated Date   = 17 Nov 2020  
-- Updated Description  = NGC Shipment Plan report - To Change Location Master Setting for P7 Bug Fix  
--        itrf 20201113043310225117  
  
-- =======================================================================================================      
  
CREATE PROCEDURE [dbo].[proc_Rpt_FinalPack_Plan]  
@phase nvarchar(100),  
@fromdate datetime,  
@todate datetime,  
@isFullPack int  
  
AS  
BEGIN  
SET NOCOUNT ON  
  
-- Pang: To Change Location Master Setting for P7 Bug Fix  
IF OBJECT_ID('tempdb..#tblPlant') IS NOT NULL DROP TABLE #tblPlant  
  
SELECT * INTO #tblPlant FROM LocationMaster(NOLOCK)   
UPDATE #tblPlant SET Area = 'Z4' WHERE LocationName = 'P7' -- to match with RDL phase 4 value: Z4  
  
  
SELECT   
  * INTO #temp  
FROM   
  (  
    SELECT   
      bo.prodstatus AS ProdStatus,   
      '' forecast,   
      Dateadd(day, -7, bo.schedend) AS SchedEnd,   
      bl.innerboxincaseno AS innerboxpercase,   
      0 AS SOR,   
      0 AS SORA,   
      0 AS SORB,   
      bl.glovesinnerboxno AS Innerboxno,   
      bo.schedstart AS planstartdate,   
      bh.glovecode AS glovecode,   
      bl.basequantity AS baseqty,   
      Isnull(fp.packdate, 0) AS packingdate,   
      so.salesid AS salesid,   
      bo.itemid AS FGCode,   
      im.NAME AS Brand,   
      bo.batchid AS custref,   
      so.shippingdateconfirmed AS CETD,   
      Dateadd(  
        day, -7, so.shippingdateconfirmed  
      ) AS PACKCPTLNDATE,   
  
      Isnull(  
        (  
          SELECT   
            bl.glovesinnerboxno   
          WHERE   
            bo.size IN ('XXS','XS','S','M','L')  
        ),   
        0  
      ) AS PackSizeXXSToL,   
      Isnull(  
        (  
          SELECT   
            bl.glovesinnerboxno   
          WHERE   
            bo.size IN ('XL','XXL','XXXL')  
        ),   
        0  
      ) AS PackSizeXLTo3XL,   
      0 AS isSO,   
      bo.size AS OrderedSize,   
      sl.salesqty AS OrderRatioCTN,   
      (  
        CASE WHEN lm.area = @phase   
        AND lm.locationid % 2 <> 0 THEN bo.qtysched ELSE 0 END  
      ) OrderRatioPlantA,   
      (  
        CASE WHEN lm.area = @phase   
        AND lm.locationid % 2 = 0 THEN bo.qtysched --sl.SalesQty--BO.QTYSCHDLE   
        ELSE 0 END  
      ) OrderRatioPlantB,   
      Isnull(  
        (  
          CASE WHEN lm.area = @phase   
          AND lm.locationid % 2 <> 0 THEN bo.schedstart END  
        ),   
        ''  
      ) planstartdatePA,   
      Isnull(  
        (  
          CASE WHEN lm.area = @phase   
          AND lm.locationid % 2 = 0 THEN bo.schedstart END  
        ),   
        ''  
      ) planstartdatePB,   
      bo.qtysched AS OrderRatioPlant,   
      Isnull(fp.casespacked, 0) AS PackedCarton,   
      sl.salesqty - fp.casespacked AS BalanceToPack,   
      lm.locationid AS plant,   
      lm.area AS Phase,   
      so.dotcustomerlotid AS CustomerLotID   
    FROM   
      dot_floorsales (nolock) so   
      JOIN dot_floorsalesline (nolock) sl ON so.salesid = sl.salesid   
      AND itemtype IN ('FG', 'FG2')   
      AND SL.isdeleted = SO.isdeleted   
      AND SL.isdeleted = 0 --AND configuration <> 'XXL'   
      RIGHT JOIN(  
        SELECT   
          prodstatus,   
          isdeleted,   
      size,   
          prodpoolid,   
          batchid,   
          Sum(qtysched) AS QtySched,   
          Min(schedstart) SchedStart,   
          Max(schedend) SchedEnd,   
          bthorderid,   
          itemid   
        FROM   
          dot_floord365bo (nolock)   
        WHERE   
          prodpoolid = 'FG'   
          AND isdeleted = 0 --AND size <> 'XXL'   
          --and size<>'FS'--AND BatchId='MEDU 09/19' --and ProdStatus='StartedUp'   
        GROUP BY   
          prodstatus,   
          size,   
          prodpoolid,   
          batchid,   
          itemid,   
          isdeleted,   
          bthorderid  
      ) AS bo --added isdeleted filter 20/3 hafiz --max(BthOrderId)BthOrderId   
      ON so.customerref = bo.batchid   
      AND bo.size = sl.configuration   
      AND bo.itemid = sl.itemid   
      LEFT JOIN dot_fsbrandlines (nolock) bl ON bl.itemid = bo.itemid   
      AND bl.hartalegacommonsize = sl.configuration   
      LEFT JOIN dot_fsitemmaster (nolock) im ON im.itemid = bo.itemid   
      AND (  
        im.itemtypecode = 'FG'   
        OR im.itemtypecode = '2FG'  
      )   
      LEFT JOIN(  
        SELECT   
          fgbatchorderno,   
          fp.itemnumber,   
          Sum(casespacked) casespacked,   
          fp.ponumber,   
          Max(packdate) PackDate,   
          fp.size   
        FROM   
          finalpacking (nolock) fp   
        GROUP BY   
          fp.ponumber,   
          fp.size,   
          fp.itemnumber,   
          fp.fgbatchorderno  
      ) fp ON fp.ponumber = sl.salesid   
      AND fp.size = bo.size   
      AND fp.itemnumber = bo.itemid   
      AND fp.fgbatchorderno = bo.bthorderid --and bo.Size=fp.Size    
      --and bo.BthOrderId=fp.FGBatchOrderNo --fix duplicate batchorder   
      --and sl.CONFIGURATION=fp.Size max(FGBatchOrderNo)FGBatchOrderNo   
      LEFT JOIN (  
        SELECT   
          res.batchorderid,   
          lm.locationid,   
          lm.area,   
          Substring(res.resource, 2, 1) locid   
        FROM   
          dot_floord365boresource (nolock) res   
          --JOIN locationmaster lm (nolock) ON lm.locationid = Substring(res.resource, 2, 1)   
          JOIN #tblPlant lm (nolock) ON lm.locationid = Substring(res.resource, 2, 1) -- Pang YS: To Change Location Master Setting for P7 Bug Fix  
        WHERE   
          res.isdeleted = 0   
        GROUP BY   
          res.batchorderid,   
          lm.locationid,   
          lm.area,   
          res.resource  
      ) lm ON lm.batchorderid = bo.bthorderid   
      LEFT JOIN dot_fsbrandheaders bh ON bo.itemid = bh.itemid   
      AND bh.isdeleted = 0   
    WHERE   
      lm.area = @phase   
      AND Isnull(  
        CASE WHEN lm.area = @phase THEN (  
          Dateadd(  
            day, -7, so.shippingdateconfirmed  
          )  
        ) END,   
        Dateadd(day, -7, bo.schedend)  
      ) BETWEEN @fromdate   
      AND @todate   
      AND SO.workflowstatus = 1 --APPROVED   
      ) AS mycode   
SELECT   
  * INTO #temp2  
FROM   
  (  
    SELECT   
      (  
        Isnull(sl.salesid, bo.bthorderid)  
      ) AS forecast,   
      Dateadd(day, -7, bo.schedend) AS SchedEnd,   
      Isnull(bl.innerboxincaseno, 0) AS innerboxpercase,   
      bh.glovecode AS glovecode,   
      Isnull(sl.salesid, '') AS salesid,   
      bo.size AS OrderedSize,   
      lm.area AS Phase,   
      Isnull(so.dotcustomerlotid, '') AS CustomerLotID,   
      bo.batchid AS custref,   
      im.NAME AS Brand,   
      '1900-01-01' AS planstartdate,   
      0 AS Innerboxno,   
      '1900-01-01' AS packingdate,   
      bo.itemid AS FGCode,   
      bl.basequantity AS baseqty,   
      Isnull(  
        so.shippingdateconfirmed, bo.schedend  
      ) AS CETD,   
      Isnull(  
        CASE WHEN lm.area = @phase THEN (  
          Dateadd(  
            day, -7, so.shippingdateconfirmed  
          )  
        ) END,   
        Dateadd(day, -7, bo.schedend)  
      ) AS PACKCPTLNDATE,   
      --DATEADD(DAY, - 11, so.ShippingDateConfirmed) as PACKCPTLNDATE,   
      Isnull(  
        (  
        SELECT   
            bl.glovesinnerboxno   
          WHERE   
            bo.size IN ('XXS','XS','S','M','L')  
        ),   
        0  
      ) AS PackSizeXXSToL,   
      Isnull(  
        (  
          SELECT   
            bl.glovesinnerboxno   
          WHERE   
            bo.size IN ('XL','XXL','XXXL')  
        ),   
        0  
      ) AS PackSizeXLTo3XL,   
      1 AS isSO,   
      Isnull(sl.salesqty, bo.qtysched) AS OrderRatioCTN,   
      (  
        CASE WHEN lm.area = @phase   
        AND lm.locationid % 2 <> 0 THEN bo.qtysched ELSE 0 END  
      ) OrderRatioPlantA,   
      (  
        CASE WHEN lm.area = @phase   
        AND lm.locationid % 2 = 0 THEN bo.qtysched --sl.SalesQty--BO.QTYSCHDLE   
        ELSE 0 END  
      ) OrderRatioPlantB,   
      Isnull(sl.salesqty, bo.qtysched) AS SOR,   
      (  
        CASE WHEN lm.area = @phase   
        --AND lm.locationid % 2 <> 0 THEN bo.qtysched ELSE 0 END  
  --AND lm.locationid % 2 <> 0 THEN Isnull(sl.salesqty, bo.qtysched) ELSE 0 END -- Pang: 4 Nov 2020  
  AND lm.locationid % 2 <> 0 THEN CASE WHEN bo.QtySched > sl.SalesQty THEN sl.SalesQty ELSE bo.qtysched END -- Pang: 12 Nov 2020  
  ELSE 0 END  
      ) SORA,   
      (  
        CASE WHEN lm.area = @phase   
        --AND lm.locationid % 2 = 0 THEN bo.qtysched --sl.SalesQty--BO.QTYSCHDLE   
  --AND lm.locationid % 2 = 0 THEN Isnull(sl.salesqty, bo.qtysched) -- Pang: 4 Nov 2020  
  AND lm.locationid % 2 = 0 THEN CASE WHEN bo.QtySched > sl.SalesQty THEN sl.SalesQty ELSE bo.qtysched END -- Pang: 12 Nov 2020  
        ELSE 0 END  
      ) SORB,   
      Isnull(  
        (  
          CASE WHEN lm.area = @phase   
          AND lm.locationid % 2 <> 0 THEN bo.schedstart END  
        ),   
        ''  
      ) planstartdatePA,   
      Isnull(  
        (  
          CASE WHEN lm.area = @phase   
          AND lm.locationid % 2 = 0 THEN bo.schedstart END  
        ),   
        ''  
      ) planstartdatePB,   
      0 AS packedcartonPlantA,   
      0 AS packedcartonPlantB,   
      0 AS balancetopackPlantA,   
      0 AS balancetopackPlantB,   
      (  
        CASE WHEN lm.area = @phase   
        AND lm.locationid % 2 <> 0 THEN lm.locationid ELSE 0 END  
      ) PlantAphaseA,   
      (  
        CASE WHEN lm.area = @phase   
        AND lm.locationid % 2 = 0 THEN lm.locationid ELSE 0 END  
      ) PlantAphaseB   
    FROM   
      dot_floorsales (nolock) so   
      JOIN dot_floorsalesline (nolock) sl ON so.salesid = sl.salesid   
      AND itemtype IN ('FG', 'FG2')   
      AND SL.isdeleted = SO.isdeleted   
      AND SL.isdeleted = 0 --AND configuration <> 'XXL'   
      RIGHT JOIN(  
        SELECT   
          prodstatus,   
          isdeleted,   
          size,   
          prodpoolid,   
          batchid,   
          Sum(qtysched) AS QtySched,   
          Min(schedstart) SchedStart,   
          Max(schedend) SchedEnd,   
          bthorderid,   
          itemid   
        FROM   
          dot_floord365bo (nolock)   
        WHERE   
          prodpoolid = 'FG'   
          AND isdeleted = 0 --AND size <> 'XXL'   
          AND size <> 'FS' --AND BatchId='MEDU 09/19' --and ProdStatus='StartedUp'   
        GROUP BY   
          prodstatus,   
          size,   
          prodpoolid,   
          batchid,   
          itemid,   
          isdeleted,   
          bthorderid  
      ) AS bo --added isdeleted filter 20/3 hafiz --max(BthOrderId)BthOrderId   
      ON so.customerref = bo.batchid   
      AND bo.size = sl.configuration   
      AND bo.itemid = sl.itemid   
      LEFT JOIN dot_fsbrandlines (nolock) bl ON bl.itemid = bo.itemid   
      AND bl.hartalegacommonsize = bo.size   
      LEFT JOIN dot_fsitemmaster (nolock) im ON im.itemid = bo.itemid   
      AND (  
        im.itemtypecode = 'FG'   
        OR im.itemtypecode = '2FG'  
      )   
      LEFT JOIN(  
        SELECT   
          fgbatchorderno,   
          fp.itemnumber,   
          Sum(casespacked) casespacked,   
          fp.ponumber,   
          Max(packdate) PackDate,   
          fp.size   
        FROM   
          finalpacking (nolock) fp   
        GROUP BY   
          fp.ponumber,   
          fp.size,   
          fp.itemnumber,   
          fp.fgbatchorderno  
      ) fp ON fp.ponumber = sl.salesid   
      AND fp.size = bo.size   
      AND fp.itemnumber = bo.itemid   
      AND fp.fgbatchorderno = bo.bthorderid --and bo.Size=fp.Size    
      --and bo.BthOrderId=fp.FGBatchOrderNo --fix duplicate batchorder   
      --and sl.CONFIGURATION=fp.Size max(FGBatchOrderNo)FGBatchOrderNo   
      LEFT JOIN (  
        SELECT   
          res.batchorderid,   
          lm.locationid,   
          lm.area,   
          Substring(res.resource, 2, 1) locid   
        FROM   
          dot_floord365boresource (nolock) res   
          --JOIN locationmaster lm (nolock) ON lm.locationid = Substring(res.resource, 2, 1)   
    JOIN #tblPlant lm (nolock) ON lm.locationid = Substring(res.resource, 2, 1) -- Pang YS: To Change Location Master Setting for P7 Bug Fix  
        WHERE   
          res.isdeleted = 0   
        GROUP BY   
          res.batchorderid,   
          lm.locationid,   
          lm.area,   
          res.resource  
      ) lm ON lm.batchorderid = bo.bthorderid   
      LEFT JOIN dot_fsbrandheaders bh ON bo.itemid = bh.itemid   
    WHERE   
      lm.area = @phase   
      AND Isnull(  
        CASE WHEN lm.area = @phase THEN (  
          Dateadd(  
            day, -7, so.shippingdateconfirmed  
          )  
        ) END,   
        Dateadd(day, -11, bo.schedend)  
      ) BETWEEN @fromdate   
      AND @todate   
      AND SO.workflowstatus = 1 --APPROVED   
      ) AS mycode2;   
   IF (@isFullPack = 0) BEGIN   
SELECT   
  a.*   
FROM   
  (  
    SELECT   
      Min(  
        CASE WHEN phase = @phase THEN forecast END  
      ) forecast,   
      Max(  
        CASE WHEN phase = @phase THEN schedend END  
      ) SchedEnd,   
      Isnull(  
        Max(  
          CASE WHEN phase = @phase THEN innerboxpercase END  
        ),   
        ''  
      ) innerboxpercase,   
      glovecode,   
      salesid,   
      orderedsize,   
      phase,   
      customerlotid,   
      custref,   
      brand,   
      Isnull(  
        Min(  
          CASE WHEN phase = @phase THEN planstartdate END  
        ),   
        Min(planstartdate)  
      ) planstartdate,   
      Max(  
        CASE WHEN phase = @phase THEN innerboxno END  
      ) Innerboxno,   
      Max(  
        CASE WHEN phase = @phase THEN packingdate END  
      ) packingdate,   
      Max(  
        CASE WHEN phase = @phase THEN fgcode END  
      ) FGCode,   
      Max(  
        CASE WHEN phase = @phase THEN baseqty END  
      ) baseqty,   
      Max(  
        CASE WHEN phase = @phase THEN cetd END  
      ) CETD,   
      Isnull(  
        Max(  
          CASE WHEN phase = @phase THEN packcptlndate END  
        ),   
        ''  
      ) PACKCPTLNDATE,   
      Max(  
        CASE WHEN phase = @phase THEN PackSizeXXSToL END  
      ) PackSizeXXSToL,   
      Max(  
        CASE WHEN phase = @phase THEN PackSizeXLTo3XL END  
      ) PackSizeXLTo3XL,   
      Max(  
        CASE WHEN phase = @phase THEN isso END  
      ) isSO,   
      Max(  
        CASE WHEN phase = @phase THEN orderratioctn END  
      ) OrderRatioCTN,   
      (  
        CASE WHEN phase = @phase   
        AND plant % 2 <> 0 THEN Max(orderratioplanta) ELSE 0 END  
      ) OrderRatioPlantA,   
      (  
        CASE WHEN phase = @phase   
        AND plant % 2 = 0 THEN Max(orderratioplantb) ELSE 0 END  
      ) OrderRatioPlantB,   
      Max(CASE WHEN phase = @phase THEN sor END) SOR,   
      (  
        CASE WHEN phase = @phase   
        AND plant % 2 <> 0 THEN Max(sora) ELSE 0 END  
      ) SORA,   
      (  
        CASE WHEN phase = @phase   
        AND plant % 2 = 0 THEN Max(sorb) ELSE 0 END  
      ) SORB,   
      (  
        CASE WHEN phase = @phase   
        AND plant % 2 <> 0 THEN Min(planstartdatepa) ELSE '' END  
      ) planstartdatePA,   
      (  
        CASE WHEN phase = @phase   
        AND plant % 2 = 0 THEN Min(planstartdatepb) ELSE '' END  
      ) planstartdatePB,   
      (  
        CASE WHEN phase = @phase   
        AND plant % 2 <> 0 THEN Max(packedcarton) ELSE 0 END  
      ) packedcartonPlantA,   
      (  
        CASE WHEN phase = @phase   
        AND plant % 2 = 0 THEN Max(packedcarton) ELSE 0 END  
      ) packedcartonPlantB,   
      (  
        CASE WHEN phase = @phase   
        AND plant % 2 <> 0 THEN Isnull(  
          (  
            Max(orderratioplanta) - Max(packedcarton)  
          ),   
          0  
        ) ELSE 0 END  
      ) balancetopackPlantA,   
      (  
        CASE WHEN phase = @phase   
        AND plant % 2 = 0 THEN Isnull(  
          (  
            Max(orderratioplantb) - Max(packedcarton)  
          ),   
          0  
        ) ELSE 0 END  
      ) balancetopackPlantB,   
      (  
        CASE WHEN phase = @phase   
        AND plant % 2 <> 0 THEN plant ELSE 0 END  
      ) PlantAphaseA,   
      (  
        CASE WHEN phase = @phase   
        AND plant % 2 = 0 THEN plant ELSE 0 END  
      ) PlantAphaseB   
    FROM   
      #temp   
    GROUP BY   
      glovecode,   
      cetd,   
      salesid,   
      orderedsize,   
      plant,   
      phase,   
      customerlotid,   
      custref,   
      packedcarton,   
      brand,   
      schedend  
  ) a --where a.balancetopackPlantA > 0 or a.balancetopackPlantB > 0   
UNION ALL   
SELECT   
  *   
FROM   
  #temp2   
  END ELSE BEGIN   
SELECT   
  --ROW_NUMBER() OVER (PARTITION BY glovecode,salesid Order By CETD ASC) as No,   
  Min(  
    CASE WHEN phase = @phase THEN forecast END  
  ) forecast,   
  Max(  
    CASE WHEN phase = @phase THEN schedend END  
  ) SchedEnd,   
  Max(  
    CASE WHEN phase = @phase THEN innerboxpercase END  
  ) innerboxpercase,   
  glovecode,   
  salesid,   
  orderedsize,   
  phase,   
  customerlotid,   
  custref,   
  brand,   
  Isnull(  
    Min(  
      CASE WHEN phase = @phase THEN planstartdate END  
    ),   
    Min(planstartdate)  
  ) planstartdate,   
  Max(  
    CASE WHEN phase = @phase THEN innerboxno END  
  ) Innerboxno,   
  Max(  
    CASE WHEN phase = @phase THEN packingdate END  
  ) packingdate,   
  Max(  
    CASE WHEN phase = @phase THEN fgcode END  
  ) FGCode,   
  Max(  
    CASE WHEN phase = @phase THEN baseqty END  
  ) baseqty,   
  Max(  
    CASE WHEN phase = @phase THEN cetd END  
  ) CETD,   
  Isnull(  
    Max(  
      CASE WHEN phase = @phase THEN packcptlndate END  
    ),   
    ''  
  ) PACKCPTLNDATE,   
  Max(  
    CASE WHEN phase = @phase THEN PackSizeXXSToL END  
  ) PackSizeXXSToL,   
  Max(  
    CASE WHEN phase = @phase THEN PackSizeXLTo3XL END  
  ) PackSizeXLTo3XL,   
  Max(  
    CASE WHEN phase = @phase THEN isso END  
  ) isSO,   
  Max(  
    CASE WHEN phase = @phase THEN orderratioctn END  
  ) OrderRatioCTN,   
  (  
    CASE WHEN phase = @phase   
    AND plant % 2 <> 0 THEN Max(orderratioplanta) ELSE 0 END  
  ) OrderRatioPlantA,   
  (  
    CASE WHEN phase = @phase   
    AND plant % 2 = 0 THEN Max(orderratioplantb) ELSE 0 END  
  ) OrderRatioPlantB,   
  Max(CASE WHEN phase = @phase THEN sor END) SOR,   
  (  
    CASE WHEN phase = @phase   
    AND plant % 2 <> 0 THEN Max(sora) ELSE 0 END  
  ) SORA,   
  (  
    CASE WHEN phase = @phase   
    AND plant % 2 = 0 THEN Max(sorb) ELSE 0 END  
  ) SORB,   
  (  
    CASE WHEN phase = @phase   
    AND plant % 2 <> 0 THEN Min(planstartdatepa) ELSE '' END  
  ) planstartdatePA,   
  (  
    CASE WHEN phase = @phase   
    AND plant % 2 = 0 THEN Min(planstartdatepb) ELSE '' END  
  ) planstartdatePB,   
  (  
    CASE WHEN phase = @phase   
    AND plant % 2 <> 0 THEN Max(packedcarton) ELSE 0 END  
  ) packedcartonPlantA,   
  (  
    CASE WHEN phase = @phase   
    AND plant % 2 = 0 THEN Max(packedcarton) ELSE 0 END  
  ) packedcartonPlantB,   
  (  
    CASE WHEN phase = @phase   
    AND plant % 2 <> 0 THEN Isnull(  
      (  
        Max(orderratioplanta) - Max(packedcarton)  
      ),   
      0  
    ) ELSE 0 END  
  ) balancetopackPlantA,   
  (  
    CASE WHEN phase = @phase   
    AND plant % 2 = 0 THEN Isnull(  
      (  
        Max(orderratioplantb) - Max(packedcarton)  
      ),   
      0  
    ) ELSE 0 END  
  ) balancetopackPlantB,   
  (  
    CASE WHEN phase = @phase   
    AND plant % 2 <> 0 THEN plant ELSE 0 END  
  ) PlantAphaseA,   
  (  
    CASE WHEN phase = @phase   
    AND plant % 2 = 0 THEN plant ELSE 0 END  
  ) PlantAphaseB --INTO #test_table  
FROM   
  #temp   
  --isnull(min(case when Phase=@phase then planstartdate end),min(planstartdate))planstartdate,   
WHERE   
  phase = @phase   
  AND packcptlndate BETWEEN @fromdate   
  AND @todate   
GROUP BY   
  glovecode,   
  cetd,   
  salesid,   
  orderedsize,   
  plant,   
  phase,   
  customerlotid,   
  custref,   
  packedcarton,   
  brand,   
  schedend   
UNION ALL   
SELECT   
  *   
FROM   
  #temp2  
  END   
DROP   
  TABLE #temp  
DROP   
  TABLE #temp2  
IF OBJECT_ID('tempdb..#tblPlant') IS NOT NULL DROP TABLE #tblPlant  
  
END  
  
--exec [proc_Rpt_FinalPack_Plan] 'z1','2019-01-01','2019-05-30',1  
--exec [proc_Rpt_FinalPack_Plan] 'z1','2019-02-01','2019-05-30',1  
GO
PRINT N'Creating Procedure [dbo].[proc_Rpt_FinalPack_Plan_V1]...';


GO
-- ======================================================================================================    
-- Author		=	  9 Dots
-- Create date	=	  9 Aug 2018
-- Description	=	  Final Pack Plan Report 
-- exec [proc_Rpt_FinalPack_Plan]
--------------------------------------------------------------------------------------------------------

-- Updated By			= 9Dots Hafiz
-- Updated Date			= 5/29/2019
-- Updated Description  = 22/2--Created the query to get the needed value, 26/2--modified the query and add some field

-- Updated By			= Pang YS
-- Updated Date			= 4/12 Nov 2020
-- Updated Description  = salesline sharing same FG and Size. quantity double itrf 20201030035416223040
--						  Shipment Plan Not Sync with FGBO in D365 itrf 20201113030915199194
-- =======================================================================================================    

CREATE PROCEDURE [dbo].[proc_Rpt_FinalPack_Plan_V1]
@phase nvarchar(100),
@fromdate datetime,
@todate datetime,
@isFullPack int

AS
BEGIN
SET NOCOUNT ON

SELECT 
  * INTO #temp
FROM 
  (
    SELECT 
      bo.prodstatus AS ProdStatus, 
      '' forecast, 
      Dateadd(day, -11, bo.schedend) AS SchedEnd, 
      bl.innerboxincaseno AS innerboxpercase, 
      0 AS SOR, 
      0 AS SORA, 
      0 AS SORB, 
      bl.glovesinnerboxno AS Innerboxno, 
      bo.schedstart AS planstartdate, 
      bh.glovecode AS glovecode, 
      bl.basequantity AS baseqty, 
      Isnull(fp.packdate, 0) AS packingdate, 
      so.salesid AS salesid, 
      bo.itemid AS FGCode, 
      im.NAME AS Brand, 
      bo.batchid AS custref, 
      so.shippingdateconfirmed AS CETD, 
      Dateadd(
        day, -11, so.shippingdateconfirmed
      ) AS PACKCPTLNDATE, 

      Isnull(
        (
          SELECT 
            bl.glovesinnerboxno 
          WHERE 
            bo.size IN ('XXS','XS','S','M','L')
        ), 
        0
      ) AS PackSizeXXSToL, 
      Isnull(
        (
          SELECT 
            bl.glovesinnerboxno 
          WHERE 
            bo.size IN ('XL','XXL','XXXL')
        ), 
        0
      ) AS PackSizeXLTo3XL, 
      0 AS isSO, 
      bo.size AS OrderedSize, 
      sl.salesqty AS OrderRatioCTN, 
      (
        CASE WHEN lm.area = @phase 
        AND lm.locationid % 2 <> 0 THEN bo.qtysched ELSE 0 END
      ) OrderRatioPlantA, 
      (
        CASE WHEN lm.area = @phase 
        AND lm.locationid % 2 = 0 THEN bo.qtysched --sl.SalesQty--BO.QTYSCHDLE 
        ELSE 0 END
      ) OrderRatioPlantB, 
      Isnull(
        (
          CASE WHEN lm.area = @phase 
          AND lm.locationid % 2 <> 0 THEN bo.schedstart END
        ), 
        ''
      ) planstartdatePA, 
      Isnull(
        (
          CASE WHEN lm.area = @phase 
          AND lm.locationid % 2 = 0 THEN bo.schedstart END
        ), 
        ''
      ) planstartdatePB, 
      bo.qtysched AS OrderRatioPlant, 
      Isnull(fp.casespacked, 0) AS PackedCarton, 
      sl.salesqty - fp.casespacked AS BalanceToPack, 
      lm.locationid AS plant, 
      lm.area AS Phase, 
      so.dotcustomerlotid AS CustomerLotID 
    FROM 
      dot_floorsales (nolock) so 
      JOIN dot_floorsalesline (nolock) sl ON so.salesid = sl.salesid 
      AND itemtype IN ('FG', 'FG2') 
      AND SL.isdeleted = SO.isdeleted 
      AND SL.isdeleted = 0 --AND configuration <> 'XXL' 
      RIGHT JOIN(
        SELECT 
          prodstatus, 
          isdeleted, 
          size, 
          prodpoolid, 
          batchid, 
          Sum(qtysched) AS QtySched, 
          Min(schedstart) SchedStart, 
          Max(schedend) SchedEnd, 
          bthorderid, 
          itemid 
        FROM 
          dot_floord365bo (nolock) 
        WHERE 
          prodpoolid = 'FG' 
          AND isdeleted = 0 --AND size <> 'XXL' 
          --and size<>'FS'--AND BatchId='MEDU 09/19' --and ProdStatus='StartedUp' 
        GROUP BY 
          prodstatus, 
          size, 
          prodpoolid, 
          batchid, 
          itemid, 
          isdeleted, 
          bthorderid
      ) AS bo --added isdeleted filter 20/3 hafiz --max(BthOrderId)BthOrderId 
      ON so.customerref = bo.batchid 
      AND bo.size = sl.configuration 
      AND bo.itemid = sl.itemid 
      LEFT JOIN dot_fsbrandlines (nolock) bl ON bl.itemid = bo.itemid 
      AND bl.hartalegacommonsize = sl.configuration 
      LEFT JOIN dot_fsitemmaster (nolock) im ON im.itemid = bo.itemid 
      AND (
        im.itemtypecode = 'FG' 
        OR im.itemtypecode = '2FG'
      ) 
      LEFT JOIN(
        SELECT 
          fgbatchorderno, 
          fp.itemnumber, 
          Sum(casespacked) casespacked, 
          fp.ponumber, 
          Max(packdate) PackDate, 
          fp.size 
        FROM 
          finalpacking (nolock) fp 
        GROUP BY 
          fp.ponumber, 
          fp.size, 
          fp.itemnumber, 
          fp.fgbatchorderno
      ) fp ON fp.ponumber = sl.salesid 
      AND fp.size = bo.size 
      AND fp.itemnumber = bo.itemid 
      AND fp.fgbatchorderno = bo.bthorderid --and bo.Size=fp.Size  
      --and bo.BthOrderId=fp.FGBatchOrderNo --fix duplicate batchorder 
      --and sl.CONFIGURATION=fp.Size max(FGBatchOrderNo)FGBatchOrderNo 
      LEFT JOIN (
        SELECT 
          res.batchorderid, 
          lm.locationid, 
          lm.area, 
          Substring(res.resource, 2, 1) locid 
        FROM 
          dot_floord365boresource (nolock) res 
          JOIN locationmaster lm (nolock) ON lm.locationid = Substring(res.resource, 2, 1) 
        WHERE 
          res.isdeleted = 0 
        GROUP BY 
          res.batchorderid, 
          lm.locationid, 
          lm.area, 
          res.resource
      ) lm ON lm.batchorderid = bo.bthorderid 
      LEFT JOIN dot_fsbrandheaders bh ON bo.itemid = bh.itemid 
      AND bh.isdeleted = 0 
    WHERE 
      lm.area = @phase 
      AND Isnull(
        CASE WHEN lm.area = @phase THEN (
          Dateadd(
            day, -11, so.shippingdateconfirmed
          )
        ) END, 
        Dateadd(day, -11, bo.schedend)
      ) BETWEEN @fromdate 
      AND @todate 
      AND SO.workflowstatus = 1 --APPROVED 
      ) AS mycode 
SELECT 
  * INTO #temp2
FROM 
  (
    SELECT 
      (
        Isnull(sl.salesid, bo.bthorderid)
      ) AS forecast, 
      Dateadd(day, -11, bo.schedend) AS SchedEnd, 
      Isnull(bl.innerboxincaseno, 0) AS innerboxpercase, 
      bh.glovecode AS glovecode, 
      Isnull(sl.salesid, '') AS salesid, 
      bo.size AS OrderedSize, 
      lm.area AS Phase, 
      Isnull(so.dotcustomerlotid, '') AS CustomerLotID, 
      bo.batchid AS custref, 
      im.NAME AS Brand, 
      '1900-01-01' AS planstartdate, 
      0 AS Innerboxno, 
      '1900-01-01' AS packingdate, 
      bo.itemid AS FGCode, 
      bl.basequantity AS baseqty, 
      Isnull(
        so.shippingdateconfirmed, bo.schedend
      ) AS CETD, 
      Isnull(
        CASE WHEN lm.area = @phase THEN (
          Dateadd(
            day, -11, so.shippingdateconfirmed
          )
        ) END, 
        Dateadd(day, -11, bo.schedend)
      ) AS PACKCPTLNDATE, 
      --DATEADD(DAY, - 11, so.ShippingDateConfirmed) as PACKCPTLNDATE, 
      Isnull(
        (
          SELECT 
            bl.glovesinnerboxno 
          WHERE 
            bo.size IN ('XXS','XS','S','M','L')
        ), 
        0
      ) AS PackSizeXXSToL, 
      Isnull(
        (
          SELECT 
            bl.glovesinnerboxno 
          WHERE 
            bo.size IN ('XL','XXL','XXXL')
        ), 
        0
      ) AS PackSizeXLTo3XL, 
      1 AS isSO, 
      Isnull(sl.salesqty, bo.qtysched) AS OrderRatioCTN, 
      (
        CASE WHEN lm.area = @phase 
        AND lm.locationid % 2 <> 0 THEN bo.qtysched ELSE 0 END
      ) OrderRatioPlantA, 
      (
        CASE WHEN lm.area = @phase 
        AND lm.locationid % 2 = 0 THEN bo.qtysched --sl.SalesQty--BO.QTYSCHDLE 
        ELSE 0 END
      ) OrderRatioPlantB, 
      Isnull(sl.salesqty, bo.qtysched) AS SOR, 
      (
        CASE WHEN lm.area = @phase 
        --AND lm.locationid % 2 <> 0 THEN bo.qtysched ELSE 0 END
		--AND lm.locationid % 2 <> 0 THEN Isnull(sl.salesqty, bo.qtysched) ELSE 0 END -- Pang: 4 Nov 2020
		AND lm.locationid % 2 <> 0 THEN CASE WHEN bo.QtySched > sl.SalesQty THEN sl.SalesQty ELSE bo.qtysched END -- Pang: 12 Nov 2020
		ELSE 0 END
      ) SORA, 
      (
        CASE WHEN lm.area = @phase 
        --AND lm.locationid % 2 = 0 THEN bo.qtysched --sl.SalesQty--BO.QTYSCHDLE 
		--AND lm.locationid % 2 = 0 THEN Isnull(sl.salesqty, bo.qtysched) -- Pang: 4 Nov 2020
		AND lm.locationid % 2 = 0 THEN CASE WHEN bo.QtySched > sl.SalesQty THEN sl.SalesQty ELSE bo.qtysched END -- Pang: 12 Nov 2020
        ELSE 0 END
      ) SORB, 
      Isnull(
        (
          CASE WHEN lm.area = @phase 
          AND lm.locationid % 2 <> 0 THEN bo.schedstart END
        ), 
        ''
      ) planstartdatePA, 
      Isnull(
        (
          CASE WHEN lm.area = @phase 
          AND lm.locationid % 2 = 0 THEN bo.schedstart END
        ), 
        ''
      ) planstartdatePB, 
      0 AS packedcartonPlantA, 
      0 AS packedcartonPlantB, 
      0 AS balancetopackPlantA, 
      0 AS balancetopackPlantB, 
      (
        CASE WHEN lm.area = @phase 
        AND lm.locationid % 2 <> 0 THEN lm.locationid ELSE 0 END
      ) PlantAphaseA, 
      (
        CASE WHEN lm.area = @phase 
        AND lm.locationid % 2 = 0 THEN lm.locationid ELSE 0 END
      ) PlantAphaseB 
    FROM 
      dot_floorsales (nolock) so 
      JOIN dot_floorsalesline (nolock) sl ON so.salesid = sl.salesid 
      AND itemtype IN ('FG', 'FG2') 
      AND SL.isdeleted = SO.isdeleted 
      AND SL.isdeleted = 0 --AND configuration <> 'XXL' 
      RIGHT JOIN(
        SELECT 
          prodstatus, 
          isdeleted, 
          size, 
          prodpoolid, 
          batchid, 
          Sum(qtysched) AS QtySched, 
          Min(schedstart) SchedStart, 
          Max(schedend) SchedEnd, 
          bthorderid, 
          itemid 
        FROM 
          dot_floord365bo (nolock) 
        WHERE 
          prodpoolid = 'FG' 
          AND isdeleted = 0 --AND size <> 'XXL' 
          AND size <> 'FS' --AND BatchId='MEDU 09/19' --and ProdStatus='StartedUp' 
        GROUP BY 
          prodstatus, 
          size, 
          prodpoolid, 
          batchid, 
          itemid, 
          isdeleted, 
          bthorderid
      ) AS bo --added isdeleted filter 20/3 hafiz --max(BthOrderId)BthOrderId 
      ON so.customerref = bo.batchid 
      AND bo.size = sl.configuration 
      AND bo.itemid = sl.itemid 
      LEFT JOIN dot_fsbrandlines (nolock) bl ON bl.itemid = bo.itemid 
      AND bl.hartalegacommonsize = bo.size 
      LEFT JOIN dot_fsitemmaster (nolock) im ON im.itemid = bo.itemid 
      AND (
        im.itemtypecode = 'FG' 
        OR im.itemtypecode = '2FG'
      ) 
      LEFT JOIN(
        SELECT 
          fgbatchorderno, 
          fp.itemnumber, 
          Sum(casespacked) casespacked, 
          fp.ponumber, 
          Max(packdate) PackDate, 
          fp.size 
        FROM 
          finalpacking (nolock) fp 
        GROUP BY 
          fp.ponumber, 
          fp.size, 
          fp.itemnumber, 
          fp.fgbatchorderno
      ) fp ON fp.ponumber = sl.salesid 
      AND fp.size = bo.size 
      AND fp.itemnumber = bo.itemid 
      AND fp.fgbatchorderno = bo.bthorderid --and bo.Size=fp.Size  
      --and bo.BthOrderId=fp.FGBatchOrderNo --fix duplicate batchorder 
      --and sl.CONFIGURATION=fp.Size max(FGBatchOrderNo)FGBatchOrderNo 
      LEFT JOIN (
        SELECT 
          res.batchorderid, 
          lm.locationid, 
          lm.area, 
          Substring(res.resource, 2, 1) locid 
        FROM 
          dot_floord365boresource (nolock) res 
          JOIN locationmaster lm (nolock) ON lm.locationid = Substring(res.resource, 2, 1) 
        WHERE 
          res.isdeleted = 0 
        GROUP BY 
          res.batchorderid, 
          lm.locationid, 
          lm.area, 
          res.resource
      ) lm ON lm.batchorderid = bo.bthorderid 
      LEFT JOIN dot_fsbrandheaders bh ON bo.itemid = bh.itemid 
    WHERE 
      lm.area = @phase 
      AND Isnull(
        CASE WHEN lm.area = @phase THEN (
          Dateadd(
            day, -11, so.shippingdateconfirmed
          )
        ) END, 
        Dateadd(day, -11, bo.schedend)
      ) BETWEEN @fromdate 
      AND @todate 
      AND SO.workflowstatus = 1 --APPROVED 
      ) AS mycode2; 
	  IF (@isFullPack = 0) BEGIN 
SELECT 
  a.* 
FROM 
  (
    SELECT 
      Min(
        CASE WHEN phase = @phase THEN forecast END
      ) forecast, 
      Max(
        CASE WHEN phase = @phase THEN schedend END
      ) SchedEnd, 
      Isnull(
        Max(
          CASE WHEN phase = @phase THEN innerboxpercase END
        ), 
        ''
      ) innerboxpercase, 
      glovecode, 
      salesid, 
      orderedsize, 
      phase, 
      customerlotid, 
      custref, 
      brand, 
      Isnull(
        Min(
          CASE WHEN phase = @phase THEN planstartdate END
        ), 
        Min(planstartdate)
      ) planstartdate, 
      Max(
        CASE WHEN phase = @phase THEN innerboxno END
      ) Innerboxno, 
      Max(
        CASE WHEN phase = @phase THEN packingdate END
      ) packingdate, 
      Max(
        CASE WHEN phase = @phase THEN fgcode END
      ) FGCode, 
      Max(
        CASE WHEN phase = @phase THEN baseqty END
      ) baseqty, 
      Max(
        CASE WHEN phase = @phase THEN cetd END
      ) CETD, 
      Isnull(
        Max(
          CASE WHEN phase = @phase THEN packcptlndate END
        ), 
        ''
      ) PACKCPTLNDATE, 
      Max(
        CASE WHEN phase = @phase THEN PackSizeXXSToL END
      ) PackSizeXXSToL, 
      Max(
        CASE WHEN phase = @phase THEN PackSizeXLTo3XL END
      ) PackSizeXLTo3XL, 
      Max(
        CASE WHEN phase = @phase THEN isso END
      ) isSO, 
      Max(
        CASE WHEN phase = @phase THEN orderratioctn END
      ) OrderRatioCTN, 
      (
        CASE WHEN phase = @phase 
        AND plant % 2 <> 0 THEN Max(orderratioplanta) ELSE 0 END
      ) OrderRatioPlantA, 
      (
        CASE WHEN phase = @phase 
        AND plant % 2 = 0 THEN Max(orderratioplantb) ELSE 0 END
      ) OrderRatioPlantB, 
      Max(CASE WHEN phase = @phase THEN sor END) SOR, 
      (
        CASE WHEN phase = @phase 
        AND plant % 2 <> 0 THEN Max(sora) ELSE 0 END
      ) SORA, 
      (
        CASE WHEN phase = @phase 
        AND plant % 2 = 0 THEN Max(sorb) ELSE 0 END
      ) SORB, 
      (
        CASE WHEN phase = @phase 
        AND plant % 2 <> 0 THEN Min(planstartdatepa) ELSE '' END
      ) planstartdatePA, 
      (
        CASE WHEN phase = @phase 
        AND plant % 2 = 0 THEN Min(planstartdatepb) ELSE '' END
      ) planstartdatePB, 
      (
        CASE WHEN phase = @phase 
        AND plant % 2 <> 0 THEN Max(packedcarton) ELSE 0 END
      ) packedcartonPlantA, 
      (
        CASE WHEN phase = @phase 
        AND plant % 2 = 0 THEN Max(packedcarton) ELSE 0 END
      ) packedcartonPlantB, 
      (
        CASE WHEN phase = @phase 
        AND plant % 2 <> 0 THEN Isnull(
          (
            Max(orderratioplanta) - Max(packedcarton)
          ), 
          0
        ) ELSE 0 END
      ) balancetopackPlantA, 
      (
        CASE WHEN phase = @phase 
        AND plant % 2 = 0 THEN Isnull(
          (
            Max(orderratioplantb) - Max(packedcarton)
          ), 
          0
        ) ELSE 0 END
      ) balancetopackPlantB, 
      (
        CASE WHEN phase = @phase 
        AND plant % 2 <> 0 THEN plant ELSE 0 END
      ) PlantAphaseA, 
      (
        CASE WHEN phase = @phase 
        AND plant % 2 = 0 THEN plant ELSE 0 END
      ) PlantAphaseB 
    FROM 
      #temp 
    GROUP BY 
      glovecode, 
      cetd, 
      salesid, 
      orderedsize, 
      plant, 
      phase, 
      customerlotid, 
      custref, 
      packedcarton, 
      brand, 
      schedend
  ) a --where a.balancetopackPlantA > 0 or a.balancetopackPlantB > 0 
UNION ALL 
SELECT 
  * 
FROM 
  #temp2 
  END ELSE BEGIN 
SELECT 
  --ROW_NUMBER() OVER (PARTITION BY glovecode,salesid Order By CETD ASC) as No, 
  Min(
    CASE WHEN phase = @phase THEN forecast END
  ) forecast, 
  Max(
    CASE WHEN phase = @phase THEN schedend END
  ) SchedEnd, 
  Max(
    CASE WHEN phase = @phase THEN innerboxpercase END
  ) innerboxpercase, 
  glovecode, 
  salesid, 
  orderedsize, 
  phase, 
  customerlotid, 
  custref, 
  brand, 
  Isnull(
    Min(
      CASE WHEN phase = @phase THEN planstartdate END
    ), 
    Min(planstartdate)
  ) planstartdate, 
  Max(
    CASE WHEN phase = @phase THEN innerboxno END
  ) Innerboxno, 
  Max(
    CASE WHEN phase = @phase THEN packingdate END
  ) packingdate, 
  Max(
    CASE WHEN phase = @phase THEN fgcode END
  ) FGCode, 
  Max(
    CASE WHEN phase = @phase THEN baseqty END
  ) baseqty, 
  Max(
    CASE WHEN phase = @phase THEN cetd END
  ) CETD, 
  Isnull(
    Max(
      CASE WHEN phase = @phase THEN packcptlndate END
    ), 
    ''
  ) PACKCPTLNDATE, 
  Max(
    CASE WHEN phase = @phase THEN PackSizeXXSToL END
  ) PackSizeXXSToL, 
  Max(
    CASE WHEN phase = @phase THEN PackSizeXLTo3XL END
  ) PackSizeXLTo3XL, 
  Max(
    CASE WHEN phase = @phase THEN isso END
  ) isSO, 
  Max(
    CASE WHEN phase = @phase THEN orderratioctn END
  ) OrderRatioCTN, 
  (
    CASE WHEN phase = @phase 
    AND plant % 2 <> 0 THEN Max(orderratioplanta) ELSE 0 END
  ) OrderRatioPlantA, 
  (
    CASE WHEN phase = @phase 
    AND plant % 2 = 0 THEN Max(orderratioplantb) ELSE 0 END
  ) OrderRatioPlantB, 
  Max(CASE WHEN phase = @phase THEN sor END) SOR, 
  (
    CASE WHEN phase = @phase 
    AND plant % 2 <> 0 THEN Max(sora) ELSE 0 END
  ) SORA, 
  (
    CASE WHEN phase = @phase 
    AND plant % 2 = 0 THEN Max(sorb) ELSE 0 END
  ) SORB, 
  (
    CASE WHEN phase = @phase 
    AND plant % 2 <> 0 THEN Min(planstartdatepa) ELSE '' END
  ) planstartdatePA, 
  (
    CASE WHEN phase = @phase 
    AND plant % 2 = 0 THEN Min(planstartdatepb) ELSE '' END
  ) planstartdatePB, 
  (
    CASE WHEN phase = @phase 
    AND plant % 2 <> 0 THEN Max(packedcarton) ELSE 0 END
  ) packedcartonPlantA, 
  (
    CASE WHEN phase = @phase 
    AND plant % 2 = 0 THEN Max(packedcarton) ELSE 0 END
  ) packedcartonPlantB, 
  (
    CASE WHEN phase = @phase 
    AND plant % 2 <> 0 THEN Isnull(
      (
        Max(orderratioplanta) - Max(packedcarton)
      ), 
      0
    ) ELSE 0 END
  ) balancetopackPlantA, 
  (
    CASE WHEN phase = @phase 
    AND plant % 2 = 0 THEN Isnull(
      (
        Max(orderratioplantb) - Max(packedcarton)
      ), 
      0
    ) ELSE 0 END
  ) balancetopackPlantB, 
  (
    CASE WHEN phase = @phase 
    AND plant % 2 <> 0 THEN plant ELSE 0 END
  ) PlantAphaseA, 
  (
    CASE WHEN phase = @phase 
    AND plant % 2 = 0 THEN plant ELSE 0 END
  ) PlantAphaseB --INTO #test_table
FROM 
  #temp 
  --isnull(min(case when Phase=@phase then planstartdate end),min(planstartdate))planstartdate, 
WHERE 
  phase = @phase 
  AND packcptlndate BETWEEN @fromdate 
  AND @todate 
GROUP BY 
  glovecode, 
  cetd, 
  salesid, 
  orderedsize, 
  plant, 
  phase, 
  customerlotid, 
  custref, 
  packedcarton, 
  brand, 
  schedend 
UNION ALL 
SELECT 
  * 
FROM 
  #temp2
  END 
DROP 
  TABLE #temp
DROP 
  TABLE #temp2

END

--exec [proc_Rpt_FinalPack_Plan] 'z1','2019-01-01','2019-05-30',1
--exec [proc_Rpt_FinalPack_Plan] 'z1','2019-02-01','2019-05-30',1
GO
PRINT N'Creating Procedure [dbo].[proc_Rpt_SurgicalFinalPack_Plan]...';


GO
-- ======================================================================================================      
-- Author  =   9 Dots  
-- Create date =   9 Aug 2018  
-- Description =   Final Pack Plan Report for Surgical (Modified from Final Pack Plan Report)
-- exec [proc_Rpt_FinalPack_Plan]  
--------------------------------------------------------------------------------------------------------  
-- Updated By   = 9Dots Hafiz  
-- Updated Date   = 5/29/2019  
-- Updated Description  = 22/2--Created the query to get the needed value, 26/2--modified the query and add some field  
-- =======================================================================================================      
/****** Object:  StoredProcedure [dbo].[proc_Rpt_SurgicalFinalPack_Plan]    Script Date: 3/6/2019 6:57:45 PM ******/    
--exec [proc_Rpt_SurgicalFinalPack_Plan] 'z4','2021-01-01','2021-12-31',1

CREATE PROCEDURE [dbo].[proc_Rpt_SurgicalFinalPack_Plan]  
@phase nvarchar(100),
@fromdate datetime,
@todate datetime,
@isFullPack int
  
AS  
BEGIN  
SET NOCOUNT ON  

IF (@phase = 'Z4')
BEGIN
	SET @phase = 'Z1'
END
  
select * into #temp from(  
select  
bo.ProdStatus as ProdStatus,  
''forecast,  
DATEADD(DAY, - 11, bo.SchedEnd) as SchedEnd,  
bl.InnerboxinCaseNo as innerboxpercase,  
0 as SOR,0 as SORA,0 as SORB,  
bl.GlovesInnerboxNo as Innerboxno,  
bo.SchedStart as planstartdate,   
bh.GloveCode as glovecode,  
bl.BaseQuantity as baseqty,  
isnull(fp.PackDate,0) as packingdate,  
so.SalesId as salesid,  
bo.ItemId as FGCode,  
im.Name as Brand,  
bo.BatchId as custref,  
so.ShippingDateConfirmed as CETD,  
DATEADD(DAY, - 11, so.ShippingDateConfirmed) as PACKCPTLNDATE,  
ISNULL((  
select  
    bl.GlovesInnerboxNo   
where  
    bo.Size in ('5½','6','6½','7','7½','8','8½','9')), 0) as PackSize5To9,
0 as isSO,  
bo.Size as OrderedSize,  
sl.SalesQty/2 as OrderRatioCTN,  
(case when lm.Area=@phase and lm.LocationId%2<>0 then   
bo.QtySched  
else 0 end) OrderRatioPlantA,  
(case when lm.Area=@phase and lm.LocationId%2=0 then   
bo.QtySched--sl.SalesQty--BO.QTYSCHDLE  
else 0 end) OrderRatioPlantB,  
ISNULL((case when lm.Area=@phase and lm.LocationId%2<>0 then   
bo.SchedStart  
 end),'')planstartdatePA,  
ISNULL((case when lm.Area=@phase and lm.LocationId%2=0 then   
bo.SchedStart  
end),'')planstartdatePB,  
bo.QtySched as OrderRatioPlant,  
isnull(fp.CasesPacked,0) as PackedCarton,  
(sl.SalesQty/2) - fp.CasesPacked as BalanceToPack,  
lm.LocationId as plant,  
lm.Area as Phase,   
so.DOTCustomerLotID as CustomerLotID  
  
from DOT_FloorSales (nolock) so  
  
join DOT_FloorSalesLine (nolock) sl  
on so.SalesId=sl.SalesId and ITEMTYPE in ('Surgical')  AND SL.IsDeleted=SO.IsDeleted AND SL.IsDeleted=0  
  
right join(select ProdStatus,IsDeleted,Size,ProdPoolId,BatchId,sum(QtySched)as QtySched,min(SchedStart)SchedStart,max(SchedEnd)SchedEnd,BthOrderId,ItemId 
from DOT_FloorD365BO (nolock)  
where  ProdPoolId in ('FG') and IsDeleted=0 --and size<>'FS'--AND BatchId='MEDU 09/19' --and ProdStatus='StartedUp'  
group by ProdStatus,Size,ProdPoolId,BatchId,ItemId,IsDeleted,BthOrderId)as bo --added isdeleted filter 20/3 hafiz --max(BthOrderId)BthOrderId  
on so.CustomerRef =bo.BatchId  
and bo.size = sl.customersize  
and bo.ItemId=sl.ItemId  
  
left join DOT_FSBrandLines (nolock) bl  
on bl.ItemId=bo.ItemId and bl.CustomerSize = sl.HartalegaCommonSize   
  
left join DOT_FSItemMaster (nolock) im   
on im.ItemId = bo.ItemId  and (im.ItemTypeCode='Surgical')  
  
left join(select FGBatchOrderNo,fp.ItemNumber,sum(CasesPacked)casespacked,fp.PONumber,max(PackDate)PackDate,fp.Size from FinalPacking (nolock) fp  
group by fp.PONumber,fp.Size,fp.ItemNumber,fp.FGBatchOrderNo)fp  
on fp.PONumber=sl.SalesId and fp.Size=sl.HartalegaCommonSize and fp.ItemNumber=bo.ItemId and fp.FGBatchOrderNo=bo.BthOrderId  
  
left join (select res.BatchOrderId,lm.LocationId,lm.Area,substring(res.Resource,2,1)locid   
from DOT_FloorD365BOResource (nolock) res  
join  LocationMaster lm (nolock)  
on lm.LocationId=substring(res.Resource,2,1)  
where res.isdeleted=0  
group by res.BatchOrderId,lm.LocationId,lm.Area,res.Resource)lm  
on lm.BatchOrderId=bo.BthOrderId   
  
left join DOT_FSBrandHeaders bh  
on bo.ItemId=bh.ItemId and bh.IsDeleted=0  
where 
lm.area = @phase and lm.LocationId >= 7
and isnull(case when lm.Area=@phase then (DATEADD(DAY, - 11, so.ShippingDateConfirmed)) end, DATEADD(DAY, - 11, bo.SchedEnd)) between @fromdate and @todate  
 and SO.WorkflowStatus=1 --APPROVED  
)as mycode  
  
select * into #temp2 from(  
select  distinct
  
(isnull(sl.SalesId,bo.BthOrderId))as forecast,DATEADD(DAY, - 11, bo.SchedEnd) as SchedEnd,isnull(bl.InnerboxinCaseNo,0) as innerboxpercase,bh.GloveCode as glovecode,isnull(sl.SalesId,'') as salesid,bo.size as OrderedSize,lm.Area as Phase,isnull(so.DOTCustomerLotID,'') as CustomerLotID,bo.BatchId as custref,  
im.Name as Brand,'1900-01-01' as planstartdate,0 as Innerboxno,'1900-01-01' as packingdate,bo.ItemId as FGCode,  
bl.BaseQuantity as baseqty,isnull(so.ShippingDateConfirmed,bo.SchedEnd) as CETD,  
isnull(case when lm.Area=@phase then (DATEADD(DAY, - 11, so.ShippingDateConfirmed)) end, DATEADD(DAY, - 11, bo.SchedEnd))as PACKCPTLNDATE,  
ISNULL((  
select  
    bl.GlovesInnerboxNo   
where  
    bo.Size in ('5½','6','6½','7','7½','8','8½','9')), 0) as PackSize5To9,1 as isSO,isnull((sl.SalesQty/2),bo.QtySched) as OrderRatioCTN,  
(case when lm.Area=@phase and lm.LocationId%2<>0 then   
bo.QtySched  
else 0 end) OrderRatioPlantA,  
(case when lm.Area=@phase and lm.LocationId%2=0 then   
bo.QtySched--sl.SalesQty--BO.QTYSCHDLE  
else 0 end) OrderRatioPlantB,  
isnull((sl.SalesQty/2),bo.QtySched) as SOR,(case when lm.Area=@phase and lm.LocationId%2<>0 then   
bo.QtySched  
else 0 end) SORA,  
(case when lm.Area=@phase and lm.LocationId%2=0 then   
bo.QtySched--sl.SalesQty--BO.QTYSCHDLE  
else 0 end) SORB,   
ISNULL((case when lm.Area=@phase and lm.LocationId%2<>0 then   
bo.SchedStart  
 end),'')planstartdatePA,  
ISNULL((case when lm.Area=@phase and lm.LocationId%2=0 then   
bo.SchedStart  
end),'')planstartdatePB,0 as packedcartonPlantA,0 as packedcartonPlantB,0 as balancetopackPlantA,0 as balancetopackPlantB,  
(case when lm.Area=@phase and lm.LocationId%2<>0 then lm.LocationId   
else 0 end)PlantAphaseA,  
         
(case when lm.Area=@phase and lm.LocationId%2=0 then lm.LocationId   
else 0 end)PlantAphaseB  
   
  
from DOT_FloorSales (nolock) so  
  
join DOT_FloorSalesLine (nolock) sl  
on so.SalesId=sl.SalesId and ITEMTYPE in ('Surgical') AND SL.IsDeleted=SO.IsDeleted AND SL.IsDeleted=0 
  
right join(select ProdStatus,IsDeleted,Size,ProdPoolId,BatchId,sum(QtySched)as QtySched,min(SchedStart)SchedStart,max(SchedEnd)SchedEnd,BthOrderId,ItemId from DOT_FloorD365BO (nolock)  
where ProdPoolId in ('FG') and IsDeleted=0 --AND Size<>'FS'--AND BatchId='MEDU 09/19' --and ProdStatus='StartedUp'  
group by ProdStatus,Size,ProdPoolId,BatchId,ItemId,IsDeleted,BthOrderId)as bo --added isdeleted filter 20/3 hafiz --max(BthOrderId)BthOrderId  
on so.CustomerRef =bo.BatchId   
and bo.size = sl.customersize  
and bo.ItemId=sl.ItemId  
  
left join DOT_FSBrandLines (nolock) bl  
on bl.ItemId=bo.ItemId and bl.CustomerSize = bo.Size  
  
left join DOT_FSItemMaster (nolock) im   
on im.ItemId = bo.ItemId  and (im.ItemTypeCode='Surgical')  
  
left join(select FGBatchOrderNo,fp.ItemNumber,sum(CasesPacked)casespacked,fp.PONumber,max(PackDate)PackDate,fp.Size from FinalPacking (nolock) fp  
group by fp.PONumber,fp.Size,fp.ItemNumber,fp.FGBatchOrderNo)fp  
on fp.PONumber=sl.SalesId and fp.Size=sl.HartalegaCommonSize and fp.ItemNumber=bo.ItemId and fp.FGBatchOrderNo=bo.BthOrderId  
  
left join (select res.BatchOrderId,lm.LocationId,lm.Area,substring(res.Resource,2,1)locid   
from DOT_FloorD365BOResource (nolock) res  
join  LocationMaster lm (nolock)  
on lm.LocationId=substring(res.Resource,2,1)  
where res.isdeleted=0  
group by res.BatchOrderId,lm.LocationId,lm.Area,res.Resource)lm  
on lm.BatchOrderId=bo.BthOrderId   
  
left join DOT_FSBrandHeaders bh  
on bo.ItemId=bh.ItemId  
  
where lm.area= @phase and lm.LocationId >= 7
and isnull(case when lm.Area=@phase then (DATEADD(DAY, - 11, so.ShippingDateConfirmed)) end, DATEADD(DAY, - 11, bo.SchedEnd)) between @fromdate and @todate  
 and SO.WorkflowStatus=1  --APPROVED  
) as mycode2  
  
IF (@isFullPack = 0 )  
BEGIN  
         
select a.* from (  
SELECT  
  
min(case when Phase=@phase then forecast end)forecast,  
MAX(case when Phase=@phase then SchedEnd end)SchedEnd,  
isnull(MAX(case when Phase=@phase then innerboxpercase end),'')innerboxpercase,  
glovecode,salesid,OrderedSize,Phase,CustomerLotID,custref,Brand,  
isnull(min(case when Phase=@phase then planstartdate end),min(planstartdate))planstartdate,  
MAX(case when Phase=@phase then Innerboxno end)Innerboxno,  
MAX(case when Phase=@phase then packingdate end)packingdate,  
MAX(case when Phase=@phase then FGCode end)FGCode,  
MAX(case when Phase=@phase then baseqty end)baseqty,  
MAX(case when Phase=@phase then CETD end)CETD,  
isnull(MAX(case when Phase=@phase then PACKCPTLNDATE end),'')PACKCPTLNDATE,  
MAX(case when Phase=@phase then PackSize5To9 end)PackSize5To9,  
MAX(case when Phase=@phase then isSO end)isSO,  
MAX(case when Phase=@phase then OrderRatioCTN end)OrderRatioCTN,  
  
(case when Phase=@phase and plant%2<>0 then   
MAX(OrderRatioPlantA)  
else 0 end)OrderRatioPlantA,  
  
(case when Phase=@phase and plant%2=0 then   
max(OrderRatioPlantB)  
else 0 end)OrderRatioPlantB,  
  
MAX(case when Phase=@phase then SOR end)SOR,  
  
(case when Phase=@phase and plant%2<>0 then   
MAX(SORA)  
else 0 end)SORA,  
  
(case when Phase=@phase and plant%2=0 then   
max(SORB)  
else 0 end)SORB,  
  
(case when Phase=@phase and plant%2<>0 then   
min(planstartdatePA)  
else '' end )planstartdatePA,  
(case when Phase=@phase and plant%2=0 then   
min(planstartdatePB)  
else '' end)planstartdatePB,  
  
(case when Phase=@phase and plant%2<>0 then   
max(PackedCarton)  
else 0 end)packedcartonPlantA,  
  
(case when Phase=@phase and plant%2=0 then   
max(PackedCarton)  
else 0 end)packedcartonPlantB,  
         
(case when Phase=@phase and plant%2<>0   
then isnull((max(OrderRatioPlantA)-max(PackedCarton)),0)   
else 0 end)balancetopackPlantA,  
  
(case when Phase=@phase and plant%2=0   
then isnull((max(OrderRatioPlantB)-max(PackedCarton)),0)   
else 0 end)balancetopackPlantB,  
  
(case when Phase=@phase and plant%2<>0 then plant   
else 0 end)PlantAphaseA,  
         
(case when Phase=@phase and plant%2=0 then plant   
else 0 end)PlantAphaseB  
  
from #temp  
  
group by glovecode,CETD,salesid,OrderedSize,plant,Phase,CustomerLotID,custref,PackedCarton,Brand,SchedEnd)a  
  
union all  
  
select * from #temp2  
  
  
END  
  ELSE  
  BEGIN  
select  
min(case when Phase=@phase then forecast end)forecast,  
MAX(case when Phase=@phase then SchedEnd end)SchedEnd,  
MAX(case when Phase=@phase then innerboxpercase end)innerboxpercase,  
glovecode,salesid,OrderedSize,Phase,CustomerLotID,custref,Brand,  
isnull(min(case when Phase=@phase then planstartdate end),min(planstartdate))planstartdate,  
MAX(case when Phase=@phase then Innerboxno end)Innerboxno,  
MAX(case when Phase=@phase then packingdate end)packingdate,  
MAX(case when Phase=@phase then FGCode end)FGCode,  
MAX(case when Phase=@phase then baseqty end)baseqty,  
MAX(case when Phase=@phase then CETD end)CETD,  
isnull(MAX(case when Phase=@phase then PACKCPTLNDATE end),'')PACKCPTLNDATE,  
MAX(case when Phase=@phase then PackSize5To9 end)PackSize5To9,  
MAX(case when Phase=@phase then isSO end)isSO,  
MAX(case when Phase=@phase then OrderRatioCTN end)OrderRatioCTN,  
  
(case when Phase=@phase and plant%2<>0 then   
MAX(OrderRatioPlantA)  
else 0 end)OrderRatioPlantA,  
  
(case when Phase=@phase and plant%2=0 then   
max(OrderRatioPlantB)  
else 0 end)OrderRatioPlantB,  
  
MAX(case when Phase=@phase then SOR end)SOR,  
  
(case when Phase=@phase and plant%2<>0 then   
MAX(SORA)  
else 0 end)SORA,  
  
(case when Phase=@phase and plant%2=0 then   
max(SORB)  
else 0 end)SORB,  
  
(case when Phase=@phase and plant%2<>0 then   
min(planstartdatePA)  
else '' end )planstartdatePA,  
(case when Phase=@phase and plant%2=0 then   
min(planstartdatePB)  
else '' end)planstartdatePB,  
  
(case when Phase=@phase and plant%2<>0 then   
max(PackedCarton)  
else 0 end)packedcartonPlantA,  
  
(case when Phase=@phase and plant%2=0 then   
max(PackedCarton)  
else 0 end)packedcartonPlantB,  
         
(case when Phase=@phase and plant%2<>0   
then isnull((max(OrderRatioPlantA)-max(PackedCarton)),0)   
else 0 end)balancetopackPlantA,  
  
(case when Phase=@phase and plant%2=0   
then isnull((max(OrderRatioPlantB)-max(PackedCarton)),0)   
else 0 end)balancetopackPlantB,  
  
(case when Phase=@phase and plant%2<>0 then plant   
else 0 end)PlantAphaseA,  
         
(case when Phase=@phase and plant%2=0 then plant   
else 0 end)PlantAphaseB  
  
from #temp  
where Phase= @phase and PACKCPTLNDATE between @fromdate and @todate
  
group by glovecode,CETD,salesid,OrderedSize,plant,Phase,CustomerLotID,custref,PackedCarton,Brand,SchedEnd  
  
union all  
  
select * from #temp2
  
  END  
END
GO
PRINT N'Creating Procedure [dbo].[USP_D365_GETFPStagingRecord]...';


GO
CREATE PROCEDURE [dbo].[USP_D365_GETFPStagingRecord]  
 @NumberOfRecords int  
AS  
BEGIN  
   
 --DECLARE @NumberOfRecords int = 75  
  
 DECLARE @isSuccess int = 3  
 DECLARE @isOnHold int = 5  
 DECLARE @FunctionIdentifier varchar(100) = 'SBC,SMBP,SGBC'  

 SELECT top 75 * 
  FROM DOT_FloorAxIntParentTable (NOLOCK)  
  WHERE IsDeleted <> 1 and ProcessingStatus=5 and FunctionIdentifier IN (SELECT Item FROM dbo.SplitString(@FunctionIdentifier, ',')) 
  order by LastModificationTime
End
GO
PRINT N'Creating Procedure [dbo].[usp_D365_ValidateHotbox180dV2]...';


GO

-- =============================================
-- Author:		<Azman Kasim>
-- Create date: <28/03/2019>
-- Description:	<Description,,>
-- =============================================
-- exec [dbo].[usp_AX4_ValidateHotbox180d] 'SO040086','FG-P002-004','M'
CREATE PROCEDURE [dbo].[usp_D365_ValidateHotbox180dV2]
	-- Add the parameters for the stored procedure here
	@PONumber nvarchar(15),
	@ItemId nvarchar(50),
	@POSize nvarchar(15)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @QAI int

	SET @QAI = Convert(INT,Replace((Select Item from dbo.SplitString((SELECT Item FROM dbo.SplitString((select FloorConfData from SystemConfData WITH (NOLOCK)),',') where Item like '%intQaiExpiryDuration%'),':') where Item  not like '%intQaiExpiryDuration%'),'"',''))

	--DECLARE @PONumber nvarchar(15) = 'SO040027'
	--DECLARE @POSize nvarchar(15) = 'S'
	--DECLARE @ItemId nvarchar(50) = 'FG-A001-001'

	DECLARE @FailedChk int = 0

	DECLARE @tbl TABLE
	(
		SerialNo numeric(15)
	)

	DECLARE @tbl2 TABLE
	(
		SerialNo numeric(15),
		HbxStatus int,
		SerialAging int
	)

	INSERT INTO @tbl
	SELECT DISTINCT FPBI.SerialNumber
	  FROM [dbo].[FinalPacking] FP WITH (NOLOCK)
	  INNER JOIN FinalPackingBatchInfo FPBI WITH (NOLOCK) On FP.InternalLotNumber = FPBI.InternalLotNumber 
	  where FP.PONumber = @PONumber
	  AND FP.Size = @POSize
	  AND FP.ItemNumber = @ItemId

	INSERT INTO @tbl2
	SELECT  c.SerialNo, p.[HotboxStatus], DATEDIFF(DAY, p.CreatedDate, GETDATE())
	FROM    @tbl c INNER JOIN
			(
				SELECT  SerialNumber,
						MAX(CreatedDate) MaxDate
				FROM    HBXStatus WITH (NOLOCK)
				GROUP BY SerialNumber
			) MaxDates ON c.SerialNo = MaxDates.SerialNumber INNER JOIN
			HBXStatus p WITH (NOLOCK) ON MaxDates.SerialNumber = p.SerialNumber
						AND MaxDates.MaxDate = p.CreatedDate

	SELECT @FailedChk = COUNT(*) FROM @tbl2 WHERE SerialAging > @QAI 

	SELECT @FailedChk as [FailedCheck]

END
GO
PRINT N'Creating Procedure [dbo].[usp_D365_ValidateHotboxV2]...';


GO

-- =============================================
-- Author:		<Azman Kasim>
-- Create date: <28/03/2019>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_D365_ValidateHotboxV2]
	-- Add the parameters for the stored procedure here
	@PONumber nvarchar(15),
	@ItemId nvarchar(50),
	@POSize nvarchar(15)
AS
BEGIN
	SET NOCOUNT ON;
	--DECLARE @PONumber nvarchar(15) = 'SO040027'
	--DECLARE @POSize nvarchar(15) = 'S'

	DECLARE @FailedChk int = 0

	DECLARE @tbl TABLE
	(
		SerialNo numeric(15)
	)

	DECLARE @tbl2 TABLE
	(
		SerialNo numeric(15),
		HbxStatus int
	)

	INSERT INTO @tbl
	SELECT DISTINCT FPBI.SerialNumber
	  FROM [dbo].[FinalPacking] FP WITH (NOLOCK)
	  INNER JOIN FinalPackingBatchInfo FPBI WITH (NOLOCK) On FP.InternalLotNumber = FPBI.InternalLotNumber 
	  where FP.PONumber = @PONumber
	  AND FP.Size = @POSize
	  AND FP.ItemNumber = @ItemId

	INSERT INTO @tbl2
	SELECT  c.SerialNo, p.[HotboxStatus]
	FROM    @tbl c INNER JOIN
			(
				SELECT  SerialNumber,
						MAX(CreatedDate) MaxDate
				FROM    HBXStatus WITH (NOLOCK)
				GROUP BY SerialNumber
			) MaxDates ON c.SerialNo = MaxDates.SerialNumber INNER JOIN
			HBXStatus p WITH (NOLOCK) ON MaxDates.SerialNumber = p.SerialNumber
						AND MaxDates.MaxDate = p.CreatedDate

	SELECT @FailedChk = COUNT(*) FROM @tbl2 WHERE HbxStatus NOT IN ('1','2') --PASS and RELEASE OUT

	SELECT @FailedChk as [FailedCheck]
END
GO
PRINT N'Creating Procedure [dbo].[USP_DEL_BatchAuditLog]...';


GO

-- =======================================================
-- Name:             [USP_DEL_BatchAuditLog]
-- Purpose:          Delete PT Process Audit Log
-- =======================================================
-- Change History
-- Date         Author     Comments
-- -----        ------     -----------------------------
-- 20/07/2020   Soon Siang SP created.
-- =======================================================
CREATE PROCEDURE [dbo].[USP_DEL_BatchAuditLog]
(
	@AuditLogID	BIGINT
)
AS
BEGIN
	SET NOCOUNT ON;

	DELETE FROM BatchAuditLog
	WHERE AuditLogID = @AuditLogID
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_CreateFLOORAXINTPARENTTABLE]...';


GO
-- ==============================================
-- Author:  <Azrul Amin>  
-- Create date: <20-Apr-2018>  
-- Description: <Insert_DOT_FLOORAXINTPARENTTABLE
-- ==============================================
CREATE PROCEDURE [dbo].[USP_DOT_CreateFLOORAXINTPARENTTABLE]  
		@BATCHCARDNUMBER nvarchar(50),  
		@BATCHNUMBER nvarchar(20),  
		@FSIDENTIFIER uniqueidentifier,  
		@FUNCTIONIDENTIFIER nvarchar(20),  
		@PLANTNO nvarchar(20), 
		@REFERENCEBATCHNUMBER1 nvarchar(20),  
		@REFERENCEBATCHNUMBER2 nvarchar(20),  
		@REFERENCEBATCHNUMBER3 nvarchar(20),  
		@REFERENCEBATCHNUMBER4 nvarchar(20),  
		@REFERENCEBATCHNUMBER5 nvarchar(20),  
		@REFERENCEBATCHSEQUENCE1 int,  
		@REFERENCEBATCHSEQUENCE2 int,  
		@REFERENCEBATCHSEQUENCE3 int,  
		@REFERENCEBATCHSEQUENCE4 int,  
		@REFERENCEBATCHSEQUENCE5 int,  
		@SEQUENCE int,
		@PROCESSINGSTATUS int = NULL,
		@FGQUATITY int = 0,					--Surgical Packing Plan
		@PRESHIMPENT int = 0,				--Surgical Packing Plan
		@PRESHIPMENTCASES int = 0,			--Surgical Packing Plan
		@GLOVESAMPLEQUANTITY int = 0,		--Surgical Packing Plan
		@ISCONSOLIDATED int = 0				--#AZRUL 20210909: Open batch flag for NGC1.5
AS  
BEGIN                                                                                                                                                                                                                       
	SET NOCOUNT ON;  
		BEGIN
		    set @PROCESSINGSTATUS = Isnull(@PROCESSINGSTATUS,1);

			INSERT INTO [dbo].[DOT_FLOORAXINTPARENTTABLE]  
					   ([BATCHCARDNUMBER]  
					   ,[BATCHNUMBER]  
					   ,[CREATIONTIME]  
					   ,[CREATORUSERID]  
					   ,[DELETERUSERID]  
					   ,[DELETIONTIME]  
					   ,[ERRORMESSAGE]  
					   ,[FSIDENTIFIER]  
					   ,[FUNCTIONIDENTIFIER]  
					   ,[ISDELETED]  
					   ,[LASTMODIFICATIONTIME]  
					   ,[LASTMODIFIERUSERID]  
					   ,[PROCESSINGSTATUS]  
					   ,[PLANTNO]
					   --,[PRODID]  
					   ,[REFERENCEBATCHNUMBER1]  
					   ,[REFERENCEBATCHNUMBER2]  
					   ,[REFERENCEBATCHNUMBER3]  
					   ,[REFERENCEBATCHNUMBER4]  
					   ,[REFERENCEBATCHNUMBER5]  
					   ,[REFERENCEBATCHSEQUENCE1]  
					   ,[REFERENCEBATCHSEQUENCE2]  
					   ,[REFERENCEBATCHSEQUENCE3]  
					   ,[REFERENCEBATCHSEQUENCE4]  
					   ,[REFERENCEBATCHSEQUENCE5]  
					   ,[SEQUENCE]
					   ,[FGQUANTITY]			--Surgical Packing Plan
					   ,[PRESHIPMENT]			--Surgical Packing Plan
					   ,[PRESHIPMENTCASES]		--Surgical Packing Plan 
					   ,[GLOVESAMPLEQUANTITY]   --Surgical Packing Plan
					   ,[ISCONSOLIDATED])		--#AZRUL 20210909: Open batch flag for NGC1.5
				 VALUES  
					  (@BATCHCARDNUMBER,  
					   @BATCHNUMBER,  
					   GETDATE(),  
					   1,
					   NULL,
					   NULL,
					   '',  
					   @FSIDENTIFIER,  
					   @FUNCTIONIDENTIFIER,  
					   0,  
					   GETDATE(),
					   1,
					   @PROCESSINGSTATUS,  
					   @PLANTNO,
					   --NULL,
					   @REFERENCEBATCHNUMBER1,  
					   @REFERENCEBATCHNUMBER2,  
					   @REFERENCEBATCHNUMBER3,  
					   @REFERENCEBATCHNUMBER4,  
					   @REFERENCEBATCHNUMBER5,  
					   dbo.Ufn_DOT_GET_BATCHSEQUENCE(@REFERENCEBATCHNUMBER1), --@REFERENCEBATCHSEQUENCE1,  -- replace by function,  
					   dbo.Ufn_DOT_GET_BATCHSEQUENCE(@REFERENCEBATCHNUMBER2), --@REFERENCEBATCHSEQUENCE2,  -- replace by function,  
					   dbo.Ufn_DOT_GET_BATCHSEQUENCE(@REFERENCEBATCHNUMBER3), --@REFERENCEBATCHSEQUENCE3,  -- replace by function,  
					   dbo.Ufn_DOT_GET_BATCHSEQUENCE(@REFERENCEBATCHNUMBER4), --@REFERENCEBATCHSEQUENCE4,  -- replace by function,  
					   dbo.Ufn_DOT_GET_BATCHSEQUENCE(@REFERENCEBATCHNUMBER5), --@REFERENCEBATCHSEQUENCE5,  -- replace by function
					   dbo.Ufn_DOT_GET_BATCHSEQUENCE(@BATCHNUMBER), --@SEQUENCE, -- replace by function
					   @FGQUATITY,				--Surgical Packing Plan
					   @PRESHIMPENT,			--Surgical Packing Plan
					   @PRESHIPMENTCASES,		--Surgical Packing Plan
					   @GLOVESAMPLEQUANTITY,    --Surgical Packing Plan
					   dbo.Ufn_DOT_GET_IsConsolidated(@BATCHNUMBER,@PLANTNO));-- -- replace by function @ISCONSOLIDATED);		--#AZRUL 20210909: Open batch flag for NGC1.5
			SELECT @@IDENTITY
		END
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_CreateMovementJournal]...';


GO
-- =============================================
-- Author:  <Azrul Amin>  
-- Create date: <15-May-2018>  
-- Description: <Insert_DOT_MovementJournalChild>  
-- ==============================================
CREATE PROCEDURE [dbo].[USP_DOT_CreateMovementJournal]  
		@PARENTREFRECID int,
		@POSTINGDATEANDTIME datetime, 
		@QUANTITY numeric(32,16), 
		@RESOURCEGROUP nvarchar(10),  
		@SHIFT nvarchar(5),  
		@WAREHOUSE nvarchar(10),
		@LOCATION nvarchar(10),
		@ITEMNUMBER nvarchar(50),
		@CONFIGURATION nvarchar(20)
AS  
BEGIN                                                                                                                                                                                                                       
 SET NOCOUNT ON;  
 INSERT INTO [dbo].[DOT_MOVEMENTJOURNALCHILD]  
           ([CREATIONTIME]  
		   ,[CREATORUSERID]
		   ,[DELETERUSERID]
		   ,[DELETIONTIME]
		   ,[ISDELETED]  
		   ,[LASTMODIFICATIONTIME]
		   ,[LASTMODIFIERUSERID]
		   ,[PARENTREFRECID]
           ,[POSTINGDATEANDTIME]  
           ,[QUANTITY]  
		   ,[RESOURCEGROUP]
           ,[SHIFT] 
           ,[WAREHOUSE]
		   ,[LOCATION]
		   ,[ITEMNUMBER]
		   ,[CONFIGURATION])  
     VALUES  
          (GETDATE(),  
		   1,
		   NULL,
		   NULL,
		   0,
		   GETDATE(),
		   1,
		   @PARENTREFRECID,
		   @POSTINGDATEANDTIME,
		   @QUANTITY,
		   @RESOURCEGROUP,
		   @SHIFT,
           @WAREHOUSE,
		   @LOCATION,
		   @ITEMNUMBER,
		   @CONFIGURATION)  
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_CreatePickingList]...';


GO
-- =====================================
-- Author:  <Azrul Amin>  
-- Create date: <08-Jun-2018>  
-- Description: <Insert DOT_PickingList>  
 --=====================================
--IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_DOT_CreatePickingList]') AND type in (N'P', N'PC'))
--DROP PROCEDURE [dbo].[USP_DOT_CreatePickingList]
--GO
CREATE PROCEDURE [dbo].[USP_DOT_CreatePickingList]  
		@Configuration nvarchar(10),
		@CreateDateAndTime datetime, 
		@InternalReferenceNumber nvarchar(50),
		@Location nvarchar(10),
		@PSIReworkOrderNo nvarchar(50),
		@ParentRefRecId int,
		@PostingDateTime datetime, 
		@QCType nvarchar(20),
		@OldBatchQty numeric(32,16), 
		@SalesOrderNumber nvarchar(50),
		@TenPcsWt numeric(32,16), 
		@Warehouse nvarchar(10),
		@ItemNumber nvarchar(50),
		@ReferenceItemNumber nvarchar(50),
		@RefNumberOfPieces1 numeric(32,16), 
		@RefNumberOfPieces2 numeric(32,16), 
		@RefNumberOfPieces3 numeric(32,16)
AS  
BEGIN                                                                                                                                                                                                                       
 SET NOCOUNT ON;  
 INSERT INTO [dbo].[DOT_PickingList]  
			([Configuration]
			,[CreateDateAndTime]
			,[CreationTime]
			,[CreatorUserId]
			,[DeleterUserId]
			,[DeletionTime]
			,[InternalReferenceNumber]
			,[IsDeleted]
			,[LastModificationTime]
			,[LastModifierUserId]
			,[Location]
			,[PSIReworkOrderNo]
			,[ParentRefRecId]
			,[PickListJournalId]
			,[PostingDateTime]
			,[QCType]
			,[OldBatchQty]
			,[SalesOrderNumber]
			,[TenPcsWt]
			,[Warehouse]
			,[ItemNumber]
			,[ReferenceItemNumber]
			,[RefNumberOfPieces1]
			,[RefNumberOfPieces2]
			,[RefNumberOfPieces3])  
     VALUES  
          (@Configuration,
		   @CreateDateAndTime,  
		   GETDATE(),  --[CREATIONTIME]
		   1, --[CREATORUSERID]
		   NULL, --[DELETERUSERID]
		   NULL, --[DELETIONTIME]
		   @InternalReferenceNumber,
		   0, --[ISDELETED]
		   GETDATE(), --[LASTMODIFICATIONTIME]
		   1, --[LASTMODIFIERUSERID]
		   @Location,
		   @PSIReworkOrderNo,
		   @ParentRefRecId,
		   NULL, --PickingListJournal
		   @PostingDateTime,
		   @QCType,
		   @OldBatchQty,
		   @SalesOrderNumber,
		   @TenPcsWt,
		   @Warehouse,
		   @ItemNumber,
		   @ReferenceItemNumber,
		   @RefNumberOfPieces1,
		   @RefNumberOfPieces2,
		   @RefNumberOfPieces3)  
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_CreateRAFJournal]...';


GO
-- =====================================
-- Author:  <Azrul Amin>  
-- Create date: <02-Feb-2018>  
-- Description: <Insert_DOT_RAFSTGTABLE>  
-- =====================================
CREATE PROCEDURE [dbo].[USP_DOT_CreateRAFJournal]  
		@BATCHORDERNUMBER nvarchar(20),  
		@BATCHWT numeric(32,6),  
		@CONFIGURATION nvarchar(10),  
		@ITEMNUMBER nvarchar(40),  
		@PARENTREFRECID int,
		@POSTINGDATETIME datetime, 
		@QCTYPE nvarchar(15), 
		@RAFGOODQTY numeric(32,6),   
		@RAFHBSAMPLE numeric(32,6),    
		@RAFVTSAMPLE numeric(32,6),
		@RAFWTSAMPLE numeric(32,6),
		@RESOURCE nvarchar(10),  
		@SHIFT nvarchar(5),  
		@TENPCSWT numeric(32,6),  
		@WAREHOUSE nvarchar(10),
		@LOCATION nvarchar(10),
		@RejectedQuantity numeric(32,6),
		@SecondGradeQuantity numeric(32,6),
		@RejectedSampleQuantity numeric(32,6),
		@QUANTITY numeric(32,6),
		@CHANGEDITEMNUMBER nvarchar(40)
AS  
BEGIN                                                                                                                                                                                                                       
 SET NOCOUNT ON;  
 DECLARE @RouteCategory nvarchar(10)
 SELECT  @RouteCategory = RouteCategory FROM dbo.DOT_FSQCTypeTable WITH (NOLOCK) WHERE QCTYPE = @QCTYPE


 
 DECLARE @BATCHNUMBER nvarchar(20),@Sequence int
 SELECT @BATCHNUMBER = BatchNumber,@Sequence=[Sequence] from DOT_FloorAxIntParentTable WITH (NOLOCK) where id = @PARENTREFRECID

 -- Max He 08-12-2020: not require based on Batch type
--#BUG 1166 - AZRUL 26-9-2018: PWT always PT & PVT always OQC, this will overwrite route category based on QC Type START 
 --DECLARE @BatchType nvarchar(10)
 --SELECT @BatchType = Substring(FunctionIdentifier,1,3) from DOT_FloorAxIntParentTable WITH (NOLOCK) where BatchNumber = @BATCHNUMBER AND [Sequence] = 1
 -- Max He 08-12-2020: not require based on Batch type

  --Max He 08-12-2020: check if previous staging function is RWKCR, then follow previous rework order route 
 DECLARE @PerviousFunctionIdentifier nvarchar(50),@PerviousParentId int
 SELECT @PerviousFunctionIdentifier = FunctionIdentifier,@PerviousParentId=Id from DOT_FloorAxIntParentTable where BatchNumber = @BATCHNUMBER AND [Sequence] = @Sequence -1

  -- Azrul 20201020: SRBC default to PT
  IF EXISTS (select 1 from DOT_FloorD365HRGLOVERPT a with (nolock) join DOT_FloorD365BO b with (nolock) on a.BthOrder = b.BthOrderId  
   where a.serialNo = @BATCHNUMBER and b.prodPoolId = 'SGR' and a.IsDeleted = 0 and b.IsDeleted=0)
  BEGIN
   IF NOT EXISTS (select 1 from AXPostingLog with (nolock) where serialnumber = @BATCHNUMBER and Servicename = 'SOBC')
	BEGIN
		SET @RouteCategory = 'PT'
	END
  END

  --Max He 08-12-2020: check if previous staging function is RWKCR, then follow previous rework order route 
  IF @PerviousFunctionIdentifier = 'RWKCR'
  BEGIN
	select @RouteCategory =RouteCategory from DOT_RwkBatchOrderCreationChildTable with(nolock) where ParentRefRecId=@PerviousParentId;
  END
  -- Max He 08-12-2020: not require based on Batch type

 --IF @BatchType = 'PWT'
 --BEGIN
	--SET @RouteCategory = 'PT'
 --END
 --IF @BatchType = 'PVT'
 --BEGIN
	--SET @RouteCategory = 'OQC'
 --END
 --#BUG 1166 - AZRUL 26-9-2018: PWT always PT & PVT always OQC, this will overwrite route category based on QC Type END

 -- Max He 08-12-2020: not require based on Batch type

  --Amir - 1/1/2022: water tight(WT) route must always be PT
  DECLARE @BatchType nvarchar(10)
  select @BatchType = BatchType from batch where SerialNumber =@BATCHNUMBER
  IF (@BatchType = 'PWT' or @BatchType = 'QWT' or @BatchType = 'OWT' or @BatchType = 'PSW')
   BEGIN
    SET @RouteCategory = 'PT'
   END

 INSERT INTO [dbo].[DOT_RAFSTGTABLE]  
           ([BATCHORDERNUMBER]
		   ,[BatchWeight] --[BATCHWT]
           ,[CONFIGURATION]  
           ,[CREATIONTIME]  
		   ,[CREATORUSERID]
		   ,[DELETERUSERID]
		   ,[DELETIONTIME]
           ,[HBBATCHNUMBER]  
		   ,[ISDELETED]  
           ,[ITEMNUMBER]  
		   ,[LASTMODIFICATIONTIME]
		   ,[LASTMODIFIERUSERID]
		   ,[PARENTREFRECID]
		   ,[PickListJournalId] --[PICKINGLISTJOURNAL]
           ,[POSTINGDATETIME]  
           ,[QCTYPE]  
           ,[RAFGOODQTY]  
           ,[RAFHBSAMPLE]  
           ,[RAFVTSAMPLE]  
           ,[RAFWTSAMPLE]       
		   ,[RAFJournalId] --[REPORTASFINISHEDJOURNAL]
		   ,[RESOURCE]
		   ,[RouteCardJournalId] --[ROUTEJOURNAL]
		   ,[SAMPLEWAREHOUSE]
           ,[SHIFT]  
           ,[Weightof10Pcs] --[TENPCSWT] 
           ,[VTBATCHNUMBER]  
           ,[WTBATCHNUMBER]  
           ,[WAREHOUSE]
		   ,[LOCATION]
		   ,[RejectedQuantity]
		   ,[SecondGradeQuantity]
		   ,[RejectedSampleQuantity]
		   ,[Quantity]
		   ,[RouteCategory]
		   ,[ChangedItemNumber])  
     VALUES  
          (@BATCHORDERNUMBER,
		   @BATCHWT,  
           @CONFIGURATION,   
		   GETDATE(),  
		   1,
		   NULL,
		   NULL,
		   '',
		   0,
		   @ITEMNUMBER,
		   GETDATE(),
		   1,
		   @PARENTREFRECID,
		   '',
		   @POSTINGDATETIME,
		   @QCTYPE,
		   @RAFGOODQTY,
		   @RAFHBSAMPLE,
		   @RAFVTSAMPLE,
		   @RAFWTSAMPLE,
		   '',
		   @RESOURCE,
		   '',
		   '',
		   @SHIFT,
		   @TENPCSWT,
		   '',
		   '',
           @WAREHOUSE,
		   @LOCATION,
		   @RejectedQuantity,
           @SecondGradeQuantity,
           @RejectedSampleQuantity,
		   @QUANTITY,
		   @RouteCategory,
		   @CHANGEDITEMNUMBER)  
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_CreateReworkOrder]...';


GO
-- =====================================
-- Author:  <Muhammad Khalid>  
-- Create date: <28-May-2018>  
-- Description: <Insert_DOT_RwkBatchOrderCreationChildTable>  
-- =====================================
CREATE   PROCEDURE [dbo].[USP_DOT_CreateReworkOrder]    
		@CONFIGURATION nvarchar(10),  
		@DELIVERYDATE datetime,  
		@ITEMNUMBER nvarchar(50), 
		@PARENTREFRECID int,
		@POOL nvarchar(15), 
		@POSTINGDATETIME datetime, 
		@QUANTITY numeric(32,16), 
		@ROUTECATEGORY nvarchar(15),  
		@WAREHOUSE nvarchar(10),
		@OriRWKNum nvarchar(500)=''
AS  
BEGIN                                                                                                                                                                                                                       
 SET NOCOUNT ON;  

 --#BUG 1166 - AZRUL 26-9-2018: PWT always PT & PVT always OQC, this will overwrite route category based on QC Type START
 DECLARE @BATCHNUMBER nvarchar(20),@Sequence int
 SELECT @BATCHNUMBER = BatchNumber,@Sequence=[Sequence] from DOT_FloorAxIntParentTable where id = @PARENTREFRECID
 DECLARE @BatchType nvarchar(10)
 SELECT @BatchType = Substring(FunctionIdentifier,1,3) from DOT_FloorAxIntParentTable where BatchNumber = @BATCHNUMBER AND [Sequence] = 1

 --Max He 01-12-2020: check if previous staging function are RWKDEL and SPBC means have OCQI fail PT, not require follow BatchType 
 DECLARE @PerviousFunctionIdentifier nvarchar(50)
 SELECT @PerviousFunctionIdentifier = FunctionIdentifier from DOT_FloorAxIntParentTable where BatchNumber = @BATCHNUMBER AND [Sequence] = @Sequence -1
 DECLARE @PerviousFunctionIdentifier2 nvarchar(50)
 SELECT @PerviousFunctionIdentifier2 = FunctionIdentifier from DOT_FloorAxIntParentTable where BatchNumber = @BATCHNUMBER AND [Sequence] = @Sequence -2
 IF @PerviousFunctionIdentifier <>'SPBC' AND @PerviousFunctionIdentifier2 <>'RWKDEL'
 begin
	 IF @BatchType = 'PWT'
	 BEGIN
		SET @POOL = 'PT'
		SET @RouteCategory = 'PT'
	 END
	 IF @BatchType = 'PVT'
	 BEGIN
		SET @POOL = 'OQC'
		SET @RouteCategory = 'OQC'
	 END
 end
 --#BUG 1166 - AZRUL 26-9-2018: PWT always PT & PVT always OQC, this will overwrite route category based on QC Type END

 INSERT INTO [dbo].[DOT_RwkBatchOrderCreationChildTable]  
           ([CONFIGURATION]  
           ,[CREATIONTIME]  
		   ,[CREATORUSERID]
		   ,[DELETERUSERID]
		   ,[DELETIONTIME]
		   ,[DELIVERYDATE]
		   ,[ISDELETED]  
           ,[ITEMNUMBER]  
		   ,[LASTMODIFICATIONTIME]
		   ,[LASTMODIFIERUSERID]
		   ,[PARENTREFRECID]
		   ,[POOL]
           ,[POSTINGDATEANDTIME]   
           ,[QUANTITY]  
           ,[ROUTECATEGORY]  
           ,[WAREHOUSE]
		   ,[OriRWKNum])  
     VALUES  
          (@CONFIGURATION,   
		   GETDATE(),  
		   1,
		   NULL,
		   NULL,
		   @DELIVERYDATE,
		   0,
		   @ITEMNUMBER,
		   GETDATE(),
		   1,
		   @PARENTREFRECID,
		   @POOL,
		   @POSTINGDATETIME,
		   @QUANTITY,
		   @ROUTECATEGORY,
           @WAREHOUSE,
		   @OriRWKNum)  
END
GO
PRINT N'Creating Procedure [dbo].[USP_DOT_Dashboard]...';


GO
-- ==================================================================================================================================================    
-- Name: USP_DOT_Dashboard  
-- Purpose: Status for the Dashboard.   
-- ==================================================================================================================================================    
-- Change History    
-- Date			Author     Comments    
-- -----		--------   ------------------------------------------------------------  
-- 2021/10/14   Ryan Yam   SP created.    
-- ==================================================================================================================================================   
-- exec USP_DOT_Dashboard
-- ==================================================================================================================================================

CREATE   PROCEDURE [dbo].[USP_DOT_Dashboard]  

AS
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from    
 -- interfering with SELECT statements.    
 SET NOCOUNT ON;

	IF OBJECT_ID('tempdb..#TempStaging') IS NOT NULL  
	DROP TABLE #TempStaging
	IF OBJECT_ID('tempdb..#OutOfPeriod') IS NOT NULL  
	DROP TABLE #OutOfPeriod
	IF OBJECT_ID('tempdb..#NotStarted') IS NOT NULL  
	DROP TABLE #NotStarted 
	IF OBJECT_ID('tempdb..#Ready') IS NOT NULL  
	DROP TABLE #Ready
	IF OBJECT_ID('tempdb..#InProgress') IS NOT NULL  
	DROP TABLE #InProgress
	IF OBJECT_ID('tempdb..#OnHold') IS NOT NULL  
	DROP TABLE #OnHold
	IF OBJECT_ID('tempdb..#Error') IS NOT NULL  
	DROP TABLE #Error
	
	select *
	into #TempStaging
	from  DOT_FloorAxIntParentTable with (nolock) 
	where IsDeleted=0 

	-- 12 rows
	select FunctionIdentifier, count(ProcessingStatus) as OutOfPeriod
	into #OutOfPeriod
	from  #TempStaging with (nolock) 
	WHERE ProcessingStatus = 1
	group by FunctionIdentifier 

	-- 0 row
	select FunctionIdentifier, count(ProcessingStatus) as NotStarted
	into #NotStarted
	from  #TempStaging with (nolock) 
	WHERE ProcessingStatus = 2 and IsDeleted = 0
	group by FunctionIdentifier

	-- 20 rows
	select FunctionIdentifier, count(ProcessingStatus) as Ready
	into #Ready
	from  #TempStaging with (nolock) 
	WHERE ProcessingStatus = 3
	group by FunctionIdentifier

	-- 0 row
	select FunctionIdentifier, count(ProcessingStatus) as InProgress
	into #InProgress
	from  #TempStaging with (nolock) 
	WHERE ProcessingStatus = 4
	group by FunctionIdentifier

	-- 0 row
	select FunctionIdentifier, count(ProcessingStatus) as OnHold
	into #OnHold
	from  #TempStaging with (nolock) 
	WHERE ProcessingStatus = 5
	group by FunctionIdentifier

	-- 3 rows
	select FunctionIdentifier, count(ProcessingStatus) as Error
	into #Error
	from  #TempStaging with (nolock) 
	WHERE ProcessingStatus = 6
	group by FunctionIdentifier

	select distinct a.FunctionIdentifier, COALESCE(b.OutOfPeriod, 0) as OutOfPeriod,
	COALESCE(c.NotStarted, 0) as NotStarted, COALESCE(d.Ready, 0) as Ready, COALESCE(e.InProgress, 0) as InProgress,
	COALESCE(f.OnHold, 0) as OnHold, COALESCE(g.Error, 0) as Error from #TempStaging a 
	LEFT JOIN #OutOfPeriod b on a.FunctionIdentifier = b.FunctionIdentifier
	LEFT JOIN #NotStarted c on a.FunctionIdentifier = c.FunctionIdentifier
	LEFT JOIN #Ready d on a.FunctionIdentifier = d.FunctionIdentifier
	LEFT JOIN #InProgress e on a.FunctionIdentifier = e.FunctionIdentifier
	LEFT JOIN #OnHold f on a.FunctionIdentifier = f.FunctionIdentifier
	LEFT JOIN #Error g on a.FunctionIdentifier = g.FunctionIdentifier

	IF OBJECT_ID('tempdb..#TempStaging') IS NOT NULL  
	DROP TABLE #TempStaging
	IF OBJECT_ID('tempdb..#OutOfPeriod') IS NOT NULL  
	DROP TABLE #OutOfPeriod
	IF OBJECT_ID('tempdb..#NotStarted') IS NOT NULL  
	DROP TABLE #NotStarted 
	IF OBJECT_ID('tempdb..#Ready') IS NOT NULL  
	DROP TABLE #Ready
	IF OBJECT_ID('tempdb..#InProgress') IS NOT NULL  
	DROP TABLE #InProgress
	IF OBJECT_ID('tempdb..#OnHold') IS NOT NULL  
	DROP TABLE #OnHold
	IF OBJECT_ID('tempdb..#Error') IS NOT NULL  
	DROP TABLE #Error

END
GO
PRINT N'Creating Procedure [dbo].[usp_FG_GetDateScannedPalletID]...';


GO

-- =============================================    
-- Author:  <Author,,Name>    
-- Create date: <Create Date,,>    
-- Description: <Description,,>  

-- Author:  Pang YS   
-- Modified date: 04/01/2022     
-- Description: Added checking for Inv360_CompletedPallet, Inventory360 (MTS)   

-- =============================================    
CREATE PROCEDURE [dbo].[usp_FG_GetDateScannedPalletID]    
 -- Add the parameters for the stored procedure here    
 @PalletID  varchar(50),
 @FromPlant varchar(5),
 @ScannedBy varchar(400),
 @MachineName varchar(400)
  
AS    
BEGIN    
 -- SET NOCOUNT ON added to prevent extra result sets from    
 -- interfering with SELECT statements.    
 --DECLARE @retval int    
	SET NOCOUNT ON;    
    
	DECLARE @EXISTINGSCANNED DATETIME = (SELECT MAX(DateScanned) FROM FGReceivedPallet(NOLOCK) WHERE PalletID = @PalletID)
	DECLARE @ISABLETOSCAN BIT = 0
	--DECLARE @ISMTO BIT = 0
	--DECLARE @ISMTS BIT = 0  

	--------------------------------------------------------------------------------------------------------
	-- MTO(make to order look for EWN_CompletedPallet
	IF EXISTS(SELECT 1 FROM EWN_CompletedPallet(NOLOCK) WHERE PalletId = @PalletID AND DateScanned IS NULL AND DateStockOut IS NULL)    
	BEGIN    
		SET @ISABLETOSCAN = 1    
		--SET @ISMTO = 1    
	END
	-- MTS(make to stock look for Inv360_CompletedPallet
	ELSE IF EXISTS(SELECT 1 FROM Inv360_CompletedPallet(NOLOCK) WHERE PalletId = @PalletID AND DateScanned IS NULL)    
	BEGIN    
		SET @ISABLETOSCAN = 1    
		--SET @ISMTS = 1
	END
	--------------------------------------------------------------------------------------------------------
	
	
	IF (@EXISTINGSCANNED IS NOT NULL)
	BEGIN
		IF (@ISABLETOSCAN = 1)
		BEGIN
			SELECT 1
		END
		ELSE
		BEGIN
			--EXEC usp_FG_InsertScanError @PalletID,'PalletID EWN_CompletedPallet column DateScanned is NOT NULL', @FromPlant, @ScannedBy, @MachineName
			SELECT 0
		END
	END
	ELSE
	BEGIN
		SELECT 1
	END
END
GO
PRINT N'Creating Procedure [dbo].[usp_FG_GetScannedPalletID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
-- exec [usp_FG_GetScannedPalletID] ''
CREATE PROCEDURE [dbo].[usp_FG_GetScannedPalletID]
	-- Add the parameters for the stored procedure here
	@Plant		varchar(5) =''
AS
BEGIN
	Select * from FGReceivedPallet
	where (FromPlant=@Plant or @Plant='')
	and ScannedBy <> 'Warehouse_RFID'

END
GO
PRINT N'Creating Procedure [dbo].[usp_FG_InsertScanError]...';


GO

  
-- =============================================  
-- Author:  Cheah Teik Chuan  
-- Create date: 2018-09-11  
-- Description: Inserts encountered errors to the table  
-- =============================================  
-- exec [InsertScannedPalletID] 'ABC123','2018-01-03'  
CREATE PROCEDURE [dbo].[usp_FG_InsertScanError]  
 -- Add the parameters for the stored procedure here  
 @PalletID  varchar(50),  
 @ErrorMsg  nvarchar(MAX),
 @FromPlant varchar(5),
 @ScannedBy varchar(400),
 @MachineName varchar(400)
AS  
BEGIN  
  
  Insert into FGReceivedPallet_Error(ScanDate, PalletID, ErrorMsg, FromPlant, ScannedBy, MachineName)--,Test)  
  values(GETDATE(), @PalletID, @ErrorMsg, @FromPlant, @ScannedBy, @MachineName)--, 'ABC;')  
  
END
GO
PRINT N'Creating Procedure [dbo].[usp_FG_InsertScannedPalletID]...';


GO
  
-- =============================================          
-- Author:  <Author,,Name>          
-- Create date: <Create Date,,>          
-- Description: <Description,,>          
  
-- Author:  Pang YS     
-- Modified date: 04/01/2022       
-- Description: Added scan for Inventory360 (MTS)     
  
-- exec [InsertScannedPalletID] 'ABC123','2018-01-03'   
-- exec [usp_FG_InsertScannedPalletID]   'HH010024', 'P6' , 'SYSTEM', 'LOCAL'  
-- =============================================          
  
CREATE PROCEDURE [dbo].[usp_FG_InsertScannedPalletID]          
 -- Add the parameters for the stored procedure here          
 @PalletID  varchar(50),          
 @FromPlant  varchar(5),          
 @ScannedBy  varchar(400),          
 @MachineName varchar(400)          
AS          
BEGIN          
 -- SET NOCOUNT ON added to prevent extra result sets from          
 -- interfering with SELECT statements.          
 SET NOCOUNT ON;          
      
 DECLARE @EXISTINGSCANNED DATETIME = (SELECT MAX(DateScanned) FROM FGReceivedPallet(NOLOCK) WHERE PalletID = @PalletID)      
 DECLARE @ISABLETOSCAN BIT = 0      
 DECLARE @ISMTO BIT = 0      
 DECLARE @ISMTS BIT = 0      
 DECLARE @ReturnValue int      
 DECLARE @CURRENTDATE DATETIME = GETDATE()      
       
 --------------------------------------------------------------------------------------------------------  
 -- MTO(make to order look for EWN_CompletedPallet  
 IF EXISTS(SELECT 1 FROM EWN_CompletedPallet(NOLOCK) WHERE PalletId = @PalletID AND DateScanned IS NULL AND DateStockOut IS NULL)      
 BEGIN      
  SET @ISABLETOSCAN = 1      
  SET @ISMTO = 1      
 END  
 -- MTS(make to stock look for Inv360_CompletedPallet  
 ELSE IF EXISTS(SELECT 1 FROM Inv360_CompletedPallet(NOLOCK) WHERE PalletId = @PalletID AND DateScanned IS NULL)      
 BEGIN      
  SET @ISABLETOSCAN = 1      
  SET @ISMTS = 1  
 END  
 --------------------------------------------------------------------------------------------------------  
   
 IF (@EXISTINGSCANNED IS NOT NULL)      
 BEGIN      
  IF (@ISABLETOSCAN = 1)      
  BEGIN      
  print '@PalletID,@FromPlant,@CURRENTDATE'
  print @PalletID
  print @FromPlant
  print @CURRENTDATE
   EXEC [dbo].[USP_DOT_FSPostD365FromFGReceivedPallet] @PalletID,@FromPlant,@CURRENTDATE, @ReturnValue output      
   IF (@ReturnValue = 1)      
   BEGIN      
    INSERT INTO FGReceivedPallet(PalletID, FromPlant, DateScanned, IsProcessed, ScannedBy, MachineName)      
     VALUES(@PalletID, @FromPlant, @CURRENTDATE, 0, @ScannedBy, @MachineName)    
  IF (@ISMTO = 1)     
  UPDATE EWN_CompletedPallet   
   SET DateScanned = @CURRENTDATE      
   WHERE PalletId = @PalletID      
   AND DateStockOut IS NULL      
  ELSE IF (@ISMTS = 1)     
  UPDATE Inv360_CompletedPallet   
   SET DateScanned = @CURRENTDATE  
   WHERE Id IN (SELECT TOP 1 Id FROM Inv360_CompletedPallet(nolock) WHERE PalletId = @PalletID ORDER BY DateCompleted DESC)  
   -- PalletId = @PalletID  
    SELECT 1      
   END      
   ELSE      
   BEGIN      
    RAISERROR ('Pallet failed to post to web admin. Please try to rescan again', 11, 1)      
   END    
  END      
  ELSE      
  BEGIN      
   RAISERROR ('PalletID EWN_CompletedPallet(MTO) or Inv360_CompletedPallet(MTS) column DateScanned is NOT NULL', 11, 3)      
  END      
 END      
 ELSE      
 BEGIN      
  IF (@ISABLETOSCAN = 1) -- EwareNavi, MTS dependent      
  BEGIN      
   EXEC [dbo].[USP_DOT_FSPostD365FromFGReceivedPallet] @PalletID,@FromPlant,@CURRENTDATE, @ReturnValue output    
   --SELECT 2  
   IF (@ReturnValue = 1)      
   BEGIN      
    INSERT INTO FGReceivedPallet(PalletID, FromPlant, DateScanned, IsProcessed, ScannedBy, MachineName)      
     VALUES(@PalletID, @FromPlant, @CURRENTDATE, 0, @ScannedBy, @MachineName)  
  IF (@ISMTO = 1)     
  UPDATE EWN_CompletedPallet   
   SET DateScanned = @CURRENTDATE      
   WHERE PalletId = @PalletID      
   AND DateStockOut IS NULL      
  ELSE IF (@ISMTS = 1)     
  UPDATE Inv360_CompletedPallet   
   SET DateScanned = @CURRENTDATE  
   WHERE Id IN (SELECT TOP 1 Id FROM Inv360_CompletedPallet(nolock) WHERE PalletId = @PalletID ORDER BY DateCompleted DESC)  
   -- PalletId = @PalletID  
    SELECT 1      
   END      
   ELSE      
   BEGIN      
    RAISERROR ('Pallet failed to post to web admin. Please try to rescan again.', 11, 1)      
   END      
  END      
  ELSE      
  BEGIN      
   -- No record in dbo.FGReceivedPallet  
   RAISERROR ('Pallet has not been evaluated in EwareNavi or Inventory360. Please check if the pallet exists in the EWN_CompletedPallet and Inv360_CompletedPallet table', 11, 2)      
  END      
 END       
END
GO
PRINT N'Creating Procedure [dbo].[usp_FP_CheckInternalLotNumberWithPcs_Get]...';


GO
-- =============================================  
-- Author:  Srikanth Balda  
-- Create date: 24/7.2014  
-- Description: To Get Final Packing Transaction details  
-- =============================================  
-- Change History    
-- Date    Author   Comments    
-- -----   ------   -----------------------------     
-- 06/08/2018 Max He   Cater muliple BO  
-- 09/09/2018 Max He   Decouple Brand Header & detail info   
-- =============================================    
CREATE PROCEDURE [dbo].[usp_FP_CheckInternalLotNumberWithPcs_Get]
 @InternalLotnumber nvarchar(20)  
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.    
   
SELECT --TOP 1 #MH
FP.LocationId,FP.WorkStationid,FP.PrinterName,FP.PackDate,FP.OuterLotNo,FP.InternalLotNumber,FP.PONumber,  
FP.ItemNumber,FP.Size,FP.QCGroupId,FPB.SerialNumber,FP.BoxesPacked,FP.PalletId,FP.CasesPacked,FP.PreShipmentPalletId,  
FP.PreshipmentCasesPacked,FP.OperatorId,FP.LastModifiedOn,FP.InnerSetLayout,FP.OuterSetLayout, B.BatchNumber ,B.GloveType,  
PO.ItemName,FP.ManufacturingDate,FP.ExpiryDate,PO.BarcodeVerificationRequired, FP.BarcodetoValidate,FP.counttovalidate,PO.Ordernumber,PO.CustomerReferenceNumber, (bl.BaseQuantity * FP.CasesPacked) As [LotNoPcs]  
,po.CustomerReferenceNumber, bo.BthOrderId as PSIReworkOrderNo, bo.ProdStatus as PSIStatus
FROM Finalpacking FP with (nolock) 
join FinalPackingBatchInfo FPB with (nolock) ON FP.InternalLotNumber = FPB.InternalLotNumber  
JOIN Batch B with (nolock) ON FPB.SerialNumber = B.SerialNumber  
JOIN PurchaseOrderItem PO with (nolock) ON PO.ItemNumber = FP.ItemNumber and PO.PONumber = FP.PONumber AND po.ItemSize=fp.Size
JOIN DOT_FSBrandLines bl with (nolock) on FP.ItemNumber = bl.ItemId AND FP.Size = bl.CustomerSize
join DOT_FloorD365BO bo with (nolock) on bo.batchid = po.CustomerReferenceNumber AND bo.Size = po.ItemSize AND bo.IsDeleted = 0 and bo.ReworkBatch = 'Yes' 
and bo.ProdPoolId in ('PSI','LAB','QAI') and bo.ProdStatus = 'StartedUp'
and (';' + RTRIM(bo.InternalLotNo) + ';') LIKE '%;' + fp.InternalLotNumber + ';%'
WHERE FP.InternalLotNumber = @InternalLotnumber 
and bo.BthOrderId in (select PSIReworkOrderNo from DOT_PickingList with (nolock) where InternalReferenceNumber = @InternalLotnumber)
END
GO
PRINT N'Creating Procedure [dbo].[usp_FP_DOT_GetFGOrderBySOandItemSize]...';


GO

CREATE PROCEDURE [dbo].[usp_FP_DOT_GetFGOrderBySOandItemSize]       
 @Size nvarchar(30),
 @SalesId nvarchar(30),
 @ItemNumber nvarchar(30),
 @Location nvarchar(20)

AS      
BEGIN        
      
 select distinct bo.BthOrderId as BatchOrder
 from   
 DOT_FloorSalesLine FSL with (nolock)      
 left Join DOT_FloorSales ST with (nolock) on FSL.SALESID =  ST.SALESID        
 left join DOT_FSItemMaster im with (nolock) on im.ItemId = FSL.ItemId        
 left join DOT_FloorD365BO bo with (nolock) on bo.BatchId = st.CustomerRef and bo.Size = case when im.ItemType = 8 then FSL.CustomerSize else FSL.CONFIGURATION end  
 left join DOT_FloorD365BOResource res with (nolock) on res.BatchOrderId = bo.BthOrderId     
 left join  (select sum(fp.CasesPacked) as CasesPacked,bo2.BthOrderId from finalpacking FP WITH (NOLOCK)         
 join purchaseorderitem POIN WITH (NOLOCK) on POIN.ponumber = FP.ponumber and POIN.Itemnumber = FP.itemnumber and FP.Size = POIN.ItemSize        
 join DOT_FloorD365BO bo2 WITH (NOLOCK) on bo2.BthOrderId = fp.FGBatchOrderNo and FP.Size = bo2.Size and bo2.IsDeleted=0        
 WHERE bo2.ProdStatus IN ('ReportedFinished','StartedUp','Released') group by bo2.BthOrderId) as fp      
 on fp.BthOrderId = bo.BthOrderId    
 where  
  bo.ReworkBatch <> 'Yes' --filter out all rework order        
   and im.ITEMTYPE <> 4 -- ensure item type is not 'GLove'         
   and ST.SALESSTATUS = 1 --'Backorder'      
   and ST.DocumentStatus not in (0,1,2) --ensure document status is not ('None','Quotation','PurchaseOrder')      
   and st.salesid = @SalesId       
   and bo.ItemId = @ItemNumber       
   and bo.ProdPoolId = 'FG'      
   --and FSL.CONFIGURATION = @Size   
   and @Size = case when im.ItemType = 8 then FSL.CustomerSize else FSL.CONFIGURATION end     
   and bo.ProdStatus = 'StartedUp'      
   and bo.IsDeleted=0 and res.IsDeleted=0      
   --and res.PlantNo = @Location -- HSB allow to pack by different plant.     
   group by bo.BthOrderId,    
			bo.QtySched,    
			fp.CasesPacked
   having bo.QtySched - ISNULL(fp.CasesPacked,0) > 0 --filter out full packed FGBO      
END
GO
PRINT N'Creating Procedure [dbo].[USP_FP_Get_ScanBatchCardInnerOuterforPostingMTS]...';


GO



-- ========================================================================================
-- Name:			USP_FP_Get_ScanBatchCardInnerOuterforPostingMTS
-- Purpose: 		get the scan Batch card inner and outer data without SO (MTS) for posting to AX.
-- ========================================================================================
CREATE PROCEDURE [dbo].[USP_FP_Get_ScanBatchCardInnerOuterforPostingMTS]
(
       @internalLotnumber nvarchar(15)
)
AS
BEGIN
	SET NOCOUNT ON;
    
	SELECT DISTINCT
FP.internalLotnumber , FP.OuterLotNo, FP.PONumber, FP.itemnumber,FP.PackDate,FP.CasesPacked,FP.PreshipmentCasesPacked,
FP.manufacturingdate,FP.ExpiryDate, bo.BthOrderId as BatchOrder,
POIN.customersize,POIN.ordernumber,POIN.CustomerLotNumber,POIN.CustomerReferenceNumber,
BT.BatchCardDate,FPB.SerialNumber, BT.BatchNumber, FP.PalletId, rs.Resource
 from finalpacking FP WITH (NOLOCK) 
 join Finalpackingbatchinfo FPB WITH (NOLOCK) on FPB.internallotnumber = FP.internallotnumber
 join purchaseorderitem POIN WITH (NOLOCK) on POIN.ponumber = FP.ponumber and POIN.Itemnumber = FP.itemnumber and FP.Size = POIN.ItemSize
 join Batch BT WITH (NOLOCK) on BT.serialnumber = FP.serialnumber
 join DOT_FloorD365BO bo WITH (NOLOCK) on bo.BthOrderId = fp.PONumber and bo.IsDeleted=0
 join DOT_FloorD365BOResource rs WITH (NOLOCK) on rs.BatchOrderId = bo.BthOrderId and rs.IsDeleted=0
where FP.internallotnumber = @internalLotnumber
    SET NOCOUNT OFF;
END
GO
PRINT N'Creating Procedure [dbo].[usp_FP_GetBatchBySerialNoAndSalesOrder]...';


GO

-- =============================================
-- Author:		Srikanth Balda
-- Create date: 21 sep 2014
-- Description:	To Validate existance
-- =============================================
CREATE PROCEDURE [dbo].[usp_FP_GetBatchBySerialNoAndSalesOrder]
	-- Add the parameters for the stored procedure here
(
	@SerialNumber numeric,
	@GloveCode nvarchar(50),
	@Size nvarchar(30),
	@ALTERNATEGLOVECODE1 nvarchar(50),
	@ALTERNATEGLOVECODE2 nvarchar(50),
	@ALTERNATEGLOVECODE3 nvarchar(50),
	@InnerBoxCapacity int,
	@SalesId nvarchar(30),
	@ItemNumber nvarchar(30)
)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @PackingSize int

	IF exists (select 1 from qcyieldandpacking where serialnumber = @SerialNumber)
		BEGIN	
			SELECT @PackingSize = PackingSize from qcyieldandpacking WHERE Serialnumber = @SerialNumber
		END
	ELSE IF exists (select 1 from QAI where serialnumber = @SerialNumber)
		BEGIN
			SELECT @PackingSize = PackingSize from QAI WHERE Serialnumber = @SerialNumber
		END
	-- Insert statements for procedure here
	select a.serialNumber,a.BatchNumber,a.QAIDate, a.isFPBatchSplit,a.LineId,a.BatchCardDate,a.GloveType,a.size
    from Batch a
	where a.SerialNumber = @SerialNumber 
	and a.GloveType in (@GloveCode,@ALTERNATEGLOVECODE1,@ALTERNATEGLOVECODE2,@ALTERNATEGLOVECODE3)	
	and a.size = @Size
	
END
GO
PRINT N'Creating Procedure [dbo].[usp_FP_GetBatchWeightPcsBySerialNo]...';


GO
-- =============================================  
-- Author:  <Azman Kasim>  
-- Create date: <16/03/2017>  
-- Description: <Get Batch information related with weight/pcs>  
-- =============================================  
CREATE PROCEDURE [dbo].[usp_FP_GetBatchWeightPcsBySerialNo]  
 @SerialNumber numeric(10,0)  
  
AS  
BEGIN  
 SET NOCOUNT ON;  
  
 SELECT SerialNumber, BatchNumber, BatchWeight, TenPCsWeight, TotalPCs, PackedPcs FROM Batch WHERE SerialNumber = @serialNumber  
END
GO
PRINT N'Creating Procedure [dbo].[usp_FP_InternalLotNumberWithPcs_Get]...';


GO
  
-- =============================================  
-- Author:  Srikanth Balda  
-- Create date: 24/7.2014  
-- Description: To Get Final Packing Transaction details  
-- =============================================  
-- Change History    
-- Date    Author   Comments    
-- -----   ------   -----------------------------     
-- 06/08/2018 Max He   Cater muliple BO  
-- 09/09/2018 Max He   Decouple Brand Header & detail info   
-- =============================================    
CREATE PROCEDURE [dbo].[usp_FP_InternalLotNumberWithPcs_Get]  
 @InternalLotnumber nvarchar(20)  
AS  
BEGIN  
 -- SET NOCOUNT ON added to prevent extra result sets from  
 -- interfering with SELECT statements.    
   
SELECT --TOP 1 #MH
FP.LocationId,FP.WorkStationid,FP.PrinterName,FP.PackDate,FP.OuterLotNo,FP.InternalLotNumber,FP.PONumber,  
FP.ItemNumber,FP.Size,FP.QCGroupId,FPB.SerialNumber,FP.BoxesPacked,FP.PalletId,FP.CasesPacked,FP.PreShipmentPalletId,  
FP.PreshipmentCasesPacked,FP.OperatorId,FP.LastModifiedOn,FP.InnerSetLayout,FP.OuterSetLayout, B.BatchNumber ,B.GloveType,  
PO.ItemName,FP.ManufacturingDate,FP.ExpiryDate,PO.BarcodeVerificationRequired, FP.BarcodetoValidate,FP.counttovalidate,PO.Ordernumber,PO.CustomerReferenceNumber, (bl.BaseQuantity * FP.CasesPacked) As [LotNoPcs]  
,po.CustomerReferenceNumber, bo.BthOrderId as PSIReworkOrderNo, bo.ProdStatus as PSIStatus
FROM Finalpacking FP with (nolock) 
join FinalPackingBatchInfo FPB with (nolock) ON FP.InternalLotNumber = FPB.InternalLotNumber  
JOIN Batch B with (nolock) ON FPB.SerialNumber = B.SerialNumber  
JOIN PurchaseOrderItem PO with (nolock) ON PO.ItemNumber = FP.ItemNumber and PO.PONumber = FP.PONumber AND po.ItemSize=fp.Size
JOIN DOT_FSBrandLines bl with (nolock) on FP.ItemNumber = bl.ItemId AND FP.Size = bl.HartalegaCommonSize
join DOT_FloorD365BO bo with (nolock) on bo.batchid = po.CustomerReferenceNumber AND bo.Size = po.ItemSize AND bo.IsDeleted = 0 and bo.ReworkBatch = 'Yes' 
and bo.ProdPoolId in ('PSI','LAB','QAI') and bo.ProdStatus = 'StartedUp'
and (';' + RTRIM(bo.InternalLotNo) + ';') LIKE '%;' + fp.InternalLotNumber + ';%'
WHERE FP.InternalLotNumber = @InternalLotnumber 
and bo.BthOrderId not in (select PSIReworkOrderNo from DOT_PickingList with (nolock) where InternalReferenceNumber = @InternalLotnumber)
END  

/** original sp
SELECT TOP 1  
FP.LocationId,FP.WorkStationid,FP.PrinterName,FP.PackDate,FP.OuterLotNo,FP.InternalLotNumber,FP.PONumber,  
FP.ItemNumber,FP.Size,FP.QCGroupId,FPB.SerialNumber,FP.BoxesPacked,FP.PalletId,FP.CasesPacked,FP.PreShipmentPalletId,  
FP.PreshipmentCasesPacked,FP.OperatorId,FP.LastModifiedOn,FP.InnerSetLayout,FP.OuterSetLayout, B.BatchNumber ,B.GloveType,  
PO.ItemName,FP.ManufacturingDate,FP.ExpiryDate,QG.QCGroupName,PO.BarcodeVerificationRequired, FP.BarcodetoValidate,FP.counttovalidate,PO.Ordernumber,PO.CustomerReferenceNumber, (BR.BaseQuantity * FP.CasesPacked) As [LotNoPcs]  
  
FROM Finalpacking FP join FinalPackingBatchInfo FPB ON FP.InternalLotNumber = FPB.InternalLotNumber  
JOIN Batch B ON FPB.SerialNumber = B.SerialNumber  
JOIN QCGroupMaster QG ON FP.QCGroupId=QG.QCGroupId  
JOIN PurchaseOrderItem PO ON PO.ItemNumber = FP.ItemNumber and PO.PONumber = FP.PONumber AND po.ItemSize=fp.Size  
JOIN AX_AVABRANDLINE BR ON FP.ItemNumber = BR.ITEMID AND FP.Size = BR.CustomerSize  
WHERE FP.InternalLotNumber = @InternalLotnumber  
**/
GO
PRINT N'Creating Procedure [dbo].[usp_FP_PurchaseOrderMTS_Get]...';


GO
-- =============================================  
-- Author: Muhammad Khalid  
-- Create date: 02/05/2018  
-- Description: Get Active Batch Order Data  
-- =============================================  
  
CREATE PROCEDURE [dbo].[usp_FP_PurchaseOrderMTS_Get]   
 -- Add the parameters for the stored procedure here   
 @BONumber nvarchar(20)  
AS  
BEGIN   
 SET NOCOUNT ON;  
select a.BthOrderId  as PONumber,  
'' as INVENTTRANSID,  
a.BatchId as OrderNumber,  
a.LotVerification as BarcodeVerificationRequired,  
--CustomerSpecification,  
a.PreShipmentPlan as PreshipmentPlan,  
b.ItemId as ItemNumber,  
b.NAME as ItemName,  
b.ITEMTYPE,  
a.QtySched as ItemCases,  
'' as CustomerName,  
a.INNERLABELSET as InnersetLayout,  
a.OuterLabelSetNo as OuterSetLayout,  
a.Size as CustomerSize,  
a.PrintingSize as CUstomerSizeDesc,  
a.GrossWeight,  
a.NETWEIGHT as NettWeight,  
a.InnerboxinCaseNo as CaseCapacity,   
a.PalletCapacity,  
'' as CustomerLotNumber ,  
'' as CustomerReferenceNumber,  
b.GloveCode as GloveCode,  
a.BthOrderId as BatchOrder,  
a.ProdStatus,  
a.ManufacturingDateOn as MANUFACTURINGDATEBASIS,  
1 as POStatus, -- ='Backorder'  
a.HartalegaCommonSize as ItemSize ,  
a.GlovesInnerboxNo as InnerBoxCapacity,  
a.InnerProductCode,  
a.OuterProductCode,  
a.Expiry,  
--BrandName   
a.REFERENCE1  as ProductReferenceNumber,  
a.REFERENCE2 ,  
a.GCLabel as GCLabelPrintingRequired,  
a.AlternateGloveCode1,  
a.AlternateGloveCode2,  
a.AlternateGloveCode3,  
a.SPECIALINNERCODE,  
a.SpecialInnerCharacter as SPECIALINNERCODECHARACTER,  
a.SchedStart as SHIPPINGDATEREQUESTED,  
a.SchedStart as RECEIPTDATEREQUESTED,  
-- Label set Optimization project  
a.InnerDateFormat as InnerLabelSetDateFormat,  
a.OuterDateFormat as OuterLabelSetDateFormat  
from DOT_FloorD365BO a  
inner join DOT_FSItemMaster b on a.ItemId = b.ItemId   
--inner join DOT_FSBrandHeaders c on b.ItemId = c.ItemId  
--inner join DOT_FSBrandLines d on d.ItemId = c.ItemId and a.Size = d.customersize 
WHERE a.BthOrderId = @BONumber and a.MadeToStockStatus = 1
END
GO
PRINT N'Creating Procedure [dbo].[usp_FP_RollBackChangeBatchCardDataCBCI]...';


GO


-- =============================================
-- Author:        Srikanth Balda
-- Create date: 30 Sep 2014
-- Description:    Roll back SP for Change Batch Card - FP
-- CBCI Changes Implementation - Azman K - 27/04/2017
-- =============================================
CREATE PROCEDURE [dbo].[usp_FP_RollBackChangeBatchCardDataCBCI]
    @internalLotnumber nvarchar(15),
    @SerialNumber1 NUMERIC(15,0),
    @SerialNumber1Qty int,
    @SerialNumber2 NUMERIC(15,0) = 0,
    @SerialNumber2Qty int = 0,
    @SerialNumber3 NUMERIC(15,0) = 0,
    @SerialNumber3Qty int = 0
AS
BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.


DECLARE @ChgBatchCardID INT
DECLARE @Innerboxcapacity int
DECLARE @TotalCaseOri int
DECLARE @oldSerialNumber NUMERIC(15,0)
DECLARE @oldSerialNumberQty int


SELECT @ChgBatchCardID = ChangeBatchCardId, @oldSerialNumber = OldSerialNumber, @oldSerialNumberQty = TotalPcs from FPChangeBatchCard where internallotnumber = @internalLotnumber order by ChangeBatchCardId desc


--SET @ChgBatchCardID = (Select TOP(1) ChangeBatchCardId from FPChangeBatchCard where internallotnumber = @internalLotnumber order by ChangeBatchCardId desc)
--SET @oldSerialNumber = (Select TOP(1) OldSerialNumber from FPChangeBatchCard where internallotnumber = @internalLotnumber order by ChangeBatchCardId desc)
--SET @oldSerialNumber = (Select TOP(1) OldSerialNumber from FPChangeBatchCard where internallotnumber = @internalLotnumber order by ChangeBatchCardId desc)


SELECT @Innerboxcapacity = innerboxcapacity from purchaseorderitem POI
join Finalpacking FP on FP.ponumber = POI.Ponumber and FP.ItemNumber = POI.ItemNumber and FP.Size = POI.ItemSize
where FP.internallotnumber = @InternalLotNumber


SELECT @TotalCaseOri = @oldSerialNumberQty / @Innerboxcapacity


update Batch set PackedPcs = PackedPcs-@SerialNumber1Qty where SerialNumber = @SerialNumber1
update Batch set PackedPcs = PackedPcs+@oldSerialNumberQty where SerialNumber = @oldSerialNumber


update FinalPackingBatchInfo set SerialNumber = @oldSerialNumber, BoxesPacked = @TotalCaseOri where SerialNumber = @SerialNumber1


IF (@SerialNumber2Qty > 0)
BEGIN
    update Batch set PackedPcs = PackedPcs-@SerialNumber2Qty where SerialNumber = @SerialNumber2
    DELETE FROM Finalpackingbatchinfo WHERE SerialNumber = @SerialNumber2 AND [InternalLotNumber] = @InternalLotNumber
END


IF (@SerialNumber3Qty > 0)
BEGIN
    update Batch set PackedPcs = PackedPcs-@SerialNumber3Qty where SerialNumber = @SerialNumber3
    DELETE FROM Finalpackingbatchinfo WHERE SerialNumber = @SerialNumber3 AND [InternalLotNumber] = @InternalLotNumber
END


delete from FPChangeBatchCard where ChangeBatchCardId = @ChgBatchCardID
delete from FPChangeBatchCardLine where ChangeBatchCardId = @ChgBatchCardID

DECLARE @stgId bigint = 0
DECLARE @date datetime = GETDATE()

SET @stgId = (SELECT TOP 1 ISNULL(Id, 0) FROM DOT_FloorAxIntParentTable(nolock)
			  WHERE FunctionIdentifier = 'CBCI' AND ProcessingStatus <> 3 AND BatchNumber = @oldSerialNumber AND CONVERT(DATE, CreationTime) = CONVERT(DATE, @date)
			  ORDER BY Id DESC
			 )

IF (@stgId > 0)
BEGIN 
	UPDATE DOT_PickingList SET IsDeleted = 1, DeletionTime = @date, DeleterUserId = 1 WHERE ParentRefRecId = @stgId
	UPDATE DOT_FloorAxIntParentTable SET IsDeleted = 1, DeletionTime = @date, DeleterUserId = 1 WHERE Id = @stgId

	UPDATE AXPostingLog SET ServiceName = 'CBCI-DEL', SerialNumber = (990000000000 + @oldSerialNumber) WHERE Id IN 
		(SELECT TOP 1 Id FROM AXPostingLog WHERE SerialNumber = @oldSerialNumber AND ServiceName = 'CBCI' AND CONVERT(DATE, CreationDate) = CONVERT(DATE, @date))
END

--update FinalPackingBatchInfo set SerialNumber = @oldSerialNumber where SerialNumber = @newSerialNumber

END
GO
PRINT N'Creating Procedure [dbo].[usp_FP_SELECT_FirstGradePOwithoutSOList]...';


GO
-- =============================================  
-- Author:  Muhammad Khalid
-- Create date: 4 June 2018  
-- Description: Get Active First Grade PO without SO list    
-- =====================================================================     
CREATE PROCEDURE [dbo].[usp_FP_SELECT_FirstGradePOwithoutSOList]  
AS  
BEGIN  

 SET NOCOUNT ON;  
    -- Insert statements for procedure here  
  SELECT a.BthOrderId, a.ProdStatus,c.ItemType, a.BatchId as CustomerRef,a.QtySched,fp.CasesPacked  
  from DOT_FloorD365BO a 
  -- left join DOT_FloorSales b on a.BatchId = b.CustomerRef 
  left join DOT_FSItemMaster c on a.ItemId = c.ItemId
   left join  (select sum(fp.CasesPacked) as CasesPacked,bo2.BthOrderId from finalpacking FP WITH (NOLOCK)           
				 join purchaseorderitem POIN WITH (NOLOCK) on POIN.ponumber = FP.ponumber and POIN.Itemnumber = FP.itemnumber and FP.Size = POIN.ItemSize          
				 join DOT_FloorD365BO bo2 WITH (NOLOCK) on bo2.BthOrderId = fp.FGBatchOrderNo and FP.Size = bo2.Size and bo2.IsDeleted=0          
				 WHERE bo2.ProdStatus IN ('ReportedFinished','StartedUp','Released') group by bo2.BthOrderId) as fp        
				on fp.BthOrderId = a.BthOrderId   
  WHERE -- b.CustomerRef is null 
  a.prodPoolId = 'FG' and a.WarehouseId = 'MTS-FG' -- warehouse = “MTS-FG”, Production Pool = “FG” are Made to stock batch order, update on 22/11/2021,Max He
  and a.ProdStatus = 'StartedUp' and  c.ItemType = 5 --=>'FG'
  and a.ReworkBatch = 'No' and a.IsDeleted=0
  and a.MadeToStockStatus = 1
  GROUP By a.BthOrderId,a.ProdStatus, a.BatchId, c.ItemType,     
   a.QtySched,      
   fp.CasesPacked     
  having a.QtySched - ISNULL(fp.CasesPacked,0) > 0 --filter out full packed FGBO     
END
GO
PRINT N'Creating Procedure [dbo].[USP_GET_GloveDescription]...';


GO
-- =======================================================

-- Name:			[USP_GET_GloveDescription]

-- Purpose: 		Gets Desc by GloveType

-- =======================================================

-- Change History

-- Date         Author     Comments

-- -----        ------     -----------------------------

-- 28/05/2018 	Azrul	   SP altered.
-- =======================================================

CREATE PROCEDURE [dbo].[USP_GET_GloveDescription]
(
                @GloveType NVARCHAR(100)
)
AS
BEGIN
        IF ISNUMERIC(@GloveType) = 1
                        SELECT b.Name from DOT_FSGloveCode a join DOT_FSItemMaster b on a.ItemRecordId = b.Id where a.Barcode = @GloveType
        ELSE
                        SELECT a.GloveCategory from DOT_FSGloveCode a join DOT_FSItemMaster b on a.ItemRecordId = b.Id where b.ItemId = @GloveType
END
GO
PRINT N'Creating Procedure [dbo].[USP_GET_GlovesDescription]...';


GO
-- =======================================================

-- Name:			[USP_GET_GlovesDescription]

-- Purpose: 		Gets Desc by GloveType

-- =======================================================

-- Change History

-- Date         Author     Comments

-- -----        ------     -----------------------------

-- 28/05/2018 	Azrul	   SP altered.
-- =======================================================

CREATE PROCEDURE [dbo].[USP_GET_GlovesDescription]
(
                @GloveType NVARCHAR(100)
)
AS
BEGIN
        IF ISNUMERIC(@GloveType) = 1
                        SELECT b.Name from DOT_FSGloveCode a join DOT_FSItemMaster b on a.ItemRecordId = b.Id where a.Barcode = @GloveType
        ELSE
                        SELECT a.GloveCategory from DOT_FSGloveCode a join DOT_FSItemMaster b on a.ItemRecordId = b.Id where b.ItemId = @GloveType
END
GO
PRINT N'Creating Procedure [dbo].[usp_grp_GenerateInventory360]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[usp_grp_GenerateInventory360]
	@PONumber nvarchar(20),
	@PalletId nvarchar(8)

AS
BEGIN

	DECLARE @PO nvarchar(20)
	DECLARE @PL nvarchar(8)

	SET @PO = LTRIM(RTRIM(@PONumber))
	SET @PL = LTRIM(RTRIM(@PalletId))

	SELECT DISTINCT FP.InternalLotNumber + REPLACE(STR(POIC.CaseNumber,5),' ','0') As CartonBarcode, POIC.CaseNumber as CartonNumber,
	 FP.InternalLotNumber as IntLotNo, FP.ItemNumber as FGCode
	, POIC.CustomerSize as [Size], POI.CaseCapacity as InnerBoxCarton
	, POI.InnerBoxCapacity as InnerBoxPackingSize, (POI.CaseCapacity * POI.InnerBoxCapacity) as Capacity
	, FP.ManufacturingDate as BatchMfgDate, FP.ExpiryDate as ExpiryDate, 
		(select TOP 1 QAIDate FROM FinalPackingBatchInfo FPBI (NOLOCK)
		INNER JOIN QAI Q (NOLOCK) ON Q.SerialNumber = FPBI.SerialNumber
		WHERE InternalLotNumber = FP.InternalLotNumber
		AND (Q.QAIScreenName IN ('QAIScan','QAIScanInnerTenPcs') OR (Q.QAIScreenName IS NULL))
		ORDER BY QAIDate ASC) as QAIDate,
	 POI.PONumber as ForecastSO, POI.CustomerReferenceNumber as ForecastWO, POIC.PalletId as PalletID
	FROM FinalPacking FP (NOLOCK)
	INNER JOIN PurchaseOrderItem POI (NOLOCK) ON FP.PONumber = POI.PONumber AND FP.ItemNumber = FP.ItemNumber AND FP.Size = POI.ItemSize
	INNER JOIN PurchaseOrderItemCases POIC (NOLOCK) ON FP.PONumber = POIC.PONumber --AND FP.PalletId = POIC.PalletId 
	AND FP.ItemNumber = POIC.ItemNumber AND FP.Size = POIC.Size AND FP.InternalLotNumber = POIC.InternalotNumber AND POI.CustomerSize = POIC.CustomerSize
	WHERE POI.PONumber = @PO AND POIC.PalletId = @PL
	ORDER BY CaseNumber ASC
END
GO
PRINT N'Creating Procedure [dbo].[USP_MG_Get1MonthBatchCard]...';


GO


CREATE PROCEDURE [dbo].USP_MG_Get1MonthBatchCard  
AS  
BEGIN   
SET NOCOUNT ON  
 SELECT b.SerialNumber,b.BatchCardDate  
 from batch b  with (nolock) inner join qai q  with (nolock) on b.SerialNumber = q.SerialNumber and q.qaiscreenname = 'QAIScanInnerTenPcs' and q.packingsize is not null  
 and b.SerialNumber in ('2190218076',
'2190217944',
'2190217943',
'2190218077',
'2190218176',
'2190218175',
'2190218254',
'2190218253',
'2190218394',
'2190218393',
'2190218474',
'2190218473',
'2190218578',
'2190218706',
'2190218705',
'2190218790',
'2190218791',
'2190218899',
'2190218900',
'2190219023',
'2190219022',
'2190219133',
'2190219134',
'2190219238',
'2190219237',
'2190219348',
'2190219347',
'2190220399',
'2190220508',
'2190220398',
'2190220509',
'2190220285',
'2190220716',
'2190220715',
'2190220612',
'2190220611',
'2190220286',
'2190220838',
'2190220839',
'2190221017',
'2190221016',
'2190220918',
'2190220917',
'2190221118',
'2190221219',
'2190221218',
'2190221325',
'2190221324',
'2190221439',
'2190221440',
'2190221551',
'2190221552',
'2190221673',
'2190221672',
'2190221785',
'2190221786',
'2190221117',
'2190221901',
'2190221900',
'2190222008',
'2190222007',
'2190222110',
'2190222109',
'2190222342',
'2190222343',
'2190222213',
'2190222214',
'2190222453',
'2190222454',
'2190222559',
'2190222676',
'2190222675',
'2190222783',
'2190222782',
'2190222901',
'2190222900',
'2190223022',
'2190223021',
'2190223234',
'2190223233',
'2190223128',
'2190223127',
'2190223346',
'2190223345',
'2190223449',
'2190223448',
'2190223553',
'2190223552',
'2190223660',
'2190223659',
'2190223761',
'2190223762',
'2190223865',
'2190223866',
'2190223976',
'2190223977',
'2190224079',
'2190224078',
'2190224195',
'2190222560',
'2190224194',
'2190224313',
'2190224312',
'2190220713',
'2190218079',
'2190218476',
'2190223236',
'2190223235',
'2190223348',
'2190223347',
'2190223451',
'2190223450',
'2190223555',
'2190223554',
'2190223661',
'2190223868',
'2190223867',
'2190223763',
'2190223764',
'2190223978',
'2190224081',
'2190224080',
'2190223979',
'2190224197',
'2190224196',
'2190224315',
'2190224314',
'2190223662')
 order by b.batchcarddate  
END
GO
PRINT N'Creating Procedure [dbo].[USP_MG_GetDefaultDataSet]...';


GO
create PROCEDURE [dbo].USP_MG_GetDefaultDataSet
	@batchcardno varchar(100)
AS
BEGIN	
SET NOCOUNT ON
	SELECT @batchcardno AS SerialNumber
END
GO
PRINT N'Creating Procedure [dbo].[USP_MG_GetFunctionIdentifier]...';


GO
create PROCEDURE [dbo].USP_MG_GetFunctionIdentifier
	@batchcardno varchar(100)
AS
BEGIN	
SET NOCOUNT ON
	SELECT FunctionIdentifier,Sequence from  AVAFLOORAXINTPARENTTABLE with (nolock) where BATCHNUMBER = @BatchCardNo Order by SEQUENCE
END
GO
PRINT N'Creating Procedure [dbo].[USP_MG_InsertFGStaging]...';


GO
create PROCEDURE [dbo].USP_MG_InsertFGStaging
	@batchcardno varchar(100),
	@functionIdentifier varchar(100),
	@sequence int
AS
BEGIN	
	SET NOCOUNT ON
	DECLARE @PARENTREFRECID varchar(100)
	DECLARE @strOutput varchar(100)
	INSERT INTO [dbo].[DOT_FLOORAXINTPARENTTABLE] ([BATCHCARDNUMBER],[BATCHNUMBER],[CREATIONTIME],[CREATORUSERID],[DELETERUSERID],[DELETIONTIME],[ERRORMESSAGE],[FSIDENTIFIER],
	[FUNCTIONIDENTIFIER],[ISDELETED],[LASTMODIFICATIONTIME],[LASTMODIFIERUSERID],[PROCESSINGSTATUS],[PLANTNO],[PalletId],[REFERENCEBATCHNUMBER1],[REFERENCEBATCHNUMBER2],[REFERENCEBATCHNUMBER3],
	[REFERENCEBATCHNUMBER4],[REFERENCEBATCHNUMBER5],[REFERENCEBATCHSEQUENCE1],[REFERENCEBATCHSEQUENCE2],[REFERENCEBATCHSEQUENCE3],[REFERENCEBATCHSEQUENCE4],[REFERENCEBATCHSEQUENCE5],
	[SEQUENCE],[IsMigratedFromAX6]) 

	SELECT ax.BATCHCARDNUMBER,ax.BATCHNUMBER,GETDATE() as CREATIONTIME,1 as CREATORUSERID,NULL as DELETERUSERID,NULL as DELETIONTIME,'' as ERRORMESSAGE,NEWID( ) as FSIDENTIFIER,
	@functionIdentifier as FUNCTIONIDENTIFIER,0 as ISDELETED,GETDATE() as LASTMODIFICATIONTIME,1 as LASTMODIFIERUSERID,3 as PROCESSINGSTATUS,SUBSTRING(b.RESOURCE_,0,3) as PLANTNO,
	'' as PalletId,ax.REFERENCEBATCHNUMBER1,ax.REFERENCEBATCHNUMBER2,ax.REFERENCEBATCHNUMBER3,ax.REFERENCEBATCHNUMBER4,ax.REFERENCEBATCHNUMBER5,ax.REFERENCEBATCHSEQUENCE1,
	ax.REFERENCEBATCHSEQUENCE2,ax.REFERENCEBATCHSEQUENCE3,ax.REFERENCEBATCHSEQUENCE4,ax.REFERENCEBATCHSEQUENCE5,SEQUENCE,1 as IsMigratedFromAX6
	from AVAFLOORAXINTPARENTTABLE ax with (nolock) inner join AVAFGJournalTable b with (nolock) on ax.recid = b.PARENTREFRECID
	where ax.BATCHNUMBER = @batchcardno and ax.FUNCTIONIDENTIFIER = @functionIdentifier and ax.SEQUENCE = @sequence
	SET @PARENTREFRECID = (SELECT @@IDENTITY)

	INSERT INTO [dbo].[DOT_FGJournalTable]  ([BatchOrderNumber],[Configuration],[CreationTime],[CustomerLotNumber],[CustomerPO],[CustomerReference],[InnerLotNumber],[IsDeleted],
	[OuterLotNumber],[PalletNumber],[PostingDateTime],[Preshipment],[PreshipmentCases],[Quantity],[ReferenceItemNumber],[Resource],[SalesOrderNumber],[Warehouse],[ParentRefRecId],
	[Location],[IsWTS],[ItemNumber],[RefNumberOfPieces1],[RefNumberOfPieces2],[RefNumberOfPieces3],[RefNumberOfPieces4],[RefNumberOfPieces5],[RefItemNumber1],[RefItemNumber2],
	[RefItemNumber3],[RefItemNumber4],[RefItemNumber5])
	
	select '' as BatchOrderNumber,a.CONFIGURATION,a.POSTINGDATETIME as CreationTime, a.CUSTOMERLOTNUMBER,a.CUSTOMERPO,a.CUSTOMERREFERENCE,a.INNERLOTNUMBER,0 as IsDeleted,
	a.OUTERLOTNUMBER,'' as PalletNumber,a.POSTINGDATETIME,a.PRESHIPMENT,a.PRESHIPMENTCASES,a.QUANTITY,a.REFERENCEITEMNUMBER,a.RESOURCE_ as Resource,a.SALESORDERNUMBER,a.WAREHOUSE,
	@PARENTREFRECID as ParentRefRecId,'' as Location,0 as IsWTS,a.REFERENCEITEMNUMBER as ItemNumber, a.RefNumberOfPieces1,a.REFNUMBEROFPIECES2,a.REFNUMBEROFPIECES3,a.REFNUMBEROFPIECES4,
	a.REFNUMBEROFPIECES5,a.REFCONFIGURATION1 as RefItemNumber1, a.REFCONFIGURATION2 as RefItemNumber2, a.REFCONFIGURATION3 as RefItemNumber3, a.REFCONFIGURATION4 as RefItemNumber4, 
	a.REFCONFIGURATION5 as RefItemNumber5
	FROM AVAFGJournalTable a  with (nolock)
	inner join AVAFLOORAXINTPARENTTABLE ax with (nolock) on a.parentrefrecid = ax.recid
	where ax.BATCHNUMBER=@batchcardno  and ax.FUNCTIONIDENTIFIER = @functionIdentifier and ax.SEQUENCE = @sequence

	SET @strOutput = @functionIdentifier + ' inserted into FG staging for batch card: ' + @batchcardno
	Select @strOutput
END
GO
PRINT N'Creating Procedure [dbo].[USP_MG_InsertMovStaging]...';


GO
create PROCEDURE [dbo].USP_MG_InsertMovStaging
	@parentrefrecid int,
	@batchcardno varchar(100),
	@functionIdentifier varchar(100)
AS
BEGIN	
SET NOCOUNT ON
	 INSERT INTO [dbo].[DOT_MOVEMENTJOURNALCHILD]  ([CREATIONTIME]  ,[CREATORUSERID],[DELETERUSERID],[DELETIONTIME],[ISDELETED],[LASTMODIFICATIONTIME],
	 [LASTMODIFIERUSERID],[PARENTREFRECID],[POSTINGDATEANDTIME]  ,[RESOURCEGROUP],[SHIFT] ,[WAREHOUSE],[LOCATION],[ITEMNUMBER],[CONFIGURATION]) 
	 
	 SELECT a.CREATEDATEANDTIME as [CREATIONTIME], 1 as [CREATORUSERID],NULL as [DELETERUSERID],NULL as [DELETIONTIME],0 as [ISDELETED],a.CREATEDDATETIME as [LASTMODIFICATIONTIME],
	 1 as [LASTMODIFIERUSERID], @parentrefrecid as [PARENTREFRECID], a.POSTINGDATETIME, a.RESOURCEGROUP, a.SHIFT, a.WAREHOUSE, 
	 case when @functionIdentifier = 'OREJ' then '' else 'PN' end as Location, a.ITEMNUMBER, a.CONFIGURATION
	 FROM AVAMOVEMENTJOURNALCHILD a  with (nolock)
	 inner join AVAFLOORAXINTPARENTTABLE ax with (nolock) on a.parentrefrecid = ax.recid
	 where ax.BATCHNUMBER=@batchcardno  and ax.FUNCTIONIDENTIFIER = @functionIdentifier
	 select QCType from batch with (nolock) Where SerialNumber = @batchcardno
END
GO
PRINT N'Creating Procedure [dbo].[USP_MG_InsertParentStaging]...';


GO
create PROCEDURE [dbo].USP_MG_InsertParentStaging
	@batchcardno varchar(100),
	@functionIdentifier varchar(100)
AS
BEGIN	
SET NOCOUNT ON
	INSERT INTO [dbo].[DOT_FLOORAXINTPARENTTABLE] ([BATCHCARDNUMBER],[BATCHNUMBER],[CREATIONTIME],[CREATORUSERID],[DELETERUSERID],[DELETIONTIME],[ERRORMESSAGE],[FSIDENTIFIER],
	[FUNCTIONIDENTIFIER],[ISDELETED],[LASTMODIFICATIONTIME],[LASTMODIFIERUSERID],[PROCESSINGSTATUS],[PLANTNO],[REFERENCEBATCHNUMBER1],[REFERENCEBATCHNUMBER2],[REFERENCEBATCHNUMBER3],
	[REFERENCEBATCHNUMBER4],[REFERENCEBATCHNUMBER5],[REFERENCEBATCHSEQUENCE1],[REFERENCEBATCHSEQUENCE2],[REFERENCEBATCHSEQUENCE3],[REFERENCEBATCHSEQUENCE4],[REFERENCEBATCHSEQUENCE5],
	[SEQUENCE],[IsMigratedFromAX6])  

	SELECT ax.BATCHCARDNUMBER,ax.BATCHNUMBER,GETDATE() as CREATIONTIME,1 as CREATORUSERID,NULL as DELETERUSERID,NULL as DELETIONTIME,'' as ERRORMESSAGE,NEWID( ) as FSIDENTIFIER,ax.FUNCTIONIDENTIFIER,
	0 as ISDELETED,GETDATE() as LASTMODIFICATIONTIME,1 as LASTMODIFIERUSERID,3 as PROCESSINGSTATUS,dbo.Ufn_DOT_GetLocationName(b.LocationId) as PLANTNO,
	NULL as REFERENCEBATCHNUMBER1,NULL as REFERENCEBATCHNUMBER2,
	NULL as REFERENCEBATCHNUMBER3,NULL as REFERENCEBATCHNUMBER4,NULL as REFERENCEBATCHNUMBER5,0 as REFERENCEBATCHSEQUENCE1,0 as REFERENCEBATCHSEQUENCE2,0 as REFERENCEBATCHSEQUENCE3,0 as REFERENCEBATCHSEQUENCE4,
	0 as REFERENCEBATCHSEQUENCE5,SEQUENCE,1 as IsMigratedFromAX6
	from AVAFLOORAXINTPARENTTABLE ax with (nolock) inner join batch b with (nolock) on ax.batchnumber = convert(nvarchar,b.SerialNumber)
	where ax.BATCHNUMBER = @batchcardno and ax.FUNCTIONIDENTIFIER = @functionIdentifier and ax.REFERENCEBATCHNUMBER1 <> 'RESAMPLE'
	SELECT @@IDENTITY
END
GO
PRINT N'Creating Procedure [dbo].[USP_MG_InsertPickgListStaging]...';


GO
create PROCEDURE [dbo].USP_MG_InsertPickgListStaging
	@batchcardno varchar(100),
	@functionIdentifier varchar(100)
AS
BEGIN	
SET NOCOUNT ON
	DECLARE @PARENTREFRECID varchar(100)
	INSERT INTO [dbo].[DOT_FLOORAXINTPARENTTABLE] ([BATCHCARDNUMBER],[BATCHNUMBER],[CREATIONTIME],[CREATORUSERID],[DELETERUSERID],[DELETIONTIME],[ERRORMESSAGE],[FSIDENTIFIER],
	[FUNCTIONIDENTIFIER],[ISDELETED],[LASTMODIFICATIONTIME],[LASTMODIFIERUSERID],[PROCESSINGSTATUS],[PLANTNO],[PalletId],[REFERENCEBATCHNUMBER1],[REFERENCEBATCHNUMBER2],[REFERENCEBATCHNUMBER3],
	[REFERENCEBATCHNUMBER4],[REFERENCEBATCHNUMBER5],[REFERENCEBATCHSEQUENCE1],[REFERENCEBATCHSEQUENCE2],[REFERENCEBATCHSEQUENCE3],[REFERENCEBATCHSEQUENCE4],[REFERENCEBATCHSEQUENCE5],
	[SEQUENCE],[IsMigratedFromAX6]) 

	SELECT ax.BATCHCARDNUMBER,ax.BATCHNUMBER,GETDATE() as CREATIONTIME,1 as CREATORUSERID,NULL as DELETERUSERID,NULL as DELETIONTIME,'' as ERRORMESSAGE,NEWID( ) as FSIDENTIFIER,
	@functionIdentifier as FUNCTIONIDENTIFIER,0 as ISDELETED,GETDATE() as LASTMODIFICATIONTIME,1 as LASTMODIFIERUSERID,3 as PROCESSINGSTATUS,SUBSTRING(b.WAREHOUSE,0,3) as PLANTNO,
	'' as PalletId,ax.REFERENCEBATCHNUMBER1,ax.REFERENCEBATCHNUMBER2,ax.REFERENCEBATCHNUMBER3,ax.REFERENCEBATCHNUMBER4,ax.REFERENCEBATCHNUMBER5,ax.REFERENCEBATCHSEQUENCE1,
	ax.REFERENCEBATCHSEQUENCE2,ax.REFERENCEBATCHSEQUENCE3,ax.REFERENCEBATCHSEQUENCE4,ax.REFERENCEBATCHSEQUENCE5,SEQUENCE,1 as IsMigratedFromAX6
	from AVAFLOORAXINTPARENTTABLE ax with (nolock) inner join AVAMOVEMENTJOURNALCHILD b with (nolock) on ax.recid = b.PARENTREFRECID
	where ax.BATCHNUMBER = @batchcardno and ax.FUNCTIONIDENTIFIER = @functionIdentifier
	SET @PARENTREFRECID = (SELECT @@IDENTITY)

	INSERT INTO [dbo].[DOT_PickingList]  ([Configuration],[CreateDateAndTime],[CreationTime],[CreatorUserId],[DeleterUserId],[DeletionTime],[InternalReferenceNumber],[IsDeleted]
	,[LastModificationTime],[LastModifierUserId],[Location],[PSIReworkOrderNo],[ParentRefRecId],[PickListJournalId],[PostingDateTime],[QCType],[OldBatchQty],[SalesOrderNumber]
	,[TenPcsWt],[Warehouse],[ItemNumber],[ReferenceItemNumber],[RefNumberOfPieces1],[RefNumberOfPieces2],[RefNumberOfPieces3]) 
	 
	 SELECT a.CONFIGURATION,a.CREATEDATEANDTIME as CreateDateAndTime,a.CREATEDATEANDTIME as CreationTime, 1 as CreatorUserId, null as DeleterUserId, null as DeletionTime,
	 '' as InternalReferenceNumber, 0 as isDeleted,a.CREATEDDATETIME as LastModificationTime, 1 as LastModifierUserId,null as Location,'' as PSIReworkOrderNo,
	 @PARENTREFRECID as ParentRefRecId,null as PickListJournalId,a.POSTINGDATETIME,QCTYPE,a.QUANTITY as OldBatchQty, a.SALESORDERNUMBER,a.TENPCSWT as TenPcsWt, a.WAREHOUSE,'' as ItemNumber,
	 a.REFERENCEITEMNUMBER, 0 as [RefNumberOfPieces1], 0 as [RefNumberOfPieces2], 0 as [RefNumberOfPieces3]
	 FROM AVAMOVEMENTJOURNALCHILD a  with (nolock)
	 inner join AVAFLOORAXINTPARENTTABLE ax with (nolock) on a.parentrefrecid = ax.recid
	 where ax.BATCHNUMBER=@batchcardno  and ax.FUNCTIONIDENTIFIER = @functionIdentifier
END
GO
PRINT N'Creating Procedure [dbo].[USP_MG_InsertRafStaging]...';


GO
create PROCEDURE [dbo].USP_MG_InsertRafStaging
	@parentrefrecid int,
	@batchcardno varchar(100),
	@functionIdentifier varchar(100)
AS
BEGIN	
SET NOCOUNT ON
	 INSERT INTO [dbo].[DOT_RAFSTGTABLE]  ([BATCHORDERNUMBER],[BatchWeight],[CONFIGURATION],[CREATIONTIME],[CREATORUSERID],[DELETERUSERID],[DELETIONTIME],[HBBATCHNUMBER],[ISDELETED],
	 [ITEMNUMBER],[LASTMODIFICATIONTIME],[LASTMODIFIERUSERID],[PARENTREFRECID],[PickListJournalId],[POSTINGDATETIME],[QCTYPE],[RAFGOODQTY],[RAFHBSAMPLE],[RAFVTSAMPLE],[RAFWTSAMPLE],
	 [RAFJournalId],[RESOURCE],[RouteCardJournalId],[SAMPLEWAREHOUSE],[SHIFT],[Weightof10Pcs],[VTBATCHNUMBER],[WTBATCHNUMBER],[WAREHOUSE],[LOCATION],[RejectedQuantity],[SecondGradeQuantity],
	 [RejectedSampleQuantity],[Quantity],[RouteCategory]) 

	select '' AS [BATCHORDERNUMBER],BatchWT as [BatchWeight],[CONFIGURATION],a.CREATEDATEANDTIME as CREATIONTIME,1 as CREATORUSERID,NULL as DELETERUSERID,NULL as DELETIONTIME,
	'' as [HBBATCHNUMBER],0 as [ISDELETED],[ITEMNUMBER],a.CREATEDATEANDTIME as [LASTMODIFICATIONTIME],1 as [LASTMODIFIERUSERID],@parentrefrecid as [PARENTREFRECID],'' as [PickListJournalId],
	[POSTINGDATETIME],a.[QCTYPE],[RAFGOODQTY],[RAFHBSAMPLE],[RAFVTSAMPLE],[RAFWTSAMPLE],'' as  [RAFJournalId],
	case when @functionIdentifier = 'HBC' then dbo.Ufn_DOT_GetLocationName(b.LocationId)+b.LineId+b.TierSide else '' end as [RESOURCE],
	'' as [RouteCardJournalId],[SAMPLEWAREHOUSE],[SHIFT],TenPcsWt as [Weightof10Pcs],[VTBATCHNUMBER],[WTBATCHNUMBER],[WAREHOUSE],
	Case when @functionIdentifier = 'SOBC' then 'QC' else 'PN' end as [LOCATION],
	a.REJECTEDQTY as [RejectedQuantity],a.SECGRADEQTY as[SecondGradeQuantity],a.REJECTEDSAMPLEQTY as [RejectedSampleQuantity],0 as [Quantity],
	(Select RouteCategory from DOT_FSQCTypeTable with (nolock) where QCType = a.qctype) as [RouteCategory]
	from AVARAFSTGTABLE a  with (nolock)
	inner join AVAFLOORAXINTPARENTTABLE ax with (nolock) on a.parentrefrecid = ax.recid
	inner join batch b with (nolock) on ax.BATCHNUMBER = convert(nvarchar,b.SerialNumber)
	where ax.BATCHNUMBER=@batchcardno  and ax.FUNCTIONIDENTIFIER = @functionIdentifier and ax.REFERENCEBATCHNUMBER1 <> 'RESAMPLE'
	SELECT QCType from [DOT_RAFSTGTABLE] with (nolock) Where Id = @@IDENTITY
END
GO
PRINT N'Creating Procedure [dbo].[USP_MG_InsertResampling]...';


GO
create PROCEDURE [dbo].USP_MG_InsertResampling
	@batchcardno varchar(100)
AS
BEGIN	
SET NOCOUNT ON
	DECLARE @PARENTREFRECID varchar(100)
	INSERT INTO [dbo].[DOT_FLOORAXINTPARENTTABLE] ([BATCHCARDNUMBER],[BATCHNUMBER],[CREATIONTIME],[CREATORUSERID],[DELETERUSERID],[DELETIONTIME],[ERRORMESSAGE],[FSIDENTIFIER],
	[FUNCTIONIDENTIFIER],[ISDELETED],[LASTMODIFICATIONTIME],[LASTMODIFIERUSERID],[PROCESSINGSTATUS],[PLANTNO],[REFERENCEBATCHNUMBER1],[REFERENCEBATCHNUMBER2],[REFERENCEBATCHNUMBER3],
	[REFERENCEBATCHNUMBER4],[REFERENCEBATCHNUMBER5],[REFERENCEBATCHSEQUENCE1],[REFERENCEBATCHSEQUENCE2],[REFERENCEBATCHSEQUENCE3],[REFERENCEBATCHSEQUENCE4],[REFERENCEBATCHSEQUENCE5],
	[SEQUENCE],[IsMigratedFromAX6])  

	SELECT ax.BATCHCARDNUMBER,ax.BATCHNUMBER,GETDATE() as CREATIONTIME,1 as CREATORUSERID,NULL as DELETERUSERID,NULL as DELETIONTIME,'' as ERRORMESSAGE,NEWID( ) as FSIDENTIFIER,ax.FUNCTIONIDENTIFIER,
	0 as ISDELETED,GETDATE() as LASTMODIFICATIONTIME,1 as LASTMODIFIERUSERID,3 as PROCESSINGSTATUS,dbo.Ufn_DOT_GetLocationName(b.LocationId) as PLANTNO,
	ax.REFERENCEBATCHNUMBER1 as REFERENCEBATCHNUMBER1,NULL as REFERENCEBATCHNUMBER2,
	NULL as REFERENCEBATCHNUMBER3,NULL as REFERENCEBATCHNUMBER4,NULL as REFERENCEBATCHNUMBER5,0 as REFERENCEBATCHSEQUENCE1,0 as REFERENCEBATCHSEQUENCE2,0 as REFERENCEBATCHSEQUENCE3,0 as REFERENCEBATCHSEQUENCE4,
	0 as REFERENCEBATCHSEQUENCE5,SEQUENCE,1 as IsMigratedFromAX6
	from AVAFLOORAXINTPARENTTABLE ax with (nolock) inner join batch b with (nolock) on ax.batchnumber = convert(nvarchar,b.SerialNumber)
	where ax.BATCHNUMBER = @batchcardno and ax.FUNCTIONIDENTIFIER = 'HBC' and ax.REFERENCEBATCHNUMBER1 = 'RESAMPLE'
	SET @PARENTREFRECID = (SELECT @@IDENTITY)

	 INSERT INTO [dbo].[DOT_RAFSTGTABLE]  ([BATCHORDERNUMBER],[BatchWeight],[CONFIGURATION],[CREATIONTIME],[CREATORUSERID],[DELETERUSERID],[DELETIONTIME],[HBBATCHNUMBER],[ISDELETED],
	 [ITEMNUMBER],[LASTMODIFICATIONTIME],[LASTMODIFIERUSERID],[PARENTREFRECID],[PickListJournalId],[POSTINGDATETIME],[QCTYPE],[RAFGOODQTY],[RAFHBSAMPLE],[RAFVTSAMPLE],[RAFWTSAMPLE],
	 [RAFJournalId],[RESOURCE],[RouteCardJournalId],[SAMPLEWAREHOUSE],[SHIFT],[Weightof10Pcs],[VTBATCHNUMBER],[WTBATCHNUMBER],[WAREHOUSE],[LOCATION],[RejectedQuantity],[SecondGradeQuantity],
	 [RejectedSampleQuantity],[Quantity],[RouteCategory]) 

	select '' AS [BATCHORDERNUMBER],BatchWT as [BatchWeight],[CONFIGURATION],a.CREATEDATEANDTIME as CREATIONTIME,1 as CREATORUSERID,NULL as DELETERUSERID,NULL as DELETIONTIME,
	'' as [HBBATCHNUMBER],0 as [ISDELETED],[ITEMNUMBER],a.CREATEDATEANDTIME as [LASTMODIFICATIONTIME],1 as [LASTMODIFIERUSERID],@PARENTREFRECID as [PARENTREFRECID],'' as [PickListJournalId],
	[POSTINGDATETIME],a.[QCTYPE],[RAFGOODQTY],[RAFHBSAMPLE],[RAFVTSAMPLE],[RAFWTSAMPLE],'' as  [RAFJournalId],dbo.Ufn_DOT_GetLocationName(b.LocationId)+b.LineId+b.TierSide as [RESOURCE],
	'' as [RouteCardJournalId],[SAMPLEWAREHOUSE],[SHIFT],TenPcsWt as [Weightof10Pcs],[VTBATCHNUMBER],[WTBATCHNUMBER],[WAREHOUSE],'PN' as [LOCATION],a.REJECTEDQTY as [RejectedQuantity],
	a.SECGRADEQTY as[SecondGradeQuantity],a.REJECTEDSAMPLEQTY as [RejectedSampleQuantity],0 as [Quantity],
	(Select RouteCategory from DOT_FSQCTypeTable with (nolock) where QCType = a.qctype) as [RouteCategory]
	from AVARAFSTGTABLE a  with (nolock)
	inner join AVAFLOORAXINTPARENTTABLE ax with (nolock) on a.parentrefrecid = ax.recid
	inner join batch b with (nolock) on ax.BATCHNUMBER = convert(nvarchar,b.SerialNumber)
	where ax.BATCHNUMBER=@batchcardno  and ax.FUNCTIONIDENTIFIER = 'hbc' and ax.REFERENCEBATCHNUMBER1 = 'RESAMPLE'
	SELECT QCType from [DOT_RAFSTGTABLE] with (nolock) Where Id = @@IDENTITY
END
GO
PRINT N'Creating Procedure [dbo].[USP_MG_InsertTranfStaging]...';


GO
create PROCEDURE [dbo].USP_MG_InsertTranfStaging
	@parentrefrecid int,
	@batchcardno varchar(100),
	@functionIdentifier varchar(100)
AS
BEGIN	
SET NOCOUNT ON
	 INSERT INTO [dbo].[DOT_TransferJournal]  ([BatchCardNumber],[BatchNumber],[ReferenceItemNumber],[Configuration],[CreationTime],[CreatorUserId],[DeleterUserId],[DeletionTime],[Formula],
	 [IsDeleted],[ItemNumber],[LastModificationTime],[LastModifierUserId],[Location],[ParentRefRecId],[Quantity],[ScanInDateTime],[ScanOutDateTime],[TransferJournalId],[Warehouse],
	 [IsOrignalTemppack],[FGBatchOrderNumber]) 

	 SELECT b.BatchNumber as BATCHCARDNUMBER,SerialNumber as BATCHNUMBER,'' as ReferenceItemNumber,a.Configuration,a.CREATEDATEANDTIME as CreationTime,1 as CreatorUserId,
	 NULL as DeleterUserId, NULL as DeletionTime,'' As Formula,0 as IsDeleted,a.ITEMNUMBER,a.CREATEDATEANDTIME as LastModificationTime,1 as LastModifierUserId,
	 'PT' as Location,@parentrefrecid,a.RAFGOODQTY as Quantity,a.POSTINGDATETIME as ScanInDateTime,a.POSTINGDATETIME as ScanOutDateTime,'' as TransferJournalId,
     dbo.Ufn_DOT_GetLocationName(b.LocationId)+'-PROD' as WAREHOUSE,--TODO for STPI
	 0 as IsOrignalTemppack,'' as FGBatchOrderNumber FROM AVARAFStgTable a  with (nolock)
	 inner join AVAFLOORAXINTPARENTTABLE ax with (nolock) on a.parentrefrecid = ax.recid
	 inner join batch b with (nolock) on ax.BATCHNUMBER = convert(nvarchar,b.SerialNumber)
	 where ax.BATCHNUMBER=@batchcardno  and ax.FUNCTIONIDENTIFIER = @functionIdentifier
	 select QCType from DOT_FSQCTypeTable where Description = 'PT' and (@functionIdentifier = 'SPBC')
END
GO
PRINT N'Creating Procedure [dbo].[USP_MG_InsertTranfStagingSTPIO]...';


GO
create PROCEDURE [dbo].USP_MG_InsertTranfStagingSTPIO
	@batchcardno varchar(100)
AS
BEGIN	
	SET NOCOUNT ON
	DECLARE @startSeq INT;
	DECLARE @endSeq INT;
	DECLARE @ParentRefRecId INT;
	DECLARE @functionIdentifier varchar(100);
	BEGIN
		SET @startSeq = (Select MIN(Sequence) from AVAFLOORAXINTPARENTTABLE where BATCHNUMBER = @batchcardno and FUNCTIONIDENTIFIER = 'STPI')
		SET @endSeq = (Select MAX(Sequence) from AVAFLOORAXINTPARENTTABLE where BATCHNUMBER = @batchcardno and FUNCTIONIDENTIFIER = 'STPI')
	END
	WHILE @startSeq <= @endSeq
	BEGIN
		INSERT INTO [dbo].[DOT_FLOORAXINTPARENTTABLE] ([BATCHCARDNUMBER],[BATCHNUMBER],[CREATIONTIME],[CREATORUSERID],[DELETERUSERID],[DELETIONTIME],[ERRORMESSAGE],[FSIDENTIFIER],
		[FUNCTIONIDENTIFIER],[ISDELETED],[LASTMODIFICATIONTIME],[LASTMODIFIERUSERID],[PROCESSINGSTATUS],[PLANTNO],[PalletId],[REFERENCEBATCHNUMBER1],[REFERENCEBATCHNUMBER2],[REFERENCEBATCHNUMBER3],
		[REFERENCEBATCHNUMBER4],[REFERENCEBATCHNUMBER5],[REFERENCEBATCHSEQUENCE1],[REFERENCEBATCHSEQUENCE2],[REFERENCEBATCHSEQUENCE3],[REFERENCEBATCHSEQUENCE4],[REFERENCEBATCHSEQUENCE5],
		[SEQUENCE],[IsMigratedFromAX6]) 

		SELECT ax.BATCHCARDNUMBER,ax.BATCHNUMBER,GETDATE() as CREATIONTIME,1 as CREATORUSERID,NULL as DELETERUSERID,NULL as DELETIONTIME,'' as ERRORMESSAGE,NEWID( ) as FSIDENTIFIER,
		case when b.TOWAREHOUSE = '' then 'STPI' else 'STPO' end as FUNCTIONIDENTIFIER,
		0 as ISDELETED,GETDATE() as LASTMODIFICATIONTIME,1 as LASTMODIFIERUSERID,3 as PROCESSINGSTATUS,SUBSTRING(b.LOCATION,0,3) as PLANTNO,
		ax.REFERENCEBATCHNUMBER1 as PalletId,NULL as REFERENCEBATCHNUMBER1,NULL as REFERENCEBATCHNUMBER2,
		NULL as REFERENCEBATCHNUMBER3,NULL as REFERENCEBATCHNUMBER4,NULL as REFERENCEBATCHNUMBER5,0 as REFERENCEBATCHSEQUENCE1,0 as REFERENCEBATCHSEQUENCE2,0 as REFERENCEBATCHSEQUENCE3,0 as REFERENCEBATCHSEQUENCE4,
		0 as REFERENCEBATCHSEQUENCE5,SEQUENCE,1 as IsMigratedFromAX6
		from AVAFLOORAXINTPARENTTABLE ax with (nolock) inner join AVATRANSFERJOURNAL b with (nolock) on ax.recid = b.PARENTREFRECID
		where ax.BATCHNUMBER = @batchcardno and ax.FUNCTIONIDENTIFIER = 'STPI' and ax.SEQUENCE = @startSeq
		SET @PARENTREFRECID = (SELECT @@IDENTITY)

		 INSERT INTO [dbo].[DOT_TransferJournal]  ([BatchCardNumber],[BatchNumber],[ReferenceItemNumber],[Configuration],[CreationTime],[CreatorUserId],[DeleterUserId],[DeletionTime],[Formula],
		 [IsDeleted],[ItemNumber],[LastModificationTime],[LastModifierUserId],[Location],[ParentRefRecId],[Quantity],[ScanInDateTime],[ScanOutDateTime],[TransferJournalId],[Warehouse],
		 [IsOrignalTemppack],[FGBatchOrderNumber]) 
	 
		 SELECT a.BATCHCARDNUMBER, a.BATCHNUMBER,'' as ReferenceItemNumber,a.CONFIGURATION,a.SCANINDATETIME as CreationTime,1 as CreatorUserId,NULL as DeleterUserId, NULL as DeletionTime,
		 '' As Formula,0 as IsDeleted,a.ITEMNUMBER,a.SCANINDATETIME as LastModificationTime,1 as LastModifierUserId,
		 case when a.TOWAREHOUSE='' then substring(a.LOCATION,4,2) else 'PN' end as Location,
		 @PARENTREFRECID as ParentRefRecId,a.QUANTITY,a.SCANINDATETIME,a.SCANINDATETIME as POSTINGDATETIME,'' as TransferJournalId, 
		 case when a.TOWAREHOUSE='' then a.WAREHOUSE else substring(a.TOWAREHOUSE,0,3)+'-PROD' end as Warehouse, 
		 0 as IsOrignalTemppack,'' as FGBatchOrderNumber 
		 FROM AVATRANSFERJOURNAL a  with (nolock)
		 inner join AVAFLOORAXINTPARENTTABLE ax with (nolock) on a.parentrefrecid = ax.recid
		 where ax.BATCHNUMBER=@batchcardno  and ax.FUNCTIONIDENTIFIER = 'STPI' and ax.SEQUENCE = @startSeq
		 SET @startSeq = @startSeq + 1
	END
END
GO
PRINT N'Creating Procedure [dbo].[USP_MG_IsNonSPorPT]...';


GO
create PROCEDURE [dbo].USP_MG_IsNonSPorPT
	@QcType varchar(100)
AS
BEGIN	
SET NOCOUNT ON
	SELECT Case when Description = 'STRAIGHT PACK' then 0 when Description = 'PT' then 0 else 1 end as IsNonSP 
	from DOT_FSQCTypeTable with (nolock) where QCType = @QcType
END
GO
PRINT N'Creating Procedure [dbo].[USP_MG_isResample]...';


GO
create PROCEDURE [dbo].USP_MG_isResample
	@bacthcardno varchar(100),
	@sequence int
AS
BEGIN	
SET NOCOUNT ON
	IF EXISTS(SELECT 1 from AVAFLOORAXINTPARENTTABLE where BATCHNUMBER = @bacthcardno and REFERENCEBATCHNUMBER1 = 'RESAMPLE' and SEQUENCE = @sequence)
	BEGIN
		SELECT 1
	END
	ELSE
	BEGIN
	SELECT 0
	END
END
GO
PRINT N'Creating Procedure [dbo].[USP_MG_UpdateProcessingStatusForRWK]...';


GO
create PROCEDURE [dbo].USP_MG_UpdateProcessingStatusForRWK
	@batchcardno varchar(100)
AS
BEGIN	
SET NOCOUNT ON
	Update DOT_FloorAxIntParentTable set ProcessingStatus = 4 where BatchNumber = @batchcardno and FunctionIdentifier = 'RWKCR'
END
GO
PRINT N'Creating Procedure [dbo].[USP_MG_UpdateSeqIfReworkExists]...';


GO
create PROCEDURE [dbo].USP_MG_UpdateSeqIfReworkExists
	@batchcardno varchar(100)
AS
BEGIN	
SET NOCOUNT ON
	Update DOT_FloorAxIntParentTable set Sequence = next value for sequence  where BatchNumber = @batchcardno
	ALTER SEQUENCE sequence RESTART
END
GO
PRINT N'Creating Procedure [dbo].[USP_MG_ValidateStaging]...';


GO
create PROCEDURE [dbo].USP_MG_ValidateStaging
	@bacthcardno varchar(100)
AS
BEGIN	
SET NOCOUNT ON
	if exists(SELECT 1 from DOT_FloorAxIntParentTable where BatchNumber = @bacthcardno)
	BEGIN
		SELECT 1
	END
	ELSE
	BEGIN
		SELECT 0
	END
END
GO
PRINT N'Creating Procedure [dbo].[USP_MG_ValidateSTPI]...';


GO
create PROCEDURE [dbo].USP_MG_ValidateSTPI
	@bacthcardno varchar(100)
AS
BEGIN	
SET NOCOUNT ON
	if exists(SELECT 1 from DOT_FloorAxIntParentTable where BatchNumber = @bacthcardno and FunctionIdentifier = 'STPI')
	BEGIN
		SELECT 0
	END
	ELSE
	BEGIN
		SELECT 1
	END
END
--GO
--PRINT N'Creating Procedure [dbo].[usp_MPS_Insert_tblRevisedSalesOrderFromFS]...';


--GO

---- =============================================================================

---- Date			Author			Description
---- 18/06/2021	Pang YS			- insert sales order ReOpen log into NGC MPS 

----exec usp_MPS_Insert_tblRevisedSalesOrderFromFS 'SO23123','CustRef','2020-01-01','2022-02-02','FG-ITEM-0001','8½', 'NB-AB-OLPF-027-SE-WHTE-ASTM'
----	,'8½','Surgical',1150.000000,20000000.000000,'ReOpen','2205001905001023', '2021-06-18'
---- ============================================================================= 


--CREATE PROCEDURE [dbo].[usp_MPS_Insert_tblRevisedSalesOrderFromFS]
--	-- Add the parameters for the stored procedure here
--	@SalesId [nvarchar](50),
--	@CustomerRef [nvarchar](200),
--	@ReceiptDateRequested [datetime],
--	@ShippingDateConfirmed [datetime],
--	@ItemId [nvarchar](50),		
--	@CONFIGURATION [nvarchar](20),	
--	@GloveCode [nvarchar](100),	
--	@GloveSize [nvarchar](20),
--	@ItemType [nvarchar](50),	
--	@SalesQty [numeric](32, 6),	
--	@DOTBaseQty [numeric](32, 6),	
--	@FloorStatus [nvarchar](50),	
--	@DOTCustomerLotID [nvarchar](50),
--	@CreatedDate [datetime]

--AS
--BEGIN
--	BEGIN TRY
--		DECLARE @ProductSize_1 [nvarchar](20) = NULL
--		DECLARE @ProductSize_2 [nvarchar](20) = NULL
		
--		IF (LOWER(@ItemType) = 'surgical')
--			SET @ProductSize_2 = @GloveSize
--		ELSE
--			SET @ProductSize_1 = @GloveSize

--		--INSERT SalesOrderApprovalLog (SalesId,CustomerRef,ReceiptDateRequested,ShippingDateConfirmed,ItemId,[CONFIGURATION],GloveCode,GloveSize,
--		--	ItemType,SalesQty,DOTBaseQty,FloorStatus,DOTCustomerLotID,CreatedDate, CreatedBy)
--		INSERT INTO syMPStblRevisedSalesOrderFromFS	([SalesID],[CustomerReference],[RETD],[CETD],[FGCode],[FGSize],[ProductCode],[ProductSize_1],[ProductSize_2]
--				,[OrderQty_Case],[OrderQty_Pcs],[FloorStatus],[CustomerLotNumber],[CreatedDate],[IsSync])
--		VALUES (@SalesId,@CustomerRef,@ReceiptDateRequested,@ShippingDateConfirmed,@ItemId,@CONFIGURATION,@GloveCode,@ProductSize_1,@ProductSize_2
--			,@SalesQty,@DOTBaseQty,@FloorStatus,@DOTCustomerLotID, @CreatedDate,0)

--	END TRY
--	BEGIN CATCH
		   
--		DECLARE @ErrorMessage NVARCHAR(4000);    
--		DECLARE @ErrorSeverity INT;    
--		DECLARE @ErrorState INT;    
--		DECLARE @key nvarchar(2000) = @SalesId + ',' + @ItemId + ',' + @CONFIGURATION

--		SELECT
--			@ErrorMessage = ERROR_MESSAGE(),    
--			@ErrorSeverity = ERROR_SEVERITY(),    
--			@ErrorState = ERROR_STATE();
--		RAISERROR (@ErrorMessage,     
--        @ErrorSeverity,    
--        @ErrorState     
--        );   

--		INSERT INTO [dbo].[Exception] ([Message],[StackTrace],[WorkStationID],[ExceptionDateTime],[InnerExceptionmessage],[SubSystem],[SystemBaseException],[ScreenName],[UIClassName],[UIControlName],[MethodParameter])  
--		VALUES ('eFS MPS insert tblRevisedSalesOrderFromFS error',@ErrorMessage,null, GETDATE(),@ErrorState,NULL,NULL, 'eFS Sales Order Screen','tblRevisedSalesOrderFromFS','', @key)    
    		   
--	END CATCH;  

--END
GO
PRINT N'Creating Permission Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[USP_SEL_Line_ALL_LocationAndGloveType] TO [FSDB]
    AS [dbo];


GO
PRINT N'Refreshing Function [dbo].[ufn_GetBatchSummaryTable]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[ufn_GetBatchSummaryTable]';


GO
PRINT N'Refreshing Function [dbo].[ufn_GetBatchSummaryTable_BeforeFP]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[ufn_GetBatchSummaryTable_BeforeFP]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_Rpt_Shipping_Traceability_BatchByPO_FGRework]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_Rpt_Shipping_Traceability_BatchByPO_FGRework]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_FP_GET_PalletInformation]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_FP_GET_PalletInformation]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_DOT_BatchOrderDetails_Get]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_DOT_BatchOrderDetails_Get]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_FP_GET_PalletInformation_5April18]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_FP_GET_PalletInformation_5April18]';


GO
PRINT N'Refreshing Procedure [dbo].[GetTR]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[GetTR]';


GO
PRINT N'Refreshing Procedure [dbo].[HSB_Rpt_FGOutputStatus]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[HSB_Rpt_FGOutputStatus]';


GO
PRINT N'Refreshing Procedure [dbo].[HSB_Rpt_OutStandingSalesOrderReport]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[HSB_Rpt_OutStandingSalesOrderReport]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_Rpt_Get_ListOfPONumber]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_Rpt_Get_ListOfPONumber]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_Rpt_Get_ListOfPONumber_withNULL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_Rpt_Get_ListOfPONumber_withNULL]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_Rpt_Production_FinalPackingDetailsReport_ByInternalLotPO]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_Rpt_Production_FinalPackingDetailsReport_ByInternalLotPO]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_Rpt_Production_FinalPackingDetailsReport_ByInternalLotPO_MonthDate]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_Rpt_Production_FinalPackingDetailsReport_ByInternalLotPO_MonthDate]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_Rpt_Production_FinalPackingDetailsReport_ByInternalLotPO_MonthDate_bak]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_Rpt_Production_FinalPackingDetailsReport_ByInternalLotPO_MonthDate_bak]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_Rpt_Shipping_Traceability_BatchByPO]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_Rpt_Shipping_Traceability_BatchByPO]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_Rpt_Shipping_Traceability_BatchByPO_HBXStatus]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_Rpt_Shipping_Traceability_BatchByPO_HBXStatus]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_Rpt_Shipping_Traceability_BatchByPO_MfgExp]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_Rpt_Shipping_Traceability_BatchByPO_MfgExp]';


GO
PRINT N'Refreshing Procedure [dbo].[proc_Rpt_Shipping_Traceability_BatchByPO_MircoFlex_LotNumber]...';


--GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[proc_Rpt_Shipping_Traceability_BatchByPO_MircoFlex_LotNumber]';


--GO
--PRINT N'Refreshing Procedure [dbo].[proc_Rpt_Shipping_Traceability_BatchByPO_MircoFlex_LotNumber_MES]...';


--GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[proc_Rpt_Shipping_Traceability_BatchByPO_MircoFlex_LotNumber_MES]';


--GO
--PRINT N'Refreshing Procedure [dbo].[proc_Rpt_Shipping_Traceability_SummaryGloveLotNumber]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[proc_Rpt_Shipping_Traceability_SummaryGloveLotNumber]';


GO
PRINT N'Refreshing Procedure [dbo].[SCM_GetFGTotalPacked]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SCM_GetFGTotalPacked]';


GO
PRINT N'Refreshing Procedure [dbo].[SCM_GetFGTotalPackedLineProd]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SCM_GetFGTotalPackedLineProd]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_BatchEnquiry]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_BatchEnquiry]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Brand_Get]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Brand_Get]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_CBCI_SerilaNoValidation]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_CBCI_SerilaNoValidation]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_ChangeBatchCardForInner_Save]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_ChangeBatchCardForInner_Save]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_ChangeBatchCardForInner_SaveCBCI]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_ChangeBatchCardForInner_SaveCBCI]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CreateRollbackCancelledCarton]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CreateRollbackCancelledCarton]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_DOT_FGBORemainingQty_Get]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_DOT_FGBORemainingQty_Get]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_DOT_FSPostD365FromFGReceivedPallet]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_DOT_FSPostD365FromFGReceivedPallet]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_DOT_Inventory360PostPalletToD365]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_DOT_Inventory360PostPalletToD365]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_DOT_PendingPalletScanListDashboard]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_DOT_PendingPalletScanListDashboard]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_DOT_ReprintMTS_FGBO_Selection]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_DOT_ReprintMTS_FGBO_Selection]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_EWN_UpdManualPalletResetLog]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_EWN_UpdManualPalletResetLog]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FO_PurchaseOrderItemStatus_Update]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FO_PurchaseOrderItemStatus_Update]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_CaseNumbers_Insert]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_CaseNumbers_Insert]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_CheckSOFGBulkdPackInnerCOMPrinting]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_CheckSOFGBulkdPackInnerCOMPrinting]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_FirstManufacturingDate_Get]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_FirstManufacturingDate_Get]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_FirstManufacturingDate_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_FirstManufacturingDate_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_FP_Get_ChangeBatchCardDetails]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_FP_Get_ChangeBatchCardDetails]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_Get_GCLabelInner]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_Get_GCLabelInner]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_Get_PreshipmentcasesListforPO]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_Get_PreshipmentcasesListforPO]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_FP_Get_ScanBatchCardInnerOuterforPosting]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_FP_Get_ScanBatchCardInnerOuterforPosting]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_FP_Get_ScanMultipleBatchCardforPosting]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_FP_Get_ScanMultipleBatchCardforPosting]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_FP_Get_SecondGradeforPosting]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_FP_Get_SecondGradeforPosting]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_Get_SurgicalInternalLotNumberDetails]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_Get_SurgicalInternalLotNumberDetails]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_GetCustomerSizeByPO]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_GetCustomerSizeByPO]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_GetItemType]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_GetItemType]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_GetPalletDetailsByPalletId]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_GetPalletDetailsByPalletId]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_InnerLotNumber_Validate]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_InnerLotNumber_Validate]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_InnerLotNumber_ValidateForCBCI]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_InnerLotNumber_ValidateForCBCI]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_POItem_Get]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_POItem_Get]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_POlastPreshipment_Validate]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_POlastPreshipment_Validate]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_PurchaseOrderItemCasesForReprint_Get]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_PurchaseOrderItemCasesForReprint_Get]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_PurchaseOrderItemStatus_Update]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_PurchaseOrderItemStatus_Update]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_RollBackChangeBatchCardData]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_RollBackChangeBatchCardData]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_RollBackFPPrintInnerOuter]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_RollBackFPPrintInnerOuter]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_SecondGradeInternalLotNumber_Get]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_SecondGradeInternalLotNumber_Get]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_SELECT_InplacePurchaseOrder]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_SELECT_InplacePurchaseOrder]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_SELECT_ReprintOuterCasePOList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_SELECT_ReprintOuterCasePOList]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_SolineData_Get]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_SolineData_Get]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_UpdatePurchaseOrder_Insert]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_UpdatePurchaseOrder_Insert]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GET_FGDropDownList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GET_FGDropDownList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GET_FSToAXPostingTransaction_BatchInfo]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GET_FSToAXPostingTransaction_BatchInfo]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_GET_GIS_RPT_Details]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_GET_GIS_RPT_Details]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_GET_GIS_RPT_Summary]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_GET_GIS_RPT_Summary]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GET_GloveInquiry]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GET_GloveInquiry]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GET_LotDetails]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GET_LotDetails]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GET_SizeDropDownList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GET_SizeDropDownList]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_GetPODetailsByInternalLotNumber]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_GetPODetailsByInternalLotNumber]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_GIS_GetBatchInfo]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_GIS_GetBatchInfo]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_PreshipmentCase_Get]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_PreshipmentCase_Get]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_QCEfficiency_Get]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_QCEfficiency_Get]';


--GO
--PRINT N'Refreshing Procedure [dbo].[usp_QCEfficiency_Get_BK_20180713]...';


--GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[usp_QCEfficiency_Get_BK_20180713]';


--GO
--PRINT N'Refreshing Procedure [dbo].[usp_QCEfficiency_Get_TEST]...';


--GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[usp_QCEfficiency_Get_TEST]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_RPT_ReportForJPNonJPSalesCapacity]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_RPT_ReportForJPNonJPSalesCapacity]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_RPT_ReportForLotNumberListing]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_RPT_ReportForLotNumberListing]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_RPT_WIPAging_AugST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_RPT_WIPAging_AugST]';


--GO
--PRINT N'Refreshing Procedure [dbo].[USP_RPT_WIPMonitoringSystem]...';


--GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[USP_RPT_WIPMonitoringSystem]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_SAV_CustomerRejectGloves]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_SAV_CustomerRejectGloves]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_SAV_ManualPalletResetLog]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_SAV_ManualPalletResetLog]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_SEL_WorkOrderDetails]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_SEL_WorkOrderDetails]';


--GO
--PRINT N'Refreshing Procedure [dbo].[USP_SEL_WorkOrderDetails_Test]...';


--GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[USP_SEL_WorkOrderDetails_Test]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_SEL_WorkOrderDetailsById]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_SEL_WorkOrderDetailsById]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_DOT_TOMsScanIn]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_DOT_TOMsScanIn]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_FP_BatchCapacity]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_FP_BatchCapacity]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GET_CompletePTDetails]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GET_CompletePTDetails]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GET_SurgicalPackingPlan_GetBatchPcs]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GET_SurgicalPackingPlan_GetBatchPcs]';


--GO
--PRINT N'Refreshing Procedure [dbo].[usp_wis_getGISStockLevel]...';


--GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[usp_wis_getGISStockLevel]';


--GO
--PRINT N'Refreshing Procedure [dbo].[USP_CreatePurchaseOrderRecords]...';


--GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CreatePurchaseOrderRecords]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CreatePOTransfer]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CreatePOTransfer]';


GO
PRINT N'Checking existing data against newly created constraints';


--GO
--USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[AbpPermissions] WITH CHECK CHECK CONSTRAINT [FK_AbpPermissions_AbpRoles_RoleId];

ALTER TABLE [dbo].[AbpPermissions] WITH CHECK CHECK CONSTRAINT [FK_AbpPermissions_AbpUsers_UserId];

ALTER TABLE [dbo].[AbpRoleClaims] WITH CHECK CHECK CONSTRAINT [FK_AbpRoleClaims_AbpRoles_RoleId];

ALTER TABLE [dbo].[AbpRoles] WITH CHECK CHECK CONSTRAINT [FK_AbpRoles_AbpUsers_CreatorUserId];

ALTER TABLE [dbo].[AbpRoles] WITH CHECK CHECK CONSTRAINT [FK_AbpRoles_AbpUsers_DeleterUserId];

ALTER TABLE [dbo].[AbpRoles] WITH CHECK CHECK CONSTRAINT [FK_AbpRoles_AbpUsers_LastModifierUserId];

ALTER TABLE [dbo].[AbpSettings] WITH CHECK CHECK CONSTRAINT [FK_AbpSettings_AbpUsers_UserId];

--ALTER TABLE [dbo].[AbpTenants] WITH CHECK CHECK CONSTRAINT [FK_AbpTenants_AbpEditions_EditionId];

ALTER TABLE [dbo].[AbpTenants] WITH CHECK CHECK CONSTRAINT [FK_AbpTenants_AbpUsers_CreatorUserId];

ALTER TABLE [dbo].[AbpTenants] WITH CHECK CHECK CONSTRAINT [FK_AbpTenants_AbpUsers_DeleterUserId];

ALTER TABLE [dbo].[AbpTenants] WITH CHECK CHECK CONSTRAINT [FK_AbpTenants_AbpUsers_LastModifierUserId];

ALTER TABLE [dbo].[AbpUserRoles] WITH CHECK CHECK CONSTRAINT [FK_AbpUserRoles_AbpUsers_UserId];

ALTER TABLE [dbo].[AbpUsers] WITH CHECK CHECK CONSTRAINT [FK_AbpUsers_AbpUsers_CreatorUserId];

ALTER TABLE [dbo].[AbpUsers] WITH CHECK CHECK CONSTRAINT [FK_AbpUsers_AbpUsers_DeleterUserId];

ALTER TABLE [dbo].[AbpUsers] WITH CHECK CHECK CONSTRAINT [FK_AbpUsers_AbpUsers_LastModifierUserId];


GO
PRINT N'Update complete.';


GO
